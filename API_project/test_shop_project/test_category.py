# -*- coding: utf-8 -*-# @Time : 2021/7/14 10:55# @Author : 孟艳红# @File : test_category.py 店铺分类import pytest, time, sysfrom API_project.Configs.Config_Api import Skb_Shop_Apifrom API_project.Configs.Config_Info import Api_Config_FileHOST = 'staging'  # 设置测试环境 test:测试环境，staging:回归环境，lxcrm:正式环境shop = Skb_Shop_Api(HOST)  # 实例化店铺搜索shopCategory = Api_Config_File(HOST).shopCategory()  # 实例化店铺分类并返回配置信息category_list = []category2_list = []for i in shopCategory['shopCategory']:    category_list.append((i["name"], i["value"]))    for j in i["sub"]:        category2_list.append((i["name"], i["value"], j["name"], j["value"]))class Test_category:    @pytest.mark.parametrize('categoryL1,categoryL1Name', category_list)    def test_CategoryL1(self, categoryL1, categoryL1Name, ES, ES_test):        if HOST == "lxcrm":            es_client = ES            indexss = "shop_info_prod"        else:            es_client = ES_test            indexss = "shop_info_test"        shopdat = shop.category(categoryL1=categoryL1, page=3, pagesize=100)        # print(shopdat.request.body.decode("unicode_escape"))        shopdata = shopdat.json()        time.sleep(2.2)        if shopdata['error_code'] != 0:            print(shopdata, categoryL1Name)            assert shopdata['error_code'] == 0        if shopdata['data']['total'] != 0:            for categoryL1_value in shopdata['data']['items']:                response_shop_id = categoryL1_value['id']                response_shop_name = categoryL1_value['name']                response_categoryL1_value = categoryL1_value['categoryL1']                if response_categoryL1_value != categoryL1Name:                    print("shop_name", response_shop_name, 'shop_id', response_shop_id, '\n搜索结果出错，店铺一级分类',                          response_categoryL1_value, '搜索一级分类', categoryL1Name)                    assert response_categoryL1_value == categoryL1Name  # 断言该店铺的搜索分类和详情页分类是否一致                try:                    # time.sleep(0.1)                    ES_categoryL1_value = es_client.get(index=indexss, id=response_shop_id)['_source'][                        'categoryL1']  # 获取es搜索数据内容                    # print(ES_categoryL1_value)                except:                    ES_categoryL1_value = None                assert int(categoryL1) == ES_categoryL1_value  # 断言该店铺搜索分类和es上该店铺的分类是否一致        else:            print(f'{categoryL1Name}搜索结果为空', shopdata)            assert shopdata['data']['total'] != 0    @pytest.mark.parametrize('categoryL1,categoryL1Name,categoryL2,categoryL2Name', category2_list)    def test_CategoryL2(self, categoryL1, categoryL1Name, categoryL2, categoryL2Name, ES, ES_test):        if HOST == "lxcrm":            es_client = ES            indexss = "shop_info_prod"        else:            es_client = ES_test            indexss = "shop_info_test"        shopdata = shop.category(categoryL2=categoryL2, page=1, pagesize=100).json()        time.sleep(2.2)        if shopdata['error_code'] != 0:            print(shopdata, categoryL2Name)            assert shopdata['error_code'] == 0        if shopdata['data']['total'] != 0:            for categoryL2_value in shopdata['data']['items']:                responseL2_shop_id = categoryL2_value['id']                responseL2_shop_name = categoryL2_value['name']                response_categoryL1_value = categoryL2_value['categoryL1']                response_categoryL2_value = categoryL2_value['categoryL2']                if response_categoryL2_value != categoryL2Name:                    print("shop_name", responseL2_shop_name, 'shop_id', responseL2_shop_id, '\n搜索结果出错，店铺二级分类',                          response_categoryL2_value, '搜索二级分类', categoryL2Name)                    assert response_categoryL2_value == categoryL2Name  # 断言该店铺的搜索分类和详情页分类是否一致                else:                    if response_categoryL1_value != categoryL1Name:                        print("shop_name", responseL2_shop_name, 'shop_id', responseL2_shop_id, '\n搜索结果出错，店铺二级分类',                              response_categoryL2_value, '不是店铺一级分类',                              response_categoryL1_value, '的二级分类')                    assert response_categoryL1_value == categoryL1Name  # 断言该店铺的搜索分类和详情页分类是否一致                try:                    # time.sleep(0.1)                    ES_categoryL2_value = es_client.get(index=indexss, id=responseL2_shop_id)['_source']  # 获取es搜索数据内容                    # print(ES_categoryL2_value,'ES搜索结果')                except:                    print('shop_id', responseL2_shop_id, 'shop_name', responseL2_shop_name, '店铺分类', categoryL2Name, 'ES搜索出错')                    ES_categoryL2_value = []                # ES_categoryL2_value = es_client.get(index="shop_info_prod", id=responseL2_shop_id)['_source']                if ES_categoryL2_value:                    if int(categoryL2) != ES_categoryL2_value['categoryL2']:                        print("shop_name", responseL2_shop_name, 'shop_id', responseL2_shop_id, '搜索和es不一致，店铺二级分类',                              response_categoryL2_value, categoryL2, '店铺一级分类', response_categoryL1_value)                    assert int(categoryL2) == ES_categoryL2_value['categoryL2']  # 断言该店铺搜索分类和es上该店铺的分类是否一致                    if int(categoryL1) != ES_categoryL2_value['categoryL1']:                        print("shop_name", responseL2_shop_name, 'shop_id', responseL2_shop_id, '搜索和es不一致店铺二级分类',                              response_categoryL2_value, categoryL2, '店铺一级分类', response_categoryL1_value)                    assert int(categoryL1) == ES_categoryL2_value['categoryL1']                else:                    assert ES_categoryL2_value != []  # 断言该店铺搜索分类和es上该店铺的分类是否一致        else:            print(f'{categoryL1Name},{categoryL2Name}搜索结果为空', shopdata)            assert shopdata['data']['total'] != 0