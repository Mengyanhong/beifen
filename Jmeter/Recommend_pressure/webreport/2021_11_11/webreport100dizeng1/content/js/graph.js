/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 3853.0, "minX": 0.0, "maxY": 120027.0, "series": [{"data": [[0.0, 3853.0], [0.1, 4082.0], [0.2, 4716.0], [0.3, 5133.0], [0.4, 5808.0], [0.5, 7375.0], [0.6, 7453.0], [0.7, 7576.0], [0.8, 8018.0], [0.9, 8521.0], [1.0, 8769.0], [1.1, 9366.0], [1.2, 10748.0], [1.3, 11083.0], [1.4, 11366.0], [1.5, 11781.0], [1.6, 12225.0], [1.7, 12786.0], [1.8, 12804.0], [1.9, 13613.0], [2.0, 14505.0], [2.1, 14538.0], [2.2, 15594.0], [2.3, 15633.0], [2.4, 16105.0], [2.5, 16417.0], [2.6, 16449.0], [2.7, 17172.0], [2.8, 17195.0], [2.9, 17905.0], [3.0, 19668.0], [3.1, 19707.0], [3.2, 20378.0], [3.3, 20418.0], [3.4, 20767.0], [3.5, 21218.0], [3.6, 21271.0], [3.7, 21730.0], [3.8, 21925.0], [3.9, 22126.0], [4.0, 22263.0], [4.1, 22586.0], [4.2, 22631.0], [4.3, 22688.0], [4.4, 22820.0], [4.5, 22833.0], [4.6, 22836.0], [4.7, 23014.0], [4.8, 23374.0], [4.9, 23436.0], [5.0, 23515.0], [5.1, 23516.0], [5.2, 23865.0], [5.3, 24031.0], [5.4, 24319.0], [5.5, 24513.0], [5.6, 24734.0], [5.7, 24789.0], [5.8, 24922.0], [5.9, 25149.0], [6.0, 25262.0], [6.1, 25533.0], [6.2, 25879.0], [6.3, 26082.0], [6.4, 26274.0], [6.5, 26321.0], [6.6, 26346.0], [6.7, 26651.0], [6.8, 26833.0], [6.9, 26888.0], [7.0, 26901.0], [7.1, 27056.0], [7.2, 27211.0], [7.3, 27445.0], [7.4, 27607.0], [7.5, 27760.0], [7.6, 27815.0], [7.7, 28006.0], [7.8, 28387.0], [7.9, 28412.0], [8.0, 28471.0], [8.1, 28508.0], [8.2, 28870.0], [8.3, 28943.0], [8.4, 28952.0], [8.5, 29188.0], [8.6, 29316.0], [8.7, 29401.0], [8.8, 29415.0], [8.9, 29439.0], [9.0, 29556.0], [9.1, 29605.0], [9.2, 29704.0], [9.3, 29738.0], [9.4, 29793.0], [9.5, 29821.0], [9.6, 29857.0], [9.7, 29902.0], [9.8, 30165.0], [9.9, 30170.0], [10.0, 30255.0], [10.1, 30285.0], [10.2, 30305.0], [10.3, 30406.0], [10.4, 30560.0], [10.5, 30629.0], [10.6, 30729.0], [10.7, 30744.0], [10.8, 30831.0], [10.9, 30889.0], [11.0, 30984.0], [11.1, 30996.0], [11.2, 31025.0], [11.3, 31177.0], [11.4, 31199.0], [11.5, 31271.0], [11.6, 31349.0], [11.7, 31410.0], [11.8, 31617.0], [11.9, 31618.0], [12.0, 31701.0], [12.1, 31760.0], [12.2, 31867.0], [12.3, 31941.0], [12.4, 31945.0], [12.5, 32013.0], [12.6, 32026.0], [12.7, 32087.0], [12.8, 32170.0], [12.9, 32416.0], [13.0, 32426.0], [13.1, 32520.0], [13.2, 32665.0], [13.3, 32767.0], [13.4, 32811.0], [13.5, 32866.0], [13.6, 32932.0], [13.7, 32967.0], [13.8, 33064.0], [13.9, 33077.0], [14.0, 33284.0], [14.1, 33366.0], [14.2, 33381.0], [14.3, 33431.0], [14.4, 33443.0], [14.5, 33587.0], [14.6, 33664.0], [14.7, 33666.0], [14.8, 33708.0], [14.9, 33763.0], [15.0, 33839.0], [15.1, 33851.0], [15.2, 33874.0], [15.3, 33936.0], [15.4, 33961.0], [15.5, 33981.0], [15.6, 33996.0], [15.7, 34001.0], [15.8, 34084.0], [15.9, 34133.0], [16.0, 34259.0], [16.1, 34331.0], [16.2, 34375.0], [16.3, 34479.0], [16.4, 34514.0], [16.5, 34540.0], [16.6, 34585.0], [16.7, 34587.0], [16.8, 34613.0], [16.9, 34628.0], [17.0, 34676.0], [17.1, 34767.0], [17.2, 34879.0], [17.3, 34929.0], [17.4, 34955.0], [17.5, 34969.0], [17.6, 35023.0], [17.7, 35040.0], [17.8, 35070.0], [17.9, 35114.0], [18.0, 35174.0], [18.1, 35237.0], [18.2, 35292.0], [18.3, 35342.0], [18.4, 35361.0], [18.5, 35394.0], [18.6, 35432.0], [18.7, 35506.0], [18.8, 35648.0], [18.9, 35713.0], [19.0, 35735.0], [19.1, 35801.0], [19.2, 35812.0], [19.3, 36102.0], [19.4, 36158.0], [19.5, 36182.0], [19.6, 36263.0], [19.7, 36269.0], [19.8, 36325.0], [19.9, 36334.0], [20.0, 36364.0], [20.1, 36461.0], [20.2, 36508.0], [20.3, 36565.0], [20.4, 36644.0], [20.5, 36718.0], [20.6, 36859.0], [20.7, 36989.0], [20.8, 37020.0], [20.9, 37073.0], [21.0, 37077.0], [21.1, 37107.0], [21.2, 37152.0], [21.3, 37172.0], [21.4, 37205.0], [21.5, 37210.0], [21.6, 37232.0], [21.7, 37252.0], [21.8, 37400.0], [21.9, 37504.0], [22.0, 37517.0], [22.1, 37571.0], [22.2, 37575.0], [22.3, 37594.0], [22.4, 37613.0], [22.5, 37620.0], [22.6, 37668.0], [22.7, 37692.0], [22.8, 37754.0], [22.9, 37853.0], [23.0, 37929.0], [23.1, 37987.0], [23.2, 37993.0], [23.3, 38051.0], [23.4, 38060.0], [23.5, 38074.0], [23.6, 38086.0], [23.7, 38090.0], [23.8, 38181.0], [23.9, 38231.0], [24.0, 38240.0], [24.1, 38253.0], [24.2, 38294.0], [24.3, 38353.0], [24.4, 38366.0], [24.5, 38380.0], [24.6, 38434.0], [24.7, 38438.0], [24.8, 38494.0], [24.9, 38518.0], [25.0, 38538.0], [25.1, 38548.0], [25.2, 38550.0], [25.3, 38566.0], [25.4, 38609.0], [25.5, 38624.0], [25.6, 38669.0], [25.7, 38671.0], [25.8, 38752.0], [25.9, 38761.0], [26.0, 38772.0], [26.1, 38857.0], [26.2, 38862.0], [26.3, 39005.0], [26.4, 39017.0], [26.5, 39053.0], [26.6, 39146.0], [26.7, 39162.0], [26.8, 39170.0], [26.9, 39289.0], [27.0, 39307.0], [27.1, 39363.0], [27.2, 39396.0], [27.3, 39412.0], [27.4, 39446.0], [27.5, 39454.0], [27.6, 39511.0], [27.7, 39547.0], [27.8, 39548.0], [27.9, 39570.0], [28.0, 39575.0], [28.1, 39576.0], [28.2, 39612.0], [28.3, 39668.0], [28.4, 39727.0], [28.5, 39732.0], [28.6, 39765.0], [28.7, 39824.0], [28.8, 39839.0], [28.9, 39899.0], [29.0, 39913.0], [29.1, 39934.0], [29.2, 39985.0], [29.3, 39989.0], [29.4, 40025.0], [29.5, 40028.0], [29.6, 40079.0], [29.7, 40089.0], [29.8, 40162.0], [29.9, 40204.0], [30.0, 40206.0], [30.1, 40229.0], [30.2, 40294.0], [30.3, 40378.0], [30.4, 40442.0], [30.5, 40506.0], [30.6, 40541.0], [30.7, 40588.0], [30.8, 40604.0], [30.9, 40656.0], [31.0, 40676.0], [31.1, 40723.0], [31.2, 40816.0], [31.3, 40843.0], [31.4, 40874.0], [31.5, 40896.0], [31.6, 40993.0], [31.7, 41006.0], [31.8, 41009.0], [31.9, 41048.0], [32.0, 41146.0], [32.1, 41217.0], [32.2, 41361.0], [32.3, 41375.0], [32.4, 41398.0], [32.5, 41517.0], [32.6, 41534.0], [32.7, 41580.0], [32.8, 41641.0], [32.9, 41666.0], [33.0, 41689.0], [33.1, 41743.0], [33.2, 41795.0], [33.3, 41817.0], [33.4, 41914.0], [33.5, 41980.0], [33.6, 41981.0], [33.7, 42012.0], [33.8, 42032.0], [33.9, 42064.0], [34.0, 42147.0], [34.1, 42149.0], [34.2, 42298.0], [34.3, 42328.0], [34.4, 42373.0], [34.5, 42415.0], [34.6, 42418.0], [34.7, 42503.0], [34.8, 42544.0], [34.9, 42588.0], [35.0, 42638.0], [35.1, 42648.0], [35.2, 42677.0], [35.3, 42684.0], [35.4, 42704.0], [35.5, 42825.0], [35.6, 42845.0], [35.7, 42865.0], [35.8, 42958.0], [35.9, 42971.0], [36.0, 43064.0], [36.1, 43065.0], [36.2, 43175.0], [36.3, 43234.0], [36.4, 43257.0], [36.5, 43273.0], [36.6, 43301.0], [36.7, 43340.0], [36.8, 43468.0], [36.9, 43544.0], [37.0, 43572.0], [37.1, 43717.0], [37.2, 43753.0], [37.3, 43848.0], [37.4, 43903.0], [37.5, 43946.0], [37.6, 43965.0], [37.7, 43991.0], [37.8, 44059.0], [37.9, 44197.0], [38.0, 44200.0], [38.1, 44240.0], [38.2, 44263.0], [38.3, 44281.0], [38.4, 44288.0], [38.5, 44306.0], [38.6, 44370.0], [38.7, 44422.0], [38.8, 44474.0], [38.9, 44534.0], [39.0, 44598.0], [39.1, 44598.0], [39.2, 44648.0], [39.3, 44682.0], [39.4, 44700.0], [39.5, 44720.0], [39.6, 44728.0], [39.7, 44763.0], [39.8, 44779.0], [39.9, 44791.0], [40.0, 44823.0], [40.1, 44862.0], [40.2, 44912.0], [40.3, 44966.0], [40.4, 44992.0], [40.5, 45066.0], [40.6, 45076.0], [40.7, 45105.0], [40.8, 45148.0], [40.9, 45189.0], [41.0, 45236.0], [41.1, 45255.0], [41.2, 45327.0], [41.3, 45384.0], [41.4, 45511.0], [41.5, 45580.0], [41.6, 45589.0], [41.7, 45641.0], [41.8, 45673.0], [41.9, 45714.0], [42.0, 45778.0], [42.1, 45794.0], [42.2, 45818.0], [42.3, 45855.0], [42.4, 45902.0], [42.5, 45917.0], [42.6, 45929.0], [42.7, 45989.0], [42.8, 46072.0], [42.9, 46125.0], [43.0, 46140.0], [43.1, 46168.0], [43.2, 46185.0], [43.3, 46258.0], [43.4, 46307.0], [43.5, 46405.0], [43.6, 46425.0], [43.7, 46476.0], [43.8, 46480.0], [43.9, 46512.0], [44.0, 46521.0], [44.1, 46522.0], [44.2, 46533.0], [44.3, 46544.0], [44.4, 46575.0], [44.5, 46579.0], [44.6, 46588.0], [44.7, 46612.0], [44.8, 46666.0], [44.9, 46694.0], [45.0, 46742.0], [45.1, 46769.0], [45.2, 46873.0], [45.3, 46895.0], [45.4, 46917.0], [45.5, 46980.0], [45.6, 47020.0], [45.7, 47035.0], [45.8, 47100.0], [45.9, 47108.0], [46.0, 47131.0], [46.1, 47162.0], [46.2, 47229.0], [46.3, 47244.0], [46.4, 47267.0], [46.5, 47271.0], [46.6, 47300.0], [46.7, 47384.0], [46.8, 47514.0], [46.9, 47538.0], [47.0, 47654.0], [47.1, 47690.0], [47.2, 47750.0], [47.3, 47766.0], [47.4, 47812.0], [47.5, 47830.0], [47.6, 47983.0], [47.7, 47988.0], [47.8, 48114.0], [47.9, 48170.0], [48.0, 48173.0], [48.1, 48260.0], [48.2, 48281.0], [48.3, 48378.0], [48.4, 48379.0], [48.5, 48490.0], [48.6, 48566.0], [48.7, 48581.0], [48.8, 48647.0], [48.9, 48695.0], [49.0, 48743.0], [49.1, 48765.0], [49.2, 48769.0], [49.3, 48811.0], [49.4, 48891.0], [49.5, 48968.0], [49.6, 49037.0], [49.7, 49056.0], [49.8, 49177.0], [49.9, 49181.0], [50.0, 49284.0], [50.1, 49300.0], [50.2, 49363.0], [50.3, 49382.0], [50.4, 49417.0], [50.5, 49435.0], [50.6, 49491.0], [50.7, 49517.0], [50.8, 49581.0], [50.9, 49599.0], [51.0, 49638.0], [51.1, 49726.0], [51.2, 49778.0], [51.3, 49856.0], [51.4, 49873.0], [51.5, 49896.0], [51.6, 49948.0], [51.7, 49988.0], [51.8, 50097.0], [51.9, 50108.0], [52.0, 50176.0], [52.1, 50206.0], [52.2, 50212.0], [52.3, 50225.0], [52.4, 50226.0], [52.5, 50241.0], [52.6, 50297.0], [52.7, 50314.0], [52.8, 50348.0], [52.9, 50352.0], [53.0, 50369.0], [53.1, 50402.0], [53.2, 50439.0], [53.3, 50468.0], [53.4, 50576.0], [53.5, 50613.0], [53.6, 50644.0], [53.7, 50648.0], [53.8, 50661.0], [53.9, 50752.0], [54.0, 50768.0], [54.1, 50857.0], [54.2, 50906.0], [54.3, 50935.0], [54.4, 50991.0], [54.5, 51001.0], [54.6, 51027.0], [54.7, 51047.0], [54.8, 51065.0], [54.9, 51136.0], [55.0, 51147.0], [55.1, 51164.0], [55.2, 51186.0], [55.3, 51209.0], [55.4, 51272.0], [55.5, 51326.0], [55.6, 51403.0], [55.7, 51419.0], [55.8, 51517.0], [55.9, 51558.0], [56.0, 51588.0], [56.1, 51613.0], [56.2, 51640.0], [56.3, 51712.0], [56.4, 51746.0], [56.5, 51760.0], [56.6, 51786.0], [56.7, 51794.0], [56.8, 51841.0], [56.9, 51939.0], [57.0, 51947.0], [57.1, 52021.0], [57.2, 52069.0], [57.3, 52115.0], [57.4, 52141.0], [57.5, 52143.0], [57.6, 52269.0], [57.7, 52273.0], [57.8, 52299.0], [57.9, 52395.0], [58.0, 52463.0], [58.1, 52472.0], [58.2, 52488.0], [58.3, 52656.0], [58.4, 52681.0], [58.5, 52719.0], [58.6, 52818.0], [58.7, 52821.0], [58.8, 52891.0], [58.9, 52903.0], [59.0, 52925.0], [59.1, 53006.0], [59.2, 53074.0], [59.3, 53145.0], [59.4, 53160.0], [59.5, 53181.0], [59.6, 53288.0], [59.7, 53303.0], [59.8, 53356.0], [59.9, 53387.0], [60.0, 53456.0], [60.1, 53594.0], [60.2, 53626.0], [60.3, 53639.0], [60.4, 53696.0], [60.5, 53702.0], [60.6, 53729.0], [60.7, 53808.0], [60.8, 53836.0], [60.9, 53880.0], [61.0, 53881.0], [61.1, 53908.0], [61.2, 53954.0], [61.3, 53995.0], [61.4, 54061.0], [61.5, 54083.0], [61.6, 54133.0], [61.7, 54175.0], [61.8, 54198.0], [61.9, 54265.0], [62.0, 54277.0], [62.1, 54290.0], [62.2, 54352.0], [62.3, 54388.0], [62.4, 54450.0], [62.5, 54511.0], [62.6, 54528.0], [62.7, 54657.0], [62.8, 54691.0], [62.9, 54894.0], [63.0, 54930.0], [63.1, 54940.0], [63.2, 54950.0], [63.3, 54952.0], [63.4, 55009.0], [63.5, 55063.0], [63.6, 55128.0], [63.7, 55163.0], [63.8, 55176.0], [63.9, 55256.0], [64.0, 55264.0], [64.1, 55341.0], [64.2, 55408.0], [64.3, 55437.0], [64.4, 55583.0], [64.5, 55595.0], [64.6, 55752.0], [64.7, 55853.0], [64.8, 55906.0], [64.9, 55927.0], [65.0, 55936.0], [65.1, 55971.0], [65.2, 56071.0], [65.3, 56094.0], [65.4, 56140.0], [65.5, 56170.0], [65.6, 56300.0], [65.7, 56398.0], [65.8, 56425.0], [65.9, 56705.0], [66.0, 56729.0], [66.1, 56813.0], [66.2, 56867.0], [66.3, 56908.0], [66.4, 56925.0], [66.5, 56934.0], [66.6, 56958.0], [66.7, 56971.0], [66.8, 56997.0], [66.9, 57012.0], [67.0, 57049.0], [67.1, 57049.0], [67.2, 57085.0], [67.3, 57122.0], [67.4, 57145.0], [67.5, 57255.0], [67.6, 57288.0], [67.7, 57496.0], [67.8, 57498.0], [67.9, 57629.0], [68.0, 57805.0], [68.1, 57841.0], [68.2, 57977.0], [68.3, 57985.0], [68.4, 57997.0], [68.5, 58055.0], [68.6, 58084.0], [68.7, 58137.0], [68.8, 58170.0], [68.9, 58230.0], [69.0, 58253.0], [69.1, 58256.0], [69.2, 58482.0], [69.3, 58541.0], [69.4, 58592.0], [69.5, 58714.0], [69.6, 58759.0], [69.7, 58937.0], [69.8, 59080.0], [69.9, 59091.0], [70.0, 59127.0], [70.1, 59147.0], [70.2, 59210.0], [70.3, 59219.0], [70.4, 59270.0], [70.5, 59294.0], [70.6, 59331.0], [70.7, 59381.0], [70.8, 59483.0], [70.9, 59503.0], [71.0, 59565.0], [71.1, 59633.0], [71.2, 59636.0], [71.3, 59638.0], [71.4, 59759.0], [71.5, 59787.0], [71.6, 59978.0], [71.7, 60244.0], [71.8, 60295.0], [71.9, 60310.0], [72.0, 60320.0], [72.1, 60329.0], [72.2, 60478.0], [72.3, 60589.0], [72.4, 60649.0], [72.5, 60753.0], [72.6, 60860.0], [72.7, 60919.0], [72.8, 60932.0], [72.9, 60998.0], [73.0, 61028.0], [73.1, 61036.0], [73.2, 61143.0], [73.3, 61233.0], [73.4, 61254.0], [73.5, 61297.0], [73.6, 61304.0], [73.7, 61410.0], [73.8, 61428.0], [73.9, 61454.0], [74.0, 61549.0], [74.1, 61582.0], [74.2, 61706.0], [74.3, 61788.0], [74.4, 61797.0], [74.5, 61984.0], [74.6, 61985.0], [74.7, 62037.0], [74.8, 62067.0], [74.9, 62067.0], [75.0, 62104.0], [75.1, 62139.0], [75.2, 62215.0], [75.3, 62252.0], [75.4, 62265.0], [75.5, 62305.0], [75.6, 62342.0], [75.7, 62379.0], [75.8, 62430.0], [75.9, 62520.0], [76.0, 62568.0], [76.1, 62706.0], [76.2, 62835.0], [76.3, 62913.0], [76.4, 62914.0], [76.5, 63019.0], [76.6, 63026.0], [76.7, 63072.0], [76.8, 63110.0], [76.9, 63140.0], [77.0, 63186.0], [77.1, 63263.0], [77.2, 63329.0], [77.3, 63364.0], [77.4, 63412.0], [77.5, 63480.0], [77.6, 63490.0], [77.7, 63552.0], [77.8, 63614.0], [77.9, 63651.0], [78.0, 63666.0], [78.1, 63754.0], [78.2, 63795.0], [78.3, 63985.0], [78.4, 64016.0], [78.5, 64072.0], [78.6, 64116.0], [78.7, 64186.0], [78.8, 64359.0], [78.9, 64377.0], [79.0, 64446.0], [79.1, 64572.0], [79.2, 64810.0], [79.3, 64822.0], [79.4, 64927.0], [79.5, 64955.0], [79.6, 65036.0], [79.7, 65097.0], [79.8, 65206.0], [79.9, 65214.0], [80.0, 65529.0], [80.1, 65635.0], [80.2, 65755.0], [80.3, 65890.0], [80.4, 66016.0], [80.5, 66238.0], [80.6, 66295.0], [80.7, 66332.0], [80.8, 66376.0], [80.9, 66383.0], [81.0, 66533.0], [81.1, 66707.0], [81.2, 66736.0], [81.3, 66891.0], [81.4, 66904.0], [81.5, 66968.0], [81.6, 67289.0], [81.7, 67501.0], [81.8, 67825.0], [81.9, 67832.0], [82.0, 68379.0], [82.1, 68450.0], [82.2, 68483.0], [82.3, 68742.0], [82.4, 68797.0], [82.5, 69304.0], [82.6, 69392.0], [82.7, 69406.0], [82.8, 69551.0], [82.9, 69599.0], [83.0, 69691.0], [83.1, 69860.0], [83.2, 69897.0], [83.3, 70046.0], [83.4, 70164.0], [83.5, 70279.0], [83.6, 70570.0], [83.7, 70638.0], [83.8, 70764.0], [83.9, 70784.0], [84.0, 70883.0], [84.1, 71015.0], [84.2, 71045.0], [84.3, 71354.0], [84.4, 71493.0], [84.5, 71557.0], [84.6, 71653.0], [84.7, 71760.0], [84.8, 71843.0], [84.9, 71934.0], [85.0, 71983.0], [85.1, 72182.0], [85.2, 72240.0], [85.3, 72484.0], [85.4, 72573.0], [85.5, 72589.0], [85.6, 72645.0], [85.7, 72663.0], [85.8, 72758.0], [85.9, 72768.0], [86.0, 72861.0], [86.1, 73043.0], [86.2, 73088.0], [86.3, 73259.0], [86.4, 73408.0], [86.5, 73428.0], [86.6, 73539.0], [86.7, 73568.0], [86.8, 73596.0], [86.9, 73686.0], [87.0, 73788.0], [87.1, 73979.0], [87.2, 74008.0], [87.3, 74141.0], [87.4, 74326.0], [87.5, 74461.0], [87.6, 74683.0], [87.7, 74730.0], [87.8, 74789.0], [87.9, 75210.0], [88.0, 75515.0], [88.1, 75651.0], [88.2, 75716.0], [88.3, 75783.0], [88.4, 75863.0], [88.5, 75919.0], [88.6, 76153.0], [88.7, 76176.0], [88.8, 76562.0], [88.9, 76758.0], [89.0, 76884.0], [89.1, 76951.0], [89.2, 77010.0], [89.3, 77034.0], [89.4, 77382.0], [89.5, 77523.0], [89.6, 77563.0], [89.7, 77638.0], [89.8, 77815.0], [89.9, 78224.0], [90.0, 78249.0], [90.1, 78458.0], [90.2, 78596.0], [90.3, 78733.0], [90.4, 78825.0], [90.5, 78871.0], [90.6, 79060.0], [90.7, 79128.0], [90.8, 79213.0], [90.9, 79356.0], [91.0, 79480.0], [91.1, 79755.0], [91.2, 79761.0], [91.3, 80011.0], [91.4, 80280.0], [91.5, 80303.0], [91.6, 80577.0], [91.7, 80747.0], [91.8, 81381.0], [91.9, 81650.0], [92.0, 81738.0], [92.1, 81862.0], [92.2, 82110.0], [92.3, 82156.0], [92.4, 82346.0], [92.5, 82372.0], [92.6, 82407.0], [92.7, 82672.0], [92.8, 82792.0], [92.9, 82877.0], [93.0, 82897.0], [93.1, 83338.0], [93.2, 83423.0], [93.3, 83517.0], [93.4, 83788.0], [93.5, 83795.0], [93.6, 83861.0], [93.7, 83999.0], [93.8, 84817.0], [93.9, 85104.0], [94.0, 86068.0], [94.1, 86185.0], [94.2, 86962.0], [94.3, 87038.0], [94.4, 87540.0], [94.5, 87774.0], [94.6, 87821.0], [94.7, 88517.0], [94.8, 88618.0], [94.9, 88790.0], [95.0, 88931.0], [95.1, 89273.0], [95.2, 89580.0], [95.3, 89727.0], [95.4, 90033.0], [95.5, 90064.0], [95.6, 90238.0], [95.7, 90432.0], [95.8, 90471.0], [95.9, 90573.0], [96.0, 90618.0], [96.1, 91444.0], [96.2, 91719.0], [96.3, 91936.0], [96.4, 92305.0], [96.5, 92414.0], [96.6, 92542.0], [96.7, 93044.0], [96.8, 93389.0], [96.9, 94459.0], [97.0, 94461.0], [97.1, 95044.0], [97.2, 95486.0], [97.3, 95580.0], [97.4, 97028.0], [97.5, 98839.0], [97.6, 99080.0], [97.7, 99588.0], [97.8, 99621.0], [97.9, 101644.0], [98.0, 101900.0], [98.1, 104769.0], [98.2, 105529.0], [98.3, 105764.0], [98.4, 107348.0], [98.5, 109285.0], [98.6, 110352.0], [98.7, 110892.0], [98.8, 111523.0], [98.9, 111950.0], [99.0, 112904.0], [99.1, 113243.0], [99.2, 116722.0], [99.3, 119095.0], [99.4, 120010.0], [99.5, 120010.0], [99.6, 120012.0], [99.7, 120015.0], [99.8, 120017.0], [99.9, 120024.0]], "isOverall": false, "label": "HTTP\u8BF7\u6C42", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 3800.0, "maxY": 13.0, "series": [{"data": [[66700.0, 2.0], [68300.0, 1.0], [73100.0, 1.0], [71500.0, 3.0], [69900.0, 1.0], [74700.0, 3.0], [82700.0, 2.0], [87500.0, 1.0], [92300.0, 1.0], [90700.0, 1.0], [95500.0, 2.0], [101900.0, 1.0], [111500.0, 1.0], [33700.0, 3.0], [34500.0, 7.0], [32900.0, 3.0], [35300.0, 6.0], [36100.0, 4.0], [38500.0, 9.0], [37700.0, 2.0], [36900.0, 1.0], [40100.0, 2.0], [39300.0, 5.0], [40900.0, 3.0], [41700.0, 4.0], [42500.0, 4.0], [44100.0, 3.0], [44900.0, 4.0], [43300.0, 3.0], [46500.0, 13.0], [45700.0, 4.0], [48100.0, 5.0], [48900.0, 3.0], [47300.0, 3.0], [50500.0, 1.0], [49700.0, 3.0], [52900.0, 3.0], [51300.0, 2.0], [52100.0, 5.0], [53700.0, 4.0], [54500.0, 4.0], [56900.0, 9.0], [55300.0, 2.0], [56100.0, 3.0], [59300.0, 3.0], [58500.0, 3.0], [60900.0, 4.0], [63300.0, 3.0], [61700.0, 4.0], [62500.0, 3.0], [64900.0, 3.0], [64100.0, 3.0], [65800.0, 2.0], [70600.0, 2.0], [72200.0, 1.0], [77000.0, 4.0], [73800.0, 1.0], [78600.0, 1.0], [81800.0, 1.0], [80200.0, 1.0], [83400.0, 2.0], [91400.0, 1.0], [93000.0, 1.0], [3800.0, 1.0], [4000.0, 1.0], [4300.0, 1.0], [66500.0, 3.0], [68100.0, 1.0], [71300.0, 1.0], [72900.0, 1.0], [69700.0, 1.0], [4700.0, 1.0], [77700.0, 1.0], [76100.0, 2.0], [5100.0, 1.0], [79300.0, 1.0], [5300.0, 1.0], [88900.0, 2.0], [5800.0, 1.0], [90500.0, 2.0], [92100.0, 1.0], [95300.0, 1.0], [6200.0, 1.0], [112900.0, 1.0], [7400.0, 2.0], [7300.0, 1.0], [7500.0, 1.0], [8000.0, 2.0], [11200.0, 1.0], [11000.0, 1.0], [11400.0, 1.0], [12200.0, 1.0], [12600.0, 1.0], [12800.0, 1.0], [13600.0, 1.0], [14000.0, 1.0], [15600.0, 1.0], [16000.0, 1.0], [16400.0, 2.0], [17600.0, 1.0], [18800.0, 1.0], [19600.0, 1.0], [20400.0, 1.0], [20000.0, 1.0], [21200.0, 2.0], [22800.0, 5.0], [24000.0, 2.0], [25200.0, 1.0], [26000.0, 1.0], [27600.0, 2.0], [26800.0, 3.0], [27200.0, 1.0], [28400.0, 3.0], [28000.0, 2.0], [29600.0, 2.0], [28800.0, 1.0], [30400.0, 1.0], [30000.0, 1.0], [30800.0, 2.0], [31600.0, 3.0], [31200.0, 2.0], [32000.0, 5.0], [32400.0, 3.0], [32800.0, 3.0], [34400.0, 2.0], [33600.0, 2.0], [35200.0, 2.0], [36800.0, 2.0], [38400.0, 5.0], [37600.0, 5.0], [40000.0, 7.0], [40800.0, 5.0], [39200.0, 2.0], [42400.0, 3.0], [41600.0, 4.0], [44800.0, 4.0], [43200.0, 5.0], [44000.0, 1.0], [46400.0, 6.0], [45600.0, 4.0], [47200.0, 6.0], [48800.0, 2.0], [48000.0, 1.0], [50400.0, 5.0], [49600.0, 3.0], [51200.0, 4.0], [52000.0, 4.0], [52800.0, 6.0], [53600.0, 5.0], [54400.0, 2.0], [55200.0, 4.0], [56800.0, 3.0], [56000.0, 3.0], [59200.0, 6.0], [57600.0, 2.0], [58400.0, 2.0], [60800.0, 2.0], [60000.0, 1.0], [62400.0, 2.0], [63200.0, 2.0], [61600.0, 1.0], [64000.0, 3.0], [64800.0, 3.0], [67200.0, 2.0], [65600.0, 1.0], [70400.0, 1.0], [73600.0, 2.0], [75200.0, 1.0], [76800.0, 1.0], [80000.0, 2.0], [81600.0, 1.0], [78400.0, 1.0], [84800.0, 2.0], [94400.0, 2.0], [99200.0, 1.0], [120000.0, 11.0], [68700.0, 2.0], [71900.0, 3.0], [73500.0, 4.0], [76700.0, 2.0], [81500.0, 1.0], [79900.0, 1.0], [78300.0, 1.0], [89500.0, 1.0], [92700.0, 1.0], [105500.0, 1.0], [110300.0, 1.0], [111900.0, 1.0], [116700.0, 1.0], [33100.0, 1.0], [33900.0, 6.0], [34700.0, 2.0], [36300.0, 5.0], [35500.0, 1.0], [38700.0, 6.0], [37100.0, 5.0], [37900.0, 4.0], [39500.0, 10.0], [40300.0, 1.0], [41900.0, 5.0], [41100.0, 2.0], [42700.0, 2.0], [43500.0, 4.0], [44300.0, 3.0], [45100.0, 4.0], [46700.0, 3.0], [45900.0, 6.0], [48300.0, 4.0], [49100.0, 2.0], [47500.0, 3.0], [50700.0, 3.0], [49900.0, 3.0], [51500.0, 5.0], [52300.0, 2.0], [53100.0, 5.0], [54700.0, 1.0], [53900.0, 5.0], [56300.0, 3.0], [55500.0, 4.0], [57100.0, 4.0], [58700.0, 3.0], [57900.0, 4.0], [60300.0, 5.0], [59500.0, 3.0], [61100.0, 1.0], [62700.0, 2.0], [61900.0, 2.0], [63500.0, 3.0], [65100.0, 1.0], [64300.0, 3.0], [66200.0, 4.0], [69400.0, 2.0], [67800.0, 2.0], [72600.0, 3.0], [71000.0, 2.0], [75800.0, 1.0], [74200.0, 1.0], [79000.0, 1.0], [83800.0, 2.0], [87000.0, 1.0], [88600.0, 2.0], [90200.0, 3.0], [95000.0, 1.0], [119000.0, 1.0], [66900.0, 3.0], [68500.0, 1.0], [70100.0, 1.0], [71700.0, 2.0], [74900.0, 1.0], [76500.0, 1.0], [79700.0, 2.0], [81300.0, 2.0], [78100.0, 1.0], [87700.0, 2.0], [86100.0, 2.0], [89300.0, 1.0], [92500.0, 1.0], [111700.0, 1.0], [19700.0, 1.0], [20900.0, 1.0], [21300.0, 1.0], [22100.0, 3.0], [21700.0, 1.0], [22500.0, 1.0], [23300.0, 2.0], [23700.0, 1.0], [24500.0, 1.0], [24900.0, 2.0], [26100.0, 1.0], [27300.0, 1.0], [26900.0, 1.0], [28500.0, 2.0], [27700.0, 1.0], [28900.0, 3.0], [29300.0, 2.0], [30100.0, 2.0], [29700.0, 5.0], [30500.0, 1.0], [31300.0, 2.0], [30900.0, 3.0], [31700.0, 2.0], [32500.0, 2.0], [32100.0, 2.0], [33800.0, 6.0], [34600.0, 4.0], [33000.0, 3.0], [35400.0, 1.0], [36200.0, 4.0], [38600.0, 5.0], [37000.0, 6.0], [37800.0, 2.0], [39400.0, 5.0], [40200.0, 6.0], [42600.0, 7.0], [41000.0, 4.0], [41800.0, 2.0], [43400.0, 1.0], [45000.0, 4.0], [44200.0, 8.0], [45800.0, 4.0], [46600.0, 4.0], [48200.0, 2.0], [49000.0, 3.0], [47400.0, 1.0], [50600.0, 7.0], [49800.0, 4.0], [53000.0, 2.0], [52200.0, 4.0], [51400.0, 2.0], [53800.0, 6.0], [54600.0, 2.0], [57000.0, 7.0], [55400.0, 2.0], [56200.0, 1.0], [57800.0, 3.0], [58600.0, 1.0], [60200.0, 2.0], [59400.0, 2.0], [61000.0, 4.0], [63400.0, 4.0], [61800.0, 1.0], [65000.0, 3.0], [66000.0, 1.0], [70800.0, 1.0], [72400.0, 2.0], [74000.0, 2.0], [75600.0, 1.0], [78800.0, 2.0], [83600.0, 1.0], [90000.0, 2.0], [94800.0, 1.0], [99600.0, 1.0], [106000.0, 1.0], [109200.0, 1.0], [110800.0, 2.0], [67500.0, 2.0], [70700.0, 3.0], [73900.0, 1.0], [75500.0, 2.0], [78700.0, 2.0], [80300.0, 1.0], [85100.0, 1.0], [83500.0, 1.0], [88300.0, 1.0], [91500.0, 1.0], [99500.0, 1.0], [101100.0, 1.0], [33300.0, 3.0], [34100.0, 2.0], [35700.0, 4.0], [34900.0, 5.0], [36500.0, 4.0], [38100.0, 2.0], [37300.0, 1.0], [39700.0, 5.0], [40500.0, 5.0], [41300.0, 4.0], [42100.0, 3.0], [42900.0, 3.0], [44500.0, 4.0], [43700.0, 3.0], [46100.0, 6.0], [45300.0, 4.0], [46900.0, 3.0], [48500.0, 3.0], [47700.0, 3.0], [49300.0, 4.0], [50900.0, 5.0], [50100.0, 4.0], [51700.0, 8.0], [53300.0, 5.0], [54900.0, 7.0], [54100.0, 5.0], [55700.0, 2.0], [58900.0, 1.0], [58100.0, 3.0], [59700.0, 3.0], [60500.0, 1.0], [61300.0, 2.0], [62100.0, 4.0], [62900.0, 3.0], [64500.0, 1.0], [63700.0, 3.0], [71400.0, 1.0], [69800.0, 2.0], [73000.0, 2.0], [74600.0, 2.0], [77800.0, 1.0], [76200.0, 1.0], [79400.0, 1.0], [82600.0, 1.0], [90600.0, 1.0], [95400.0, 1.0], [97000.0, 1.0], [105000.0, 1.0], [109800.0, 1.0], [113000.0, 1.0], [68900.0, 1.0], [65700.0, 1.0], [70500.0, 1.0], [72100.0, 2.0], [73700.0, 1.0], [76900.0, 2.0], [81700.0, 2.0], [78500.0, 1.0], [83300.0, 2.0], [89700.0, 2.0], [105700.0, 1.0], [107300.0, 1.0], [8500.0, 1.0], [8700.0, 2.0], [9300.0, 1.0], [10700.0, 2.0], [11300.0, 1.0], [11700.0, 1.0], [12700.0, 1.0], [13500.0, 1.0], [14500.0, 2.0], [14900.0, 1.0], [15500.0, 1.0], [16100.0, 2.0], [16600.0, 1.0], [22200.0, 1.0], [22600.0, 3.0], [23000.0, 1.0], [23400.0, 2.0], [23800.0, 1.0], [25800.0, 2.0], [26200.0, 1.0], [26600.0, 1.0], [27000.0, 1.0], [27400.0, 1.0], [27800.0, 1.0], [29400.0, 4.0], [29000.0, 1.0], [30600.0, 2.0], [30200.0, 4.0], [29800.0, 3.0], [31000.0, 2.0], [31400.0, 1.0], [31800.0, 2.0], [32600.0, 2.0], [33200.0, 1.0], [34800.0, 2.0], [34000.0, 3.0], [35600.0, 2.0], [36400.0, 1.0], [38800.0, 3.0], [38000.0, 8.0], [37200.0, 5.0], [40400.0, 2.0], [39600.0, 3.0], [42000.0, 4.0], [41200.0, 2.0], [42800.0, 4.0], [44400.0, 3.0], [45200.0, 3.0], [46800.0, 4.0], [46000.0, 2.0], [47600.0, 3.0], [48400.0, 1.0], [49200.0, 3.0], [50800.0, 1.0], [50000.0, 2.0], [52400.0, 4.0], [51600.0, 4.0], [53200.0, 2.0], [54000.0, 2.0], [54800.0, 1.0], [57200.0, 2.0], [56400.0, 1.0], [58000.0, 3.0], [59600.0, 5.0], [60400.0, 2.0], [61200.0, 5.0], [62800.0, 2.0], [62000.0, 5.0], [63600.0, 4.0], [65200.0, 2.0], [64400.0, 2.0], [69600.0, 2.0], [72800.0, 2.0], [77600.0, 1.0], [76000.0, 1.0], [74400.0, 1.0], [79200.0, 2.0], [82400.0, 1.0], [90400.0, 2.0], [93600.0, 1.0], [101600.0, 1.0], [69500.0, 2.0], [66300.0, 4.0], [72700.0, 3.0], [71100.0, 1.0], [75900.0, 1.0], [77500.0, 3.0], [74300.0, 1.0], [79100.0, 2.0], [80700.0, 1.0], [82300.0, 4.0], [83900.0, 2.0], [87100.0, 1.0], [88700.0, 1.0], [91900.0, 1.0], [103100.0, 1.0], [104700.0, 1.0], [114300.0, 1.0], [33500.0, 2.0], [34300.0, 3.0], [35100.0, 4.0], [36700.0, 1.0], [37500.0, 8.0], [38300.0, 5.0], [40700.0, 3.0], [39100.0, 4.0], [39900.0, 6.0], [42300.0, 4.0], [41500.0, 5.0], [43900.0, 6.0], [44700.0, 9.0], [43100.0, 2.0], [47100.0, 6.0], [46300.0, 2.0], [45500.0, 4.0], [48700.0, 6.0], [47900.0, 3.0], [49500.0, 4.0], [50300.0, 7.0], [51100.0, 6.0], [52700.0, 1.0], [51900.0, 2.0], [54300.0, 2.0], [53500.0, 2.0], [55100.0, 4.0], [55900.0, 6.0], [56700.0, 3.0], [57500.0, 1.0], [59100.0, 4.0], [59900.0, 1.0], [60700.0, 1.0], [63100.0, 5.0], [62300.0, 5.0], [61500.0, 2.0], [63900.0, 1.0], [65500.0, 2.0], [73400.0, 4.0], [70200.0, 2.0], [71800.0, 1.0], [78200.0, 2.0], [86200.0, 1.0], [87800.0, 1.0], [99000.0, 1.0], [69300.0, 3.0], [72500.0, 3.0], [70900.0, 1.0], [75700.0, 4.0], [77300.0, 1.0], [74100.0, 1.0], [78900.0, 1.0], [80500.0, 2.0], [82100.0, 3.0], [83700.0, 2.0], [86900.0, 1.0], [88500.0, 1.0], [91700.0, 1.0], [93300.0, 1.0], [17100.0, 2.0], [17900.0, 1.0], [20300.0, 1.0], [20700.0, 2.0], [21900.0, 1.0], [22700.0, 1.0], [23500.0, 2.0], [24300.0, 2.0], [24700.0, 3.0], [25500.0, 1.0], [25100.0, 2.0], [26300.0, 4.0], [26700.0, 1.0], [27100.0, 1.0], [28300.0, 1.0], [27900.0, 1.0], [29500.0, 2.0], [29100.0, 1.0], [30300.0, 2.0], [30700.0, 4.0], [29900.0, 1.0], [31100.0, 3.0], [31500.0, 1.0], [31900.0, 3.0], [32700.0, 1.0], [33400.0, 4.0], [34200.0, 1.0], [35000.0, 4.0], [35800.0, 3.0], [36600.0, 1.0], [37400.0, 2.0], [38200.0, 6.0], [39000.0, 5.0], [40600.0, 4.0], [39800.0, 4.0], [42200.0, 2.0], [43000.0, 3.0], [43800.0, 2.0], [44600.0, 4.0], [47000.0, 4.0], [46200.0, 2.0], [48600.0, 3.0], [47800.0, 3.0], [49400.0, 5.0], [50200.0, 9.0], [51000.0, 6.0], [51800.0, 2.0], [52600.0, 4.0], [53400.0, 1.0], [54200.0, 6.0], [55000.0, 3.0], [55800.0, 1.0], [56600.0, 1.0], [58200.0, 5.0], [59000.0, 3.0], [57400.0, 3.0], [61400.0, 5.0], [60600.0, 3.0], [62200.0, 4.0], [63000.0, 4.0], [63800.0, 1.0], [64600.0, 1.0], [65400.0, 1.0], [68400.0, 3.0], [66800.0, 2.0], [73200.0, 1.0], [71600.0, 1.0], [70000.0, 1.0], [79600.0, 1.0], [82800.0, 3.0], [86000.0, 1.0], [89200.0, 1.0], [92400.0, 2.0], [98800.0, 2.0], [113200.0, 1.0]], "isOverall": false, "label": "HTTP\u8BF7\u6C42", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 120000.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 11.0, "minX": 2.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 1592.0, "series": [{"data": [], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 1592.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [[3.0, 11.0]], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 3.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 68.8970588235294, "minX": 1.63609182E12, "maxY": 150.0, "series": [{"data": [[1.63609212E12, 130.0], [1.6360923E12, 142.72435897435898], [1.63609182E12, 85.74193548387096], [1.63609224E12, 140.0], [1.63609242E12, 148.8269230769231], [1.63609194E12, 112.58333333333333], [1.63609236E12, 150.0], [1.63609188E12, 102.64137931034479], [1.63609206E12, 122.81451612903223], [1.63609248E12, 68.8970588235294], [1.636092E12, 120.0], [1.63609218E12, 132.8396946564885]], "isOverall": false, "label": "jp@gc - Ultimate Thread Group", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.63609248E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 17030.333333333336, "minX": 2.0, "maxY": 120012.0, "series": [{"data": [[2.0, 63480.0], [3.0, 63779.0], [4.0, 51011.0], [5.0, 62031.0], [6.0, 68797.0], [7.0, 80280.0], [8.0, 62913.0], [9.0, 80303.0], [10.0, 49581.0], [11.0, 54292.0], [12.0, 55154.0], [13.0, 78458.0], [14.0, 78871.0], [15.0, 76951.0], [16.0, 54519.0], [17.0, 78184.0], [18.0, 52020.0], [19.0, 55408.0], [20.0, 54598.0], [21.0, 52887.0], [22.0, 53153.0], [23.0, 51746.0], [24.0, 54426.0], [25.0, 76715.0], [26.0, 53288.0], [27.0, 63412.0], [28.0, 75742.0], [29.0, 62914.0], [30.0, 95599.0], [31.0, 77066.0], [33.0, 65529.0], [32.0, 63026.0], [35.0, 43568.0], [34.0, 76239.0], [37.0, 72589.0], [36.0, 41375.0], [39.0, 61304.0], [38.0, 43234.0], [41.0, 32440.5], [40.0, 62265.0], [42.0, 26631.5], [43.0, 59483.0], [45.0, 37218.5], [44.0, 62342.0], [47.0, 74730.0], [46.0, 55128.0], [49.0, 65755.0], [48.0, 74666.0], [51.0, 58253.5], [50.0, 74461.0], [53.0, 109811.0], [52.0, 73802.0], [55.0, 88593.5], [54.0, 111950.0], [56.0, 20645.5], [57.0, 81744.0], [59.0, 53702.0], [58.0, 110352.0], [60.0, 42066.0], [61.0, 30831.0], [63.0, 88517.0], [62.0, 88618.0], [65.0, 55786.0], [67.0, 93690.0], [66.0, 64811.0], [64.0, 78596.0], [70.0, 26592.5], [71.0, 46873.0], [69.0, 51027.0], [68.0, 45065.0], [75.0, 47538.0], [74.0, 50935.0], [73.0, 50180.0], [72.0, 52328.0], [79.0, 49896.0], [78.0, 50991.0], [77.0, 50439.0], [76.0, 49630.0], [83.0, 17030.333333333336], [82.0, 36182.0], [81.0, 36224.0], [80.0, 50648.0], [85.0, 35507.5], [87.0, 34682.0], [86.0, 56011.0], [84.0, 57498.0], [91.0, 31571.0], [90.0, 35114.0], [89.0, 34585.0], [88.0, 54133.0], [93.0, 36182.5], [95.0, 60320.0], [94.0, 32932.0], [92.0, 99621.0], [97.0, 56423.5], [99.0, 98870.0], [98.0, 61254.0], [96.0, 61143.0], [100.0, 27667.000000000004], [103.0, 75716.0], [102.0, 69691.0], [101.0, 99270.0], [106.0, 35079.5], [107.0, 31406.5], [105.0, 29045.0], [104.0, 50926.0], [110.0, 41734.02097902096], [111.0, 36503.5], [109.0, 29394.0], [108.0, 28952.0], [114.0, 32167.0], [115.0, 53639.0], [113.0, 23484.0], [112.0, 29188.0], [117.0, 40178.5], [119.0, 87777.0], [118.0, 88790.0], [116.0, 58592.0], [120.0, 47747.81617647063], [122.0, 69414.0], [123.0, 53340.0], [121.0, 38366.0], [127.0, 58845.0], [126.0, 62706.0], [125.0, 63364.0], [124.0, 63110.0], [130.0, 60924.33333333335], [135.0, 65462.5], [134.0, 50212.0], [133.0, 37232.0], [132.0, 71592.0], [131.0, 50297.0], [129.0, 61410.0], [128.0, 120012.0], [137.0, 58965.333333333336], [140.0, 55594.016556291375], [141.0, 55653.5], [143.0, 36571.0], [142.0, 66736.0], [139.0, 31617.0], [138.0, 39085.5], [136.0, 39985.0], [145.0, 65557.66666666667], [149.0, 58918.625], [150.0, 55431.270440251574], [148.0, 36068.0], [147.0, 47645.8], [146.0, 51529.4], [144.0, 76038.0]], "isOverall": false, "label": "HTTP\u8BF7\u6C42", "isController": false}, {"data": [[124.65127885215227, 51647.145976294436]], "isOverall": false, "label": "HTTP\u8BF7\u6C42-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 150.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 123.48333333333333, "minX": 1.63609182E12, "maxY": 75965.33333333333, "series": [{"data": [[1.63609212E12, 56517.23333333333], [1.6360923E12, 75958.81666666667], [1.63609182E12, 15124.766666666666], [1.63609224E12, 74650.35], [1.63609242E12, 75754.25], [1.63609194E12, 70168.91666666667], [1.63609236E12, 75965.33333333333], [1.63609188E12, 70603.81666666667], [1.63609206E12, 60463.36666666667], [1.63609248E12, 65344.7], [1.636092E12, 71740.16666666667], [1.63609218E12, 63275.1]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.63609212E12, 493.93333333333334], [1.6360923E12, 621.4], [1.63609182E12, 123.48333333333333], [1.63609224E12, 609.45], [1.63609242E12, 621.4], [1.63609194E12, 573.6], [1.63609236E12, 621.4], [1.63609188E12, 577.5833333333334], [1.63609206E12, 493.93333333333334], [1.63609248E12, 541.7333333333333], [1.636092E12, 585.55], [1.63609218E12, 521.8166666666667]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.63609248E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 8937.41935483871, "minX": 1.63609182E12, "maxY": 61781.52205882355, "series": [{"data": [[1.63609212E12, 61211.52419354838], [1.6360923E12, 53276.423076923056], [1.63609182E12, 8937.41935483871], [1.63609224E12, 57539.712418300674], [1.63609242E12, 55784.30769230767], [1.63609194E12, 42988.590277777796], [1.63609236E12, 55868.33333333332], [1.63609188E12, 32694.37931034483], [1.63609206E12, 48782.56451612903], [1.63609248E12, 61781.52205882355], [1.636092E12, 48270.047619047604], [1.63609218E12, 60400.85496183207]], "isOverall": false, "label": "HTTP\u8BF7\u6C42", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.63609248E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 8925.290322580644, "minX": 1.63609182E12, "maxY": 61767.07352941176, "series": [{"data": [[1.63609212E12, 61198.53225806452], [1.6360923E12, 53264.44871794872], [1.63609182E12, 8925.290322580644], [1.63609224E12, 57526.90196078433], [1.63609242E12, 55771.14102564104], [1.63609194E12, 42976.11111111109], [1.63609236E12, 55856.54487179486], [1.63609188E12, 32681.675862068954], [1.63609206E12, 48769.733870967706], [1.63609248E12, 61767.07352941176], [1.636092E12, 48255.374149659874], [1.63609218E12, 60389.06106870226]], "isOverall": false, "label": "HTTP\u8BF7\u6C42", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.63609248E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 6.496551724137933, "minX": 1.63609182E12, "maxY": 9.70967741935484, "series": [{"data": [[1.63609212E12, 7.096774193548387], [1.6360923E12, 7.173076923076922], [1.63609182E12, 9.70967741935484], [1.63609224E12, 7.026143790849675], [1.63609242E12, 6.634615384615384], [1.63609194E12, 8.402777777777779], [1.63609236E12, 6.7243589743589745], [1.63609188E12, 6.496551724137933], [1.63609206E12, 7.145161290322581], [1.63609248E12, 6.713235294117649], [1.636092E12, 7.1156462585034], [1.63609218E12, 6.98473282442748]], "isOverall": false, "label": "HTTP\u8BF7\u6C42", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.63609248E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 3853.0, "minX": 1.63609182E12, "maxY": 119095.0, "series": [{"data": [[1.63609212E12, 119095.0], [1.6360923E12, 116722.0], [1.63609182E12, 13613.0], [1.63609224E12, 113048.0], [1.63609242E12, 101900.0], [1.63609194E12, 71493.0], [1.63609236E12, 99080.0], [1.63609188E12, 55787.0], [1.63609206E12, 91444.0], [1.63609248E12, 111950.0], [1.636092E12, 79296.0], [1.63609218E12, 111523.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.63609212E12, 26892.0], [1.6360923E12, 22844.0], [1.63609182E12, 3853.0], [1.63609224E12, 20059.0], [1.63609242E12, 17905.0], [1.63609194E12, 20378.0], [1.63609236E12, 21218.0], [1.63609188E12, 14006.0], [1.63609206E12, 25262.0], [1.63609248E12, 23484.0], [1.636092E12, 18870.0], [1.63609218E12, 22617.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.63609212E12, 79452.4], [1.6360923E12, 79051.90000000001], [1.63609182E12, 12800.4], [1.63609224E12, 87402.4], [1.63609242E12, 79233.6], [1.63609194E12, 58076.5], [1.63609236E12, 88829.90000000001], [1.63609188E12, 44215.0], [1.63609206E12, 67673.5], [1.63609248E12, 88704.0], [1.636092E12, 63552.4], [1.63609218E12, 83802.4]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.63609212E12, 118293.79], [1.6360923E12, 114738.97000000003], [1.63609182E12, 13613.0], [1.63609224E12, 105375.14000000012], [1.63609242E12, 99122.96000000004], [1.63609194E12, 70116.00000000003], [1.63609236E12, 96981.83000000003], [1.63609188E12, 55086.87999999999], [1.63609206E12, 87562.75], [1.63609248E12, 111894.35], [1.636092E12, 78555.36000000002], [1.63609218E12, 111314.99]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.63609212E12, 105156.7], [1.6360923E12, 84209.60000000002], [1.63609182E12, 13589.6], [1.63609224E12, 92172.7], [1.63609242E12, 83558.7], [1.63609194E12, 61323.25], [1.63609236E12, 91613.85], [1.63609188E12, 49474.4], [1.63609206E12, 73133.75], [1.63609248E12, 105017.75], [1.636092E12, 72337.0], [1.63609218E12, 92315.24999999999]], "isOverall": false, "label": "95th percentile", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.63609248E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 45580.0, "minX": 1.0, "maxY": 120018.0, "series": [{"data": [[2.0, 49435.0], [4.0, 45580.0], [1.0, 50218.0], [5.0, 58055.0], [3.0, 48982.5]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[4.0, 120010.0], [2.0, 120010.0], [5.0, 120018.0], [3.0, 120015.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 5.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 45569.0, "minX": 1.0, "maxY": 120018.0, "series": [{"data": [[2.0, 49422.0], [4.0, 45569.0], [1.0, 50207.0], [5.0, 58045.0], [3.0, 48970.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[4.0, 120010.0], [2.0, 120010.0], [5.0, 120018.0], [3.0, 120014.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 5.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 2.066666666666667, "minX": 1.63609182E12, "maxY": 2.7666666666666666, "series": [{"data": [[1.63609212E12, 2.066666666666667], [1.6360923E12, 2.7666666666666666], [1.63609182E12, 2.183333333333333], [1.63609224E12, 2.55], [1.63609242E12, 2.3666666666666667], [1.63609194E12, 2.566666666666667], [1.63609236E12, 2.6], [1.63609188E12, 2.5833333333333335], [1.63609206E12, 2.2333333333333334], [1.636092E12, 2.45], [1.63609218E12, 2.35]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.63609242E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 0.016666666666666666, "minX": 1.63609182E12, "maxY": 2.6, "series": [{"data": [[1.63609212E12, 1.9333333333333333], [1.6360923E12, 2.6], [1.63609182E12, 0.5166666666666667], [1.63609224E12, 2.55], [1.63609242E12, 2.6], [1.63609194E12, 2.4], [1.63609236E12, 2.6], [1.63609188E12, 2.4166666666666665], [1.63609206E12, 2.066666666666667], [1.63609248E12, 2.2333333333333334], [1.636092E12, 2.45], [1.63609218E12, 2.1666666666666665]], "isOverall": false, "label": "200", "isController": false}, {"data": [[1.63609212E12, 0.13333333333333333], [1.63609248E12, 0.03333333333333333], [1.63609218E12, 0.016666666666666666]], "isOverall": false, "label": "404", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.63609248E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.016666666666666666, "minX": 1.63609182E12, "maxY": 2.6, "series": [{"data": [[1.63609212E12, 0.13333333333333333], [1.63609248E12, 0.03333333333333333], [1.63609218E12, 0.016666666666666666]], "isOverall": false, "label": "HTTP\u8BF7\u6C42-failure", "isController": false}, {"data": [[1.63609212E12, 1.9333333333333333], [1.6360923E12, 2.6], [1.63609182E12, 0.5166666666666667], [1.63609224E12, 2.55], [1.63609242E12, 2.6], [1.63609194E12, 2.4], [1.63609236E12, 2.6], [1.63609188E12, 2.4166666666666665], [1.63609206E12, 2.066666666666667], [1.63609248E12, 2.2333333333333334], [1.636092E12, 2.45], [1.63609218E12, 2.1666666666666665]], "isOverall": false, "label": "HTTP\u8BF7\u6C42-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.63609248E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 0.016666666666666666, "minX": 1.63609182E12, "maxY": 2.6, "series": [{"data": [[1.63609212E12, 1.9333333333333333], [1.6360923E12, 2.6], [1.63609182E12, 0.5166666666666667], [1.63609224E12, 2.55], [1.63609242E12, 2.6], [1.63609194E12, 2.4], [1.63609236E12, 2.6], [1.63609188E12, 2.4166666666666665], [1.63609206E12, 2.066666666666667], [1.63609248E12, 2.2333333333333334], [1.636092E12, 2.45], [1.63609218E12, 2.1666666666666665]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [[1.63609212E12, 0.13333333333333333], [1.63609248E12, 0.03333333333333333], [1.63609218E12, 0.016666666666666666]], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.63609248E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

