/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 7606.0, "minX": 0.0, "maxY": 120062.0, "series": [{"data": [[0.0, 7606.0], [0.1, 7746.0], [0.2, 8320.0], [0.3, 8458.0], [0.4, 8596.0], [0.5, 9484.0], [0.6, 10065.0], [0.7, 10922.0], [0.8, 11281.0], [0.9, 12463.0], [1.0, 12794.0], [1.1, 13548.0], [1.2, 14208.0], [1.3, 14409.0], [1.4, 15434.0], [1.5, 15696.0], [1.6, 15933.0], [1.7, 16375.0], [1.8, 16915.0], [1.9, 17411.0], [2.0, 18022.0], [2.1, 18390.0], [2.2, 18612.0], [2.3, 19108.0], [2.4, 19515.0], [2.5, 19607.0], [2.6, 19923.0], [2.7, 20305.0], [2.8, 20847.0], [2.9, 21248.0], [3.0, 21277.0], [3.1, 21341.0], [3.2, 21517.0], [3.3, 21621.0], [3.4, 21958.0], [3.5, 22057.0], [3.6, 22172.0], [3.7, 22213.0], [3.8, 22281.0], [3.9, 22557.0], [4.0, 22624.0], [4.1, 22704.0], [4.2, 22758.0], [4.3, 22776.0], [4.4, 22882.0], [4.5, 22909.0], [4.6, 23210.0], [4.7, 23301.0], [4.8, 23393.0], [4.9, 23438.0], [5.0, 23508.0], [5.1, 23568.0], [5.2, 23574.0], [5.3, 23650.0], [5.4, 23716.0], [5.5, 23831.0], [5.6, 23884.0], [5.7, 23945.0], [5.8, 24031.0], [5.9, 24098.0], [6.0, 24276.0], [6.1, 24337.0], [6.2, 24453.0], [6.3, 24485.0], [6.4, 24512.0], [6.5, 24566.0], [6.6, 24575.0], [6.7, 24595.0], [6.8, 24824.0], [6.9, 24870.0], [7.0, 24930.0], [7.1, 24964.0], [7.2, 25012.0], [7.3, 25029.0], [7.4, 25033.0], [7.5, 25065.0], [7.6, 25291.0], [7.7, 25403.0], [7.8, 25435.0], [7.9, 25481.0], [8.0, 25496.0], [8.1, 25529.0], [8.2, 25639.0], [8.3, 25819.0], [8.4, 25908.0], [8.5, 26035.0], [8.6, 26122.0], [8.7, 26191.0], [8.8, 26240.0], [8.9, 26243.0], [9.0, 26330.0], [9.1, 26379.0], [9.2, 26396.0], [9.3, 26599.0], [9.4, 26658.0], [9.5, 26711.0], [9.6, 26713.0], [9.7, 26750.0], [9.8, 26862.0], [9.9, 26915.0], [10.0, 26960.0], [10.1, 27007.0], [10.2, 27070.0], [10.3, 27075.0], [10.4, 27131.0], [10.5, 27179.0], [10.6, 27251.0], [10.7, 27274.0], [10.8, 27368.0], [10.9, 27439.0], [11.0, 27479.0], [11.1, 27548.0], [11.2, 27648.0], [11.3, 27669.0], [11.4, 27702.0], [11.5, 27799.0], [11.6, 27860.0], [11.7, 27986.0], [11.8, 28026.0], [11.9, 28044.0], [12.0, 28103.0], [12.1, 28219.0], [12.2, 28351.0], [12.3, 28366.0], [12.4, 28373.0], [12.5, 28418.0], [12.6, 28423.0], [12.7, 28433.0], [12.8, 28496.0], [12.9, 28546.0], [13.0, 28584.0], [13.1, 28635.0], [13.2, 28678.0], [13.3, 28688.0], [13.4, 28695.0], [13.5, 28778.0], [13.6, 28809.0], [13.7, 28905.0], [13.8, 28943.0], [13.9, 28970.0], [14.0, 28976.0], [14.1, 29054.0], [14.2, 29088.0], [14.3, 29107.0], [14.4, 29113.0], [14.5, 29160.0], [14.6, 29173.0], [14.7, 29209.0], [14.8, 29232.0], [14.9, 29319.0], [15.0, 29427.0], [15.1, 29550.0], [15.2, 29628.0], [15.3, 29685.0], [15.4, 29733.0], [15.5, 29749.0], [15.6, 29838.0], [15.7, 29878.0], [15.8, 30028.0], [15.9, 30045.0], [16.0, 30061.0], [16.1, 30248.0], [16.2, 30280.0], [16.3, 30389.0], [16.4, 30448.0], [16.5, 30500.0], [16.6, 30553.0], [16.7, 30656.0], [16.8, 30694.0], [16.9, 30781.0], [17.0, 30812.0], [17.1, 30843.0], [17.2, 30850.0], [17.3, 30863.0], [17.4, 30874.0], [17.5, 31003.0], [17.6, 31079.0], [17.7, 31101.0], [17.8, 31183.0], [17.9, 31236.0], [18.0, 31286.0], [18.1, 31401.0], [18.2, 31430.0], [18.3, 31549.0], [18.4, 31570.0], [18.5, 31649.0], [18.6, 31711.0], [18.7, 31721.0], [18.8, 31781.0], [18.9, 31792.0], [19.0, 31841.0], [19.1, 31865.0], [19.2, 31870.0], [19.3, 31886.0], [19.4, 31957.0], [19.5, 32000.0], [19.6, 32039.0], [19.7, 32061.0], [19.8, 32141.0], [19.9, 32144.0], [20.0, 32232.0], [20.1, 32265.0], [20.2, 32311.0], [20.3, 32315.0], [20.4, 32399.0], [20.5, 32444.0], [20.6, 32459.0], [20.7, 32467.0], [20.8, 32479.0], [20.9, 32700.0], [21.0, 32753.0], [21.1, 32767.0], [21.2, 32796.0], [21.3, 32858.0], [21.4, 32911.0], [21.5, 32957.0], [21.6, 32987.0], [21.7, 33004.0], [21.8, 33042.0], [21.9, 33110.0], [22.0, 33190.0], [22.1, 33251.0], [22.2, 33294.0], [22.3, 33379.0], [22.4, 33453.0], [22.5, 33512.0], [22.6, 33635.0], [22.7, 33662.0], [22.8, 33691.0], [22.9, 33763.0], [23.0, 33888.0], [23.1, 33911.0], [23.2, 33970.0], [23.3, 34094.0], [23.4, 34195.0], [23.5, 34270.0], [23.6, 34278.0], [23.7, 34288.0], [23.8, 34305.0], [23.9, 34386.0], [24.0, 34485.0], [24.1, 34521.0], [24.2, 34578.0], [24.3, 34634.0], [24.4, 34666.0], [24.5, 34684.0], [24.6, 34759.0], [24.7, 34822.0], [24.8, 34841.0], [24.9, 34919.0], [25.0, 35044.0], [25.1, 35056.0], [25.2, 35077.0], [25.3, 35146.0], [25.4, 35163.0], [25.5, 35176.0], [25.6, 35215.0], [25.7, 35236.0], [25.8, 35247.0], [25.9, 35257.0], [26.0, 35339.0], [26.1, 35379.0], [26.2, 35422.0], [26.3, 35438.0], [26.4, 35466.0], [26.5, 35488.0], [26.6, 35559.0], [26.7, 35583.0], [26.8, 35601.0], [26.9, 35735.0], [27.0, 35829.0], [27.1, 35942.0], [27.2, 35954.0], [27.3, 35961.0], [27.4, 36028.0], [27.5, 36063.0], [27.6, 36090.0], [27.7, 36119.0], [27.8, 36154.0], [27.9, 36166.0], [28.0, 36197.0], [28.1, 36245.0], [28.2, 36297.0], [28.3, 36339.0], [28.4, 36417.0], [28.5, 36435.0], [28.6, 36581.0], [28.7, 36612.0], [28.8, 36660.0], [28.9, 36712.0], [29.0, 36785.0], [29.1, 36834.0], [29.2, 36844.0], [29.3, 36863.0], [29.4, 36880.0], [29.5, 36889.0], [29.6, 36902.0], [29.7, 36955.0], [29.8, 36995.0], [29.9, 37050.0], [30.0, 37086.0], [30.1, 37121.0], [30.2, 37129.0], [30.3, 37184.0], [30.4, 37212.0], [30.5, 37294.0], [30.6, 37340.0], [30.7, 37366.0], [30.8, 37378.0], [30.9, 37399.0], [31.0, 37529.0], [31.1, 37571.0], [31.2, 37606.0], [31.3, 37671.0], [31.4, 37683.0], [31.5, 37698.0], [31.6, 37753.0], [31.7, 37769.0], [31.8, 37792.0], [31.9, 37839.0], [32.0, 37990.0], [32.1, 38028.0], [32.2, 38160.0], [32.3, 38179.0], [32.4, 38184.0], [32.5, 38213.0], [32.6, 38289.0], [32.7, 38402.0], [32.8, 38455.0], [32.9, 38535.0], [33.0, 38579.0], [33.1, 38621.0], [33.2, 38659.0], [33.3, 38703.0], [33.4, 38728.0], [33.5, 38791.0], [33.6, 38852.0], [33.7, 38948.0], [33.8, 38954.0], [33.9, 38975.0], [34.0, 39016.0], [34.1, 39078.0], [34.2, 39093.0], [34.3, 39105.0], [34.4, 39136.0], [34.5, 39213.0], [34.6, 39244.0], [34.7, 39289.0], [34.8, 39312.0], [34.9, 39322.0], [35.0, 39370.0], [35.1, 39450.0], [35.2, 39533.0], [35.3, 39607.0], [35.4, 39667.0], [35.5, 39703.0], [35.6, 39798.0], [35.7, 39838.0], [35.8, 39850.0], [35.9, 39904.0], [36.0, 39952.0], [36.1, 39962.0], [36.2, 40105.0], [36.3, 40149.0], [36.4, 40185.0], [36.5, 40231.0], [36.6, 40278.0], [36.7, 40341.0], [36.8, 40359.0], [36.9, 40459.0], [37.0, 40759.0], [37.1, 40781.0], [37.2, 40812.0], [37.3, 40897.0], [37.4, 40922.0], [37.5, 40943.0], [37.6, 40946.0], [37.7, 40980.0], [37.8, 41011.0], [37.9, 41072.0], [38.0, 41119.0], [38.1, 41187.0], [38.2, 41225.0], [38.3, 41279.0], [38.4, 41325.0], [38.5, 41414.0], [38.6, 41452.0], [38.7, 41487.0], [38.8, 41520.0], [38.9, 41549.0], [39.0, 41552.0], [39.1, 41572.0], [39.2, 41631.0], [39.3, 41643.0], [39.4, 41726.0], [39.5, 41751.0], [39.6, 41774.0], [39.7, 41906.0], [39.8, 41921.0], [39.9, 41930.0], [40.0, 41969.0], [40.1, 42013.0], [40.2, 42069.0], [40.3, 42094.0], [40.4, 42122.0], [40.5, 42152.0], [40.6, 42327.0], [40.7, 42363.0], [40.8, 42412.0], [40.9, 42416.0], [41.0, 42464.0], [41.1, 42502.0], [41.2, 42505.0], [41.3, 42528.0], [41.4, 42571.0], [41.5, 42574.0], [41.6, 42706.0], [41.7, 42748.0], [41.8, 42776.0], [41.9, 42784.0], [42.0, 42826.0], [42.1, 42840.0], [42.2, 42881.0], [42.3, 42939.0], [42.4, 42968.0], [42.5, 42995.0], [42.6, 43036.0], [42.7, 43048.0], [42.8, 43111.0], [42.9, 43164.0], [43.0, 43201.0], [43.1, 43261.0], [43.2, 43276.0], [43.3, 43367.0], [43.4, 43407.0], [43.5, 43469.0], [43.6, 43553.0], [43.7, 43622.0], [43.8, 43726.0], [43.9, 43787.0], [44.0, 43836.0], [44.1, 43859.0], [44.2, 43863.0], [44.3, 43887.0], [44.4, 43978.0], [44.5, 44005.0], [44.6, 44086.0], [44.7, 44102.0], [44.8, 44124.0], [44.9, 44158.0], [45.0, 44191.0], [45.1, 44222.0], [45.2, 44237.0], [45.3, 44348.0], [45.4, 44395.0], [45.5, 44424.0], [45.6, 44443.0], [45.7, 44743.0], [45.8, 44833.0], [45.9, 44906.0], [46.0, 45075.0], [46.1, 45157.0], [46.2, 45247.0], [46.3, 45286.0], [46.4, 45291.0], [46.5, 45333.0], [46.6, 45390.0], [46.7, 45440.0], [46.8, 45461.0], [46.9, 45554.0], [47.0, 45574.0], [47.1, 45578.0], [47.2, 45680.0], [47.3, 45709.0], [47.4, 45735.0], [47.5, 45811.0], [47.6, 45867.0], [47.7, 45945.0], [47.8, 45954.0], [47.9, 46031.0], [48.0, 46047.0], [48.1, 46149.0], [48.2, 46249.0], [48.3, 46284.0], [48.4, 46299.0], [48.5, 46419.0], [48.6, 46532.0], [48.7, 46672.0], [48.8, 46689.0], [48.9, 46714.0], [49.0, 46743.0], [49.1, 46886.0], [49.2, 46896.0], [49.3, 46944.0], [49.4, 47002.0], [49.5, 47033.0], [49.6, 47057.0], [49.7, 47094.0], [49.8, 47105.0], [49.9, 47160.0], [50.0, 47210.0], [50.1, 47248.0], [50.2, 47324.0], [50.3, 47338.0], [50.4, 47392.0], [50.5, 47436.0], [50.6, 47652.0], [50.7, 47678.0], [50.8, 47696.0], [50.9, 47779.0], [51.0, 47875.0], [51.1, 47962.0], [51.2, 48141.0], [51.3, 48192.0], [51.4, 48262.0], [51.5, 48290.0], [51.6, 48319.0], [51.7, 48354.0], [51.8, 48365.0], [51.9, 48404.0], [52.0, 48438.0], [52.1, 48472.0], [52.2, 48489.0], [52.3, 48506.0], [52.4, 48532.0], [52.5, 48634.0], [52.6, 48709.0], [52.7, 48777.0], [52.8, 48855.0], [52.9, 48907.0], [53.0, 48919.0], [53.1, 49036.0], [53.2, 49071.0], [53.3, 49251.0], [53.4, 49292.0], [53.5, 49365.0], [53.6, 49432.0], [53.7, 49444.0], [53.8, 49548.0], [53.9, 49586.0], [54.0, 49610.0], [54.1, 49655.0], [54.2, 49668.0], [54.3, 49698.0], [54.4, 49712.0], [54.5, 49744.0], [54.6, 49778.0], [54.7, 49961.0], [54.8, 49976.0], [54.9, 50032.0], [55.0, 50064.0], [55.1, 50096.0], [55.2, 50109.0], [55.3, 50183.0], [55.4, 50374.0], [55.5, 50392.0], [55.6, 50406.0], [55.7, 50445.0], [55.8, 50478.0], [55.9, 50490.0], [56.0, 50594.0], [56.1, 50629.0], [56.2, 50655.0], [56.3, 50686.0], [56.4, 50734.0], [56.5, 50818.0], [56.6, 50840.0], [56.7, 50861.0], [56.8, 50974.0], [56.9, 51126.0], [57.0, 51304.0], [57.1, 51349.0], [57.2, 51431.0], [57.3, 51524.0], [57.4, 51552.0], [57.5, 51574.0], [57.6, 51634.0], [57.7, 51683.0], [57.8, 51721.0], [57.9, 51754.0], [58.0, 51873.0], [58.1, 51955.0], [58.2, 52025.0], [58.3, 52026.0], [58.4, 52128.0], [58.5, 52272.0], [58.6, 52309.0], [58.7, 52372.0], [58.8, 52440.0], [58.9, 52463.0], [59.0, 52477.0], [59.1, 52513.0], [59.2, 52570.0], [59.3, 52658.0], [59.4, 52695.0], [59.5, 52727.0], [59.6, 52821.0], [59.7, 52897.0], [59.8, 52934.0], [59.9, 52980.0], [60.0, 53039.0], [60.1, 53119.0], [60.2, 53184.0], [60.3, 53220.0], [60.4, 53241.0], [60.5, 53330.0], [60.6, 53420.0], [60.7, 53481.0], [60.8, 53490.0], [60.9, 53514.0], [61.0, 53557.0], [61.1, 53557.0], [61.2, 53601.0], [61.3, 53640.0], [61.4, 53700.0], [61.5, 53734.0], [61.6, 53780.0], [61.7, 53811.0], [61.8, 53864.0], [61.9, 53879.0], [62.0, 53926.0], [62.1, 54001.0], [62.2, 54041.0], [62.3, 54058.0], [62.4, 54188.0], [62.5, 54202.0], [62.6, 54258.0], [62.7, 54333.0], [62.8, 54416.0], [62.9, 54449.0], [63.0, 54494.0], [63.1, 54532.0], [63.2, 54582.0], [63.3, 54608.0], [63.4, 54637.0], [63.5, 54682.0], [63.6, 54701.0], [63.7, 54737.0], [63.8, 54792.0], [63.9, 54887.0], [64.0, 54895.0], [64.1, 54912.0], [64.2, 55061.0], [64.3, 55147.0], [64.4, 55177.0], [64.5, 55197.0], [64.6, 55263.0], [64.7, 55361.0], [64.8, 55364.0], [64.9, 55372.0], [65.0, 55406.0], [65.1, 55473.0], [65.2, 55491.0], [65.3, 55655.0], [65.4, 55676.0], [65.5, 55703.0], [65.6, 55777.0], [65.7, 55912.0], [65.8, 56023.0], [65.9, 56032.0], [66.0, 56185.0], [66.1, 56273.0], [66.2, 56291.0], [66.3, 56388.0], [66.4, 56549.0], [66.5, 56637.0], [66.6, 56665.0], [66.7, 56765.0], [66.8, 56818.0], [66.9, 56834.0], [67.0, 56843.0], [67.1, 56969.0], [67.2, 57044.0], [67.3, 57091.0], [67.4, 57112.0], [67.5, 57120.0], [67.6, 57195.0], [67.7, 57255.0], [67.8, 57368.0], [67.9, 57400.0], [68.0, 57428.0], [68.1, 57462.0], [68.2, 57581.0], [68.3, 57734.0], [68.4, 57746.0], [68.5, 57754.0], [68.6, 57800.0], [68.7, 57862.0], [68.8, 57989.0], [68.9, 58039.0], [69.0, 58107.0], [69.1, 58257.0], [69.2, 58375.0], [69.3, 58414.0], [69.4, 58423.0], [69.5, 58438.0], [69.6, 58588.0], [69.7, 58647.0], [69.8, 58706.0], [69.9, 58764.0], [70.0, 58918.0], [70.1, 58984.0], [70.2, 59004.0], [70.3, 59014.0], [70.4, 59198.0], [70.5, 59252.0], [70.6, 59311.0], [70.7, 59502.0], [70.8, 59685.0], [70.9, 59714.0], [71.0, 59920.0], [71.1, 59966.0], [71.2, 60008.0], [71.3, 60070.0], [71.4, 60283.0], [71.5, 60302.0], [71.6, 60380.0], [71.7, 60390.0], [71.8, 60454.0], [71.9, 60515.0], [72.0, 60556.0], [72.1, 60572.0], [72.2, 60714.0], [72.3, 60756.0], [72.4, 60840.0], [72.5, 60977.0], [72.6, 61040.0], [72.7, 61075.0], [72.8, 61078.0], [72.9, 61132.0], [73.0, 61214.0], [73.1, 61392.0], [73.2, 61473.0], [73.3, 61569.0], [73.4, 61701.0], [73.5, 61887.0], [73.6, 61916.0], [73.7, 61973.0], [73.8, 62002.0], [73.9, 62030.0], [74.0, 62061.0], [74.1, 62135.0], [74.2, 62492.0], [74.3, 62580.0], [74.4, 62634.0], [74.5, 62714.0], [74.6, 62848.0], [74.7, 62900.0], [74.8, 62950.0], [74.9, 63033.0], [75.0, 63048.0], [75.1, 63103.0], [75.2, 63139.0], [75.3, 63265.0], [75.4, 63307.0], [75.5, 63354.0], [75.6, 63393.0], [75.7, 63539.0], [75.8, 63667.0], [75.9, 63790.0], [76.0, 63814.0], [76.1, 63867.0], [76.2, 63966.0], [76.3, 64113.0], [76.4, 64200.0], [76.5, 64200.0], [76.6, 64224.0], [76.7, 64284.0], [76.8, 64321.0], [76.9, 64378.0], [77.0, 64402.0], [77.1, 64521.0], [77.2, 64627.0], [77.3, 64628.0], [77.4, 64640.0], [77.5, 64748.0], [77.6, 64833.0], [77.7, 64855.0], [77.8, 64906.0], [77.9, 64913.0], [78.0, 64938.0], [78.1, 65060.0], [78.2, 65091.0], [78.3, 65142.0], [78.4, 65166.0], [78.5, 65257.0], [78.6, 65347.0], [78.7, 65373.0], [78.8, 65396.0], [78.9, 65513.0], [79.0, 65551.0], [79.1, 65609.0], [79.2, 65628.0], [79.3, 65668.0], [79.4, 65680.0], [79.5, 65718.0], [79.6, 65764.0], [79.7, 65844.0], [79.8, 66053.0], [79.9, 66129.0], [80.0, 66194.0], [80.1, 66236.0], [80.2, 66279.0], [80.3, 66310.0], [80.4, 66361.0], [80.5, 66427.0], [80.6, 66549.0], [80.7, 66564.0], [80.8, 66762.0], [80.9, 66846.0], [81.0, 66943.0], [81.1, 67054.0], [81.2, 67082.0], [81.3, 67326.0], [81.4, 67460.0], [81.5, 67551.0], [81.6, 67627.0], [81.7, 67664.0], [81.8, 67915.0], [81.9, 67927.0], [82.0, 67977.0], [82.1, 68043.0], [82.2, 68084.0], [82.3, 68144.0], [82.4, 68160.0], [82.5, 68193.0], [82.6, 68284.0], [82.7, 68363.0], [82.8, 68369.0], [82.9, 68536.0], [83.0, 68590.0], [83.1, 68767.0], [83.2, 68861.0], [83.3, 68920.0], [83.4, 69009.0], [83.5, 69101.0], [83.6, 69123.0], [83.7, 69256.0], [83.8, 69398.0], [83.9, 69441.0], [84.0, 69486.0], [84.1, 69708.0], [84.2, 70008.0], [84.3, 70169.0], [84.4, 70212.0], [84.5, 70247.0], [84.6, 70329.0], [84.7, 70458.0], [84.8, 70617.0], [84.9, 70967.0], [85.0, 71290.0], [85.1, 71437.0], [85.2, 71575.0], [85.3, 71591.0], [85.4, 71764.0], [85.5, 71791.0], [85.6, 72088.0], [85.7, 72340.0], [85.8, 72454.0], [85.9, 72492.0], [86.0, 72546.0], [86.1, 72575.0], [86.2, 72702.0], [86.3, 72972.0], [86.4, 73127.0], [86.5, 73302.0], [86.6, 73342.0], [86.7, 73442.0], [86.8, 73515.0], [86.9, 73765.0], [87.0, 73878.0], [87.1, 74030.0], [87.2, 74305.0], [87.3, 74369.0], [87.4, 74730.0], [87.5, 74767.0], [87.6, 75003.0], [87.7, 75068.0], [87.8, 75337.0], [87.9, 75381.0], [88.0, 75394.0], [88.1, 75709.0], [88.2, 75773.0], [88.3, 75852.0], [88.4, 76055.0], [88.5, 76090.0], [88.6, 76319.0], [88.7, 76365.0], [88.8, 76444.0], [88.9, 76575.0], [89.0, 76584.0], [89.1, 76620.0], [89.2, 76872.0], [89.3, 76939.0], [89.4, 77482.0], [89.5, 77603.0], [89.6, 77755.0], [89.7, 78003.0], [89.8, 78025.0], [89.9, 78203.0], [90.0, 78266.0], [90.1, 78882.0], [90.2, 79032.0], [90.3, 79305.0], [90.4, 79643.0], [90.5, 79661.0], [90.6, 80075.0], [90.7, 80142.0], [90.8, 80192.0], [90.9, 80358.0], [91.0, 80475.0], [91.1, 81120.0], [91.2, 81216.0], [91.3, 81356.0], [91.4, 81437.0], [91.5, 81576.0], [91.6, 81624.0], [91.7, 81767.0], [91.8, 81953.0], [91.9, 82189.0], [92.0, 82261.0], [92.1, 82308.0], [92.2, 82446.0], [92.3, 82601.0], [92.4, 82814.0], [92.5, 83019.0], [92.6, 83253.0], [92.7, 83296.0], [92.8, 83663.0], [92.9, 83710.0], [93.0, 83787.0], [93.1, 84107.0], [93.2, 84192.0], [93.3, 84468.0], [93.4, 84471.0], [93.5, 84738.0], [93.6, 84758.0], [93.7, 84969.0], [93.8, 85363.0], [93.9, 85822.0], [94.0, 85943.0], [94.1, 86316.0], [94.2, 86494.0], [94.3, 87126.0], [94.4, 87957.0], [94.5, 88321.0], [94.6, 88511.0], [94.7, 89299.0], [94.8, 89323.0], [94.9, 89937.0], [95.0, 90545.0], [95.1, 90768.0], [95.2, 91488.0], [95.3, 91539.0], [95.4, 92086.0], [95.5, 92149.0], [95.6, 92240.0], [95.7, 92724.0], [95.8, 93074.0], [95.9, 93270.0], [96.0, 93676.0], [96.1, 93841.0], [96.2, 94021.0], [96.3, 94088.0], [96.4, 94214.0], [96.5, 94441.0], [96.6, 95385.0], [96.7, 96043.0], [96.8, 96203.0], [96.9, 96942.0], [97.0, 97871.0], [97.1, 98145.0], [97.2, 98263.0], [97.3, 99018.0], [97.4, 99323.0], [97.5, 100335.0], [97.6, 100603.0], [97.7, 101325.0], [97.8, 101767.0], [97.9, 102225.0], [98.0, 105722.0], [98.1, 107232.0], [98.2, 108156.0], [98.3, 109369.0], [98.4, 109385.0], [98.5, 110857.0], [98.6, 111302.0], [98.7, 112392.0], [98.8, 117162.0], [98.9, 120010.0], [99.0, 120011.0], [99.1, 120011.0], [99.2, 120013.0], [99.3, 120013.0], [99.4, 120014.0], [99.5, 120016.0], [99.6, 120016.0], [99.7, 120018.0], [99.8, 120029.0], [99.9, 120031.0], [100.0, 120062.0]], "isOverall": false, "label": "HTTP\u8BF7\u6C42", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 7600.0, "maxY": 21.0, "series": [{"data": [[68300.0, 4.0], [66700.0, 1.0], [71500.0, 3.0], [73100.0, 1.0], [76300.0, 5.0], [74700.0, 2.0], [81100.0, 1.0], [79500.0, 1.0], [77900.0, 1.0], [82700.0, 1.0], [85900.0, 1.0], [90700.0, 1.0], [92300.0, 1.0], [100300.0, 1.0], [32900.0, 6.0], [34500.0, 4.0], [33700.0, 2.0], [35300.0, 3.0], [36100.0, 7.0], [37700.0, 5.0], [36900.0, 5.0], [38500.0, 3.0], [40100.0, 5.0], [40900.0, 8.0], [39300.0, 5.0], [42500.0, 9.0], [41700.0, 5.0], [44900.0, 1.0], [43300.0, 1.0], [44100.0, 6.0], [45700.0, 3.0], [46500.0, 1.0], [48100.0, 3.0], [48900.0, 3.0], [47300.0, 6.0], [49700.0, 5.0], [50500.0, 2.0], [52100.0, 2.0], [51300.0, 4.0], [52900.0, 4.0], [53700.0, 6.0], [54500.0, 4.0], [55300.0, 6.0], [56100.0, 2.0], [56900.0, 1.0], [57700.0, 5.0], [58500.0, 2.0], [59300.0, 2.0], [60900.0, 2.0], [63300.0, 5.0], [61700.0, 1.0], [62500.0, 1.0], [64100.0, 2.0], [64900.0, 5.0], [69000.0, 2.0], [67400.0, 2.0], [65800.0, 3.0], [72200.0, 1.0], [70600.0, 2.0], [73800.0, 2.0], [75400.0, 1.0], [81800.0, 1.0], [83400.0, 1.0], [93000.0, 1.0], [91400.0, 1.0], [96200.0, 1.0], [97800.0, 1.0], [101000.0, 1.0], [104200.0, 1.0], [109000.0, 1.0], [68100.0, 5.0], [66500.0, 3.0], [69700.0, 1.0], [72900.0, 1.0], [77700.0, 1.0], [79300.0, 1.0], [84100.0, 4.0], [90500.0, 1.0], [92100.0, 1.0], [95300.0, 2.0], [96900.0, 2.0], [101700.0, 1.0], [108100.0, 1.0], [111300.0, 1.0], [7600.0, 1.0], [7700.0, 1.0], [8100.0, 1.0], [8400.0, 2.0], [9000.0, 1.0], [9400.0, 1.0], [9600.0, 1.0], [10000.0, 1.0], [11200.0, 1.0], [11600.0, 1.0], [12400.0, 1.0], [14200.0, 2.0], [14400.0, 1.0], [14800.0, 1.0], [15600.0, 1.0], [15400.0, 1.0], [17600.0, 1.0], [18000.0, 1.0], [20000.0, 1.0], [19600.0, 1.0], [20800.0, 2.0], [21200.0, 2.0], [21600.0, 1.0], [22000.0, 2.0], [23200.0, 2.0], [22800.0, 2.0], [24400.0, 4.0], [24000.0, 3.0], [23600.0, 3.0], [24800.0, 3.0], [25200.0, 1.0], [25600.0, 2.0], [26000.0, 1.0], [26400.0, 1.0], [27600.0, 5.0], [27200.0, 3.0], [26800.0, 3.0], [28000.0, 4.0], [28400.0, 7.0], [29200.0, 3.0], [29600.0, 4.0], [28800.0, 3.0], [30000.0, 5.0], [30400.0, 3.0], [31200.0, 3.0], [30800.0, 9.0], [31600.0, 2.0], [32000.0, 6.0], [32400.0, 8.0], [33600.0, 4.0], [34400.0, 2.0], [32800.0, 2.0], [36800.0, 10.0], [35200.0, 7.0], [36000.0, 5.0], [38400.0, 4.0], [37600.0, 7.0], [39200.0, 5.0], [40000.0, 1.0], [40800.0, 3.0], [41600.0, 5.0], [42400.0, 7.0], [43200.0, 6.0], [44000.0, 4.0], [44800.0, 2.0], [45600.0, 2.0], [46400.0, 2.0], [48800.0, 3.0], [48000.0, 1.0], [47200.0, 4.0], [49600.0, 7.0], [50400.0, 7.0], [52000.0, 4.0], [52800.0, 3.0], [51200.0, 1.0], [55200.0, 2.0], [54400.0, 5.0], [53600.0, 4.0], [56800.0, 5.0], [56000.0, 4.0], [59200.0, 2.0], [58400.0, 5.0], [57600.0, 1.0], [60800.0, 2.0], [60000.0, 3.0], [63200.0, 2.0], [62400.0, 1.0], [64800.0, 5.0], [65600.0, 7.0], [68800.0, 2.0], [70400.0, 2.0], [73600.0, 1.0], [72000.0, 1.0], [76800.0, 1.0], [75200.0, 1.0], [81600.0, 2.0], [80000.0, 1.0], [78400.0, 1.0], [83200.0, 2.0], [88000.0, 1.0], [86400.0, 1.0], [96000.0, 2.0], [94400.0, 1.0], [107200.0, 1.0], [120000.0, 21.0], [68700.0, 2.0], [67100.0, 1.0], [71900.0, 1.0], [70300.0, 1.0], [73500.0, 1.0], [76700.0, 1.0], [81500.0, 2.0], [84700.0, 3.0], [83100.0, 1.0], [86300.0, 1.0], [87900.0, 1.0], [92700.0, 2.0], [94300.0, 1.0], [99100.0, 1.0], [34700.0, 2.0], [33100.0, 3.0], [33900.0, 4.0], [35500.0, 5.0], [36300.0, 3.0], [38700.0, 5.0], [37900.0, 2.0], [37100.0, 6.0], [39500.0, 2.0], [40300.0, 2.0], [41100.0, 4.0], [41900.0, 7.0], [42700.0, 7.0], [44300.0, 3.0], [43500.0, 1.0], [45900.0, 3.0], [45100.0, 3.0], [46700.0, 3.0], [48300.0, 6.0], [49100.0, 1.0], [47500.0, 1.0], [50700.0, 3.0], [49900.0, 3.0], [51500.0, 5.0], [53100.0, 3.0], [52300.0, 5.0], [53900.0, 2.0], [54700.0, 5.0], [57100.0, 5.0], [55500.0, 1.0], [56300.0, 2.0], [57900.0, 1.0], [58700.0, 2.0], [60300.0, 6.0], [61100.0, 3.0], [59500.0, 1.0], [62700.0, 1.0], [61900.0, 4.0], [65100.0, 5.0], [64300.0, 4.0], [63500.0, 1.0], [66200.0, 4.0], [69400.0, 3.0], [67800.0, 1.0], [71000.0, 1.0], [72600.0, 1.0], [75800.0, 1.0], [77400.0, 2.0], [79000.0, 1.0], [82200.0, 1.0], [98200.0, 1.0], [68500.0, 4.0], [66900.0, 2.0], [71700.0, 3.0], [73300.0, 4.0], [70100.0, 2.0], [76500.0, 3.0], [81300.0, 2.0], [78100.0, 1.0], [79700.0, 1.0], [82900.0, 1.0], [89300.0, 2.0], [86100.0, 1.0], [98900.0, 1.0], [100500.0, 1.0], [16500.0, 1.0], [16900.0, 1.0], [18100.0, 1.0], [18500.0, 1.0], [20500.0, 1.0], [21300.0, 3.0], [22100.0, 2.0], [22500.0, 2.0], [22900.0, 2.0], [23300.0, 3.0], [23700.0, 2.0], [24500.0, 6.0], [25300.0, 1.0], [24900.0, 5.0], [26100.0, 4.0], [26500.0, 1.0], [26900.0, 4.0], [27300.0, 2.0], [27700.0, 3.0], [28500.0, 5.0], [28100.0, 2.0], [28900.0, 6.0], [29300.0, 1.0], [30500.0, 3.0], [29700.0, 3.0], [30100.0, 1.0], [31700.0, 9.0], [31300.0, 1.0], [30900.0, 1.0], [32100.0, 2.0], [34600.0, 5.0], [33000.0, 4.0], [33800.0, 2.0], [35400.0, 7.0], [36200.0, 4.0], [37800.0, 2.0], [38600.0, 4.0], [37000.0, 4.0], [39400.0, 2.0], [40200.0, 5.0], [41000.0, 3.0], [41800.0, 1.0], [43400.0, 4.0], [44200.0, 5.0], [45000.0, 2.0], [45800.0, 5.0], [46600.0, 5.0], [48200.0, 4.0], [49000.0, 3.0], [47400.0, 1.0], [50600.0, 6.0], [49800.0, 1.0], [53000.0, 3.0], [51400.0, 1.0], [52200.0, 1.0], [54600.0, 6.0], [53800.0, 5.0], [57000.0, 5.0], [55400.0, 5.0], [56200.0, 3.0], [57800.0, 4.0], [58600.0, 3.0], [60200.0, 2.0], [61000.0, 5.0], [61800.0, 2.0], [63400.0, 1.0], [62600.0, 3.0], [64200.0, 7.0], [65000.0, 3.0], [66000.0, 2.0], [69200.0, 3.0], [67600.0, 2.0], [72400.0, 3.0], [77200.0, 1.0], [74000.0, 1.0], [78800.0, 1.0], [80400.0, 3.0], [83600.0, 1.0], [93200.0, 1.0], [110800.0, 1.0], [69100.0, 3.0], [67500.0, 3.0], [72300.0, 2.0], [73900.0, 1.0], [80300.0, 2.0], [81900.0, 2.0], [88300.0, 2.0], [89900.0, 2.0], [91500.0, 2.0], [93100.0, 1.0], [112300.0, 1.0], [117100.0, 1.0], [33300.0, 2.0], [34100.0, 2.0], [36500.0, 2.0], [34900.0, 2.0], [35700.0, 2.0], [37300.0, 7.0], [38900.0, 6.0], [38100.0, 5.0], [39700.0, 3.0], [40500.0, 1.0], [42900.0, 5.0], [41300.0, 2.0], [42100.0, 4.0], [43700.0, 5.0], [45300.0, 3.0], [46900.0, 2.0], [46100.0, 1.0], [47700.0, 2.0], [48500.0, 4.0], [50100.0, 3.0], [49300.0, 2.0], [50900.0, 2.0], [51700.0, 4.0], [52500.0, 4.0], [53300.0, 3.0], [54900.0, 3.0], [54100.0, 2.0], [57300.0, 2.0], [55700.0, 3.0], [56500.0, 1.0], [58900.0, 4.0], [58100.0, 2.0], [61300.0, 2.0], [60500.0, 5.0], [59700.0, 3.0], [62900.0, 3.0], [62100.0, 1.0], [63700.0, 3.0], [64500.0, 2.0], [65300.0, 4.0], [68200.0, 2.0], [66600.0, 1.0], [73000.0, 1.0], [71400.0, 2.0], [69800.0, 1.0], [82600.0, 1.0], [85800.0, 2.0], [84200.0, 1.0], [87400.0, 1.0], [92200.0, 1.0], [93800.0, 3.0], [90600.0, 1.0], [95400.0, 1.0], [109800.0, 1.0], [67300.0, 1.0], [65700.0, 3.0], [68900.0, 2.0], [73700.0, 1.0], [75300.0, 5.0], [76900.0, 2.0], [80100.0, 4.0], [81700.0, 1.0], [84900.0, 3.0], [86500.0, 1.0], [99300.0, 1.0], [105700.0, 1.0], [8300.0, 2.0], [8500.0, 1.0], [10500.0, 1.0], [10900.0, 1.0], [12500.0, 1.0], [12700.0, 1.0], [13300.0, 1.0], [13500.0, 1.0], [13900.0, 1.0], [15900.0, 2.0], [16100.0, 1.0], [16300.0, 1.0], [17400.0, 1.0], [18600.0, 1.0], [19800.0, 1.0], [22200.0, 4.0], [21800.0, 1.0], [22600.0, 2.0], [23400.0, 3.0], [23800.0, 3.0], [24200.0, 3.0], [25000.0, 7.0], [25400.0, 7.0], [24600.0, 1.0], [26600.0, 2.0], [26200.0, 3.0], [25800.0, 2.0], [27000.0, 5.0], [27400.0, 4.0], [28600.0, 6.0], [27800.0, 3.0], [28200.0, 2.0], [29400.0, 3.0], [29000.0, 5.0], [29800.0, 4.0], [30600.0, 4.0], [30200.0, 2.0], [31000.0, 3.0], [31400.0, 3.0], [31800.0, 6.0], [32200.0, 5.0], [33200.0, 3.0], [34800.0, 5.0], [34000.0, 2.0], [36400.0, 3.0], [35600.0, 2.0], [38000.0, 3.0], [38800.0, 2.0], [37200.0, 3.0], [39600.0, 4.0], [40400.0, 2.0], [42000.0, 5.0], [42800.0, 6.0], [41200.0, 4.0], [43600.0, 2.0], [44400.0, 4.0], [45200.0, 5.0], [46800.0, 4.0], [46000.0, 4.0], [47600.0, 4.0], [48400.0, 7.0], [49200.0, 3.0], [50000.0, 6.0], [50800.0, 4.0], [51600.0, 4.0], [52400.0, 5.0], [53200.0, 3.0], [54800.0, 3.0], [54000.0, 5.0], [55600.0, 3.0], [57200.0, 2.0], [56400.0, 1.0], [58800.0, 1.0], [58000.0, 3.0], [59600.0, 2.0], [60400.0, 2.0], [61200.0, 1.0], [62800.0, 3.0], [62000.0, 6.0], [64400.0, 2.0], [65200.0, 2.0], [63600.0, 1.0], [68000.0, 4.0], [66400.0, 3.0], [71200.0, 1.0], [77600.0, 2.0], [76000.0, 3.0], [74400.0, 1.0], [79200.0, 1.0], [82400.0, 2.0], [88800.0, 1.0], [93600.0, 1.0], [92000.0, 3.0], [100000.0, 1.0], [106400.0, 1.0], [69500.0, 1.0], [67900.0, 5.0], [66300.0, 3.0], [72700.0, 2.0], [74300.0, 3.0], [75900.0, 1.0], [82300.0, 3.0], [87100.0, 1.0], [96700.0, 1.0], [107900.0, 1.0], [34300.0, 3.0], [33500.0, 2.0], [35900.0, 5.0], [35100.0, 7.0], [36700.0, 3.0], [38300.0, 1.0], [37500.0, 4.0], [39900.0, 4.0], [40700.0, 4.0], [39100.0, 5.0], [41500.0, 7.0], [42300.0, 3.0], [43100.0, 4.0], [43900.0, 3.0], [44700.0, 2.0], [45500.0, 6.0], [47100.0, 3.0], [48700.0, 3.0], [47900.0, 2.0], [50300.0, 3.0], [49500.0, 4.0], [51100.0, 1.0], [52700.0, 2.0], [51900.0, 2.0], [54300.0, 2.0], [55100.0, 5.0], [53500.0, 5.0], [56700.0, 3.0], [55900.0, 1.0], [57500.0, 2.0], [58300.0, 2.0], [59100.0, 1.0], [60700.0, 3.0], [59900.0, 4.0], [63100.0, 4.0], [61500.0, 3.0], [62300.0, 1.0], [64700.0, 1.0], [65500.0, 4.0], [63900.0, 2.0], [67000.0, 4.0], [70200.0, 3.0], [73400.0, 1.0], [76600.0, 2.0], [75000.0, 3.0], [78200.0, 3.0], [81400.0, 2.0], [83000.0, 1.0], [94200.0, 1.0], [99000.0, 1.0], [102200.0, 1.0], [100600.0, 1.0], [111800.0, 1.0], [66100.0, 3.0], [69300.0, 1.0], [72500.0, 3.0], [70900.0, 2.0], [75700.0, 3.0], [74100.0, 1.0], [78900.0, 1.0], [83700.0, 4.0], [82100.0, 1.0], [85300.0, 2.0], [88500.0, 1.0], [93300.0, 1.0], [98100.0, 2.0], [101300.0, 1.0], [109300.0, 3.0], [112500.0, 1.0], [17100.0, 1.0], [18300.0, 1.0], [19100.0, 2.0], [19500.0, 2.0], [19900.0, 1.0], [20300.0, 1.0], [21500.0, 2.0], [21900.0, 1.0], [22700.0, 5.0], [23500.0, 4.0], [23900.0, 2.0], [24300.0, 2.0], [25500.0, 2.0], [26300.0, 6.0], [25900.0, 2.0], [27100.0, 4.0], [26700.0, 5.0], [27500.0, 1.0], [27900.0, 1.0], [28300.0, 5.0], [29100.0, 8.0], [28700.0, 2.0], [29500.0, 1.0], [30300.0, 2.0], [30700.0, 2.0], [29900.0, 1.0], [31500.0, 3.0], [31100.0, 4.0], [32700.0, 7.0], [32300.0, 5.0], [31900.0, 3.0], [34200.0, 6.0], [33400.0, 3.0], [35800.0, 2.0], [36600.0, 4.0], [35000.0, 4.0], [38200.0, 3.0], [37400.0, 1.0], [39000.0, 5.0], [39800.0, 5.0], [43000.0, 4.0], [41400.0, 5.0], [43800.0, 6.0], [46200.0, 6.0], [45400.0, 4.0], [47000.0, 8.0], [47800.0, 2.0], [48600.0, 2.0], [51000.0, 1.0], [49400.0, 4.0], [50200.0, 1.0], [52600.0, 3.0], [51800.0, 2.0], [53400.0, 6.0], [55000.0, 2.0], [54200.0, 4.0], [56600.0, 4.0], [55800.0, 1.0], [58200.0, 1.0], [59000.0, 4.0], [57400.0, 5.0], [61400.0, 2.0], [63000.0, 4.0], [63800.0, 4.0], [64600.0, 5.0], [65400.0, 1.0], [66800.0, 1.0], [70000.0, 2.0], [73200.0, 1.0], [71600.0, 1.0], [74800.0, 1.0], [76400.0, 1.0], [79600.0, 2.0], [81200.0, 2.0], [78000.0, 2.0], [84400.0, 3.0], [82800.0, 1.0], [89200.0, 1.0], [94000.0, 3.0], [90800.0, 1.0], [102000.0, 1.0], [118000.0, 1.0]], "isOverall": false, "label": "HTTP\u8BF7\u6C42", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 120000.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 21.0, "minX": 2.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 1843.0, "series": [{"data": [], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 1843.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [[3.0, 21.0]], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 3.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 12.0, "minX": 1.63607766E12, "maxY": 150.0, "series": [{"data": [[1.63607802E12, 150.0], [1.63607784E12, 150.0], [1.63607832E12, 12.0], [1.6360779E12, 150.0], [1.63607772E12, 150.0], [1.6360782E12, 150.0], [1.63607778E12, 150.0], [1.63607826E12, 104.53977272727275], [1.63607808E12, 150.0], [1.63607766E12, 150.0], [1.63607814E12, 150.0], [1.63607796E12, 150.0]], "isOverall": false, "label": "\u7EBF\u7A0B\u7EC4", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.63607832E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 15434.0, "minX": 1.0, "maxY": 109369.0, "series": [{"data": [[2.0, 71685.0], [3.0, 76381.0], [4.0, 50411.0], [5.0, 89314.0], [6.0, 89299.0], [7.0, 65631.0], [8.0, 64810.0], [9.0, 54466.0], [10.0, 66053.0], [11.0, 54058.0], [12.0, 54559.0], [13.0, 53796.0], [14.0, 66901.0], [15.0, 84980.0], [16.0, 66549.0], [17.0, 46610.0], [18.0, 83710.0], [19.0, 107921.0], [20.0, 45286.0], [21.0, 49778.0], [22.0, 94021.0], [23.0, 47248.0], [24.0, 47352.0], [25.0, 44181.0], [26.0, 76055.0], [27.0, 43836.0], [28.0, 71591.0], [29.0, 44191.0], [30.0, 102060.0], [31.0, 109075.0], [33.0, 53181.0], [32.0, 104291.0], [35.0, 63311.0], [34.0, 54029.0], [37.0, 42165.0], [36.0, 69215.0], [39.0, 56020.0], [38.0, 41148.0], [41.0, 56356.0], [40.0, 56890.0], [43.0, 68525.0], [42.0, 97871.0], [45.0, 63973.0], [44.0, 109369.0], [47.0, 63667.0], [46.0, 42094.0], [49.0, 40231.0], [48.0, 62135.0], [51.0, 39093.0], [50.0, 62002.0], [53.0, 60530.0], [52.0, 38547.0], [55.0, 67551.0], [54.0, 61558.0], [57.0, 82497.0], [56.0, 67974.0], [59.0, 68799.0], [58.0, 67542.0], [61.0, 65628.0], [60.0, 68043.0], [63.0, 65140.0], [62.0, 54729.0], [67.0, 60977.0], [66.0, 54532.0], [65.0, 70224.0], [64.0, 76444.0], [71.0, 64627.0], [70.0, 39820.0], [69.0, 39312.0], [68.0, 101767.0], [75.0, 35855.0], [74.0, 36880.0], [73.0, 53220.0], [72.0, 56549.0], [79.0, 35422.0], [78.0, 36889.0], [77.0, 100335.0], [76.0, 59311.0], [83.0, 33414.0], [82.0, 55081.0], [81.0, 53557.0], [80.0, 33763.0], [87.0, 40943.0], [86.0, 42584.0], [85.0, 35077.0], [84.0, 35257.0], [91.0, 31793.0], [90.0, 58082.0], [89.0, 26223.0], [88.0, 63775.0], [95.0, 34220.0], [94.0, 34836.0], [93.0, 31783.0], [92.0, 50037.0], [99.0, 55416.0], [98.0, 80142.0], [97.0, 81587.0], [96.0, 60381.0], [103.0, 47332.0], [102.0, 41751.0], [101.0, 48489.0], [100.0, 34666.0], [107.0, 28695.0], [106.0, 28103.0], [105.0, 28778.0], [104.0, 36119.0], [111.0, 61106.0], [110.0, 61078.0], [109.0, 28452.0], [108.0, 50096.0], [115.0, 60008.0], [114.0, 26243.0], [113.0, 47392.0], [112.0, 25908.0], [119.0, 48541.0], [118.0, 85822.0], [117.0, 61569.0], [116.0, 32039.0], [123.0, 24857.0], [122.0, 42706.0], [121.0, 53229.0], [120.0, 49698.0], [127.0, 23716.0], [126.0, 68369.0], [125.0, 72088.0], [124.0, 23574.0], [135.0, 47002.0], [134.0, 54449.0], [133.0, 70045.0], [132.0, 29550.0], [131.0, 55912.0], [130.0, 68160.0], [129.0, 15434.0], [128.0, 24483.0], [143.0, 23539.0], [142.0, 47075.0], [141.0, 24276.0], [140.0, 47057.0], [139.0, 28968.0], [138.0, 84104.0], [137.0, 73515.0], [136.0, 46889.0], [150.0, 49966.27696793008], [149.0, 74464.0], [148.0, 38176.0], [147.0, 24337.0], [146.0, 22557.0], [145.0, 46693.0], [144.0, 46735.0], [1.0, 91539.0]], "isOverall": false, "label": "HTTP\u8BF7\u6C42", "isController": false}, {"data": [[144.0048283261803, 50382.81920600861]], "isOverall": false, "label": "HTTP\u8BF7\u6C42-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 150.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 91.61666666666666, "minX": 1.63607766E12, "maxY": 86618.03333333334, "series": [{"data": [[1.63607802E12, 84277.48333333334], [1.63607784E12, 83485.96666666666], [1.63607832E12, 11198.2], [1.6360779E12, 79500.16666666667], [1.63607772E12, 86618.03333333334], [1.6360782E12, 80784.13333333333], [1.63607778E12, 85286.56666666667], [1.63607826E12, 84720.1], [1.63607808E12, 85256.06666666667], [1.63607766E12, 52103.9], [1.63607814E12, 84832.11666666667], [1.63607796E12, 79257.88333333333]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.63607802E12, 693.1], [1.63607784E12, 701.0666666666667], [1.63607832E12, 91.61666666666666], [1.6360779E12, 681.15], [1.63607772E12, 709.0333333333333], [1.6360782E12, 665.2166666666667], [1.63607778E12, 701.0666666666667], [1.63607826E12, 701.0666666666667], [1.63607808E12, 697.0833333333334], [1.63607766E12, 426.21666666666664], [1.63607814E12, 701.0666666666667], [1.63607796E12, 657.25]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.63607832E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 24319.92523364486, "minX": 1.63607766E12, "maxY": 68478.52173913046, "series": [{"data": [[1.63607802E12, 52326.94827586207], [1.63607784E12, 47536.346590909096], [1.63607832E12, 68478.52173913046], [1.6360779E12, 54651.54385964913], [1.63607772E12, 47438.75842696631], [1.6360782E12, 53732.60479041916], [1.63607778E12, 52166.2272727273], [1.63607826E12, 54672.22159090909], [1.63607808E12, 51203.354285714304], [1.63607766E12, 24319.92523364486], [1.63607814E12, 49030.89772727272], [1.63607796E12, 55203.64242424244]], "isOverall": false, "label": "HTTP\u8BF7\u6C42", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.63607832E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 24313.102803738333, "minX": 1.63607766E12, "maxY": 68471.17391304347, "series": [{"data": [[1.63607802E12, 52319.90804597702], [1.63607784E12, 47529.835227272735], [1.63607832E12, 68471.17391304347], [1.6360779E12, 54645.26900584796], [1.63607772E12, 47428.53932584268], [1.6360782E12, 53721.305389221525], [1.63607778E12, 52159.57386363637], [1.63607826E12, 54665.551136363625], [1.63607808E12, 51195.84571428572], [1.63607766E12, 24313.102803738333], [1.63607814E12, 49024.07954545454], [1.63607796E12, 55197.12121212121]], "isOverall": false, "label": "HTTP\u8BF7\u6C42", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.63607832E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 6.7183908045977025, "minX": 1.63607766E12, "maxY": 47.0093457943925, "series": [{"data": [[1.63607802E12, 6.7183908045977025], [1.63607784E12, 7.659090909090912], [1.63607832E12, 8.130434782608695], [1.6360779E12, 6.795321637426899], [1.63607772E12, 18.280898876404493], [1.6360782E12, 7.137724550898207], [1.63607778E12, 10.125], [1.63607826E12, 12.8125], [1.63607808E12, 7.33142857142857], [1.63607766E12, 47.0093457943925], [1.63607814E12, 7.267045454545453], [1.63607796E12, 6.745454545454546]], "isOverall": false, "label": "HTTP\u8BF7\u6C42", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.63607832E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 7606.0, "minX": 1.63607766E12, "maxY": 118041.0, "series": [{"data": [[1.63607802E12, 96971.0], [1.63607784E12, 99323.0], [1.63607832E12, 107921.0], [1.6360779E12, 111302.0], [1.63607772E12, 92773.0], [1.6360782E12, 118041.0], [1.63607778E12, 112554.0], [1.63607826E12, 109369.0], [1.63607808E12, 109385.0], [1.63607766E12, 43058.0], [1.63607814E12, 109853.0], [1.63607796E12, 112392.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.63607802E12, 17411.0], [1.63607784E12, 14276.0], [1.63607832E12, 45286.0], [1.6360779E12, 22269.0], [1.63607772E12, 22624.0], [1.6360782E12, 18390.0], [1.63607778E12, 19108.0], [1.63607826E12, 15434.0], [1.63607808E12, 20305.0], [1.63607766E12, 7606.0], [1.63607814E12, 21248.0], [1.63607796E12, 23837.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.63607802E12, 79128.2], [1.63607784E12, 79353.3], [1.63607832E12, 93028.2], [1.6360779E12, 80766.99999999999], [1.63607772E12, 68158.0], [1.6360782E12, 82377.30000000003], [1.63607778E12, 75688.00000000001], [1.63607826E12, 80715.0], [1.63607808E12, 80259.6], [1.63607766E12, 37802.6], [1.63607814E12, 73736.0], [1.63607796E12, 76275.59999999999]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.63607802E12, 96949.54], [1.63607784E12, 96415.41000000005], [1.63607832E12, 107921.0], [1.6360779E12, 109288.55999999995], [1.63607772E12, 85067.34000000008], [1.6360782E12, 117452.07], [1.63607778E12, 112021.24], [1.63607826E12, 109148.5], [1.63607808E12, 107162.00000000003], [1.63607766E12, 43019.04], [1.63607814E12, 107887.25], [1.63607796E12, 104833.59999999983]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.63607802E12, 83986.59999999993], [1.63607784E12, 85114.79999999999], [1.63607832E12, 105140.99999999996], [1.6360779E12, 93792.8], [1.63607772E12, 73869.34999999996], [1.6360782E12, 91626.45000000001], [1.63607778E12, 86825.79999999994], [1.63607826E12, 98487.0], [1.63607808E12, 89091.4], [1.63607766E12, 41090.6], [1.63607814E12, 89120.75], [1.63607796E12, 84036.39999999998]], "isOverall": false, "label": "95th percentile", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.63607832E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 33032.0, "minX": 1.0, "maxY": 120062.0, "series": [{"data": [[2.0, 49251.0], [4.0, 44405.0], [1.0, 47187.0], [8.0, 44727.0], [5.0, 46097.0], [3.0, 47247.5], [6.0, 40230.0], [7.0, 33032.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[2.0, 120062.0], [4.0, 120013.0], [5.0, 120019.0], [6.0, 120013.0], [3.0, 120014.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 8.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 33025.5, "minX": 1.0, "maxY": 120062.0, "series": [{"data": [[2.0, 49244.0], [4.0, 44398.0], [1.0, 47180.0], [8.0, 44721.0], [5.0, 46086.5], [3.0, 47240.0], [6.0, 40223.0], [7.0, 33025.5]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[2.0, 120062.0], [4.0, 120013.0], [5.0, 120019.0], [6.0, 120013.0], [3.0, 120014.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 8.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 0.8166666666666667, "minX": 1.63607766E12, "maxY": 4.283333333333333, "series": [{"data": [[1.63607802E12, 2.9], [1.63607784E12, 2.933333333333333], [1.6360779E12, 2.85], [1.63607772E12, 2.966666666666667], [1.6360782E12, 2.783333333333333], [1.63607778E12, 2.933333333333333], [1.63607826E12, 0.8166666666666667], [1.63607808E12, 2.9166666666666665], [1.63607766E12, 4.283333333333333], [1.63607814E12, 2.933333333333333], [1.63607796E12, 2.75]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.63607826E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 0.016666666666666666, "minX": 1.63607766E12, "maxY": 2.966666666666667, "series": [{"data": [[1.63607802E12, 2.8833333333333333], [1.63607784E12, 2.8666666666666667], [1.63607832E12, 0.38333333333333336], [1.6360779E12, 2.716666666666667], [1.63607772E12, 2.966666666666667], [1.6360782E12, 2.7666666666666666], [1.63607778E12, 2.9166666666666665], [1.63607826E12, 2.9], [1.63607808E12, 2.9166666666666665], [1.63607766E12, 1.7833333333333334], [1.63607814E12, 2.9], [1.63607796E12, 2.716666666666667]], "isOverall": false, "label": "200", "isController": false}, {"data": [[1.63607802E12, 0.016666666666666666], [1.63607784E12, 0.06666666666666667], [1.6360779E12, 0.13333333333333333], [1.6360782E12, 0.016666666666666666], [1.63607778E12, 0.016666666666666666], [1.63607826E12, 0.03333333333333333], [1.63607814E12, 0.03333333333333333], [1.63607796E12, 0.03333333333333333]], "isOverall": false, "label": "404", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.63607832E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.016666666666666666, "minX": 1.63607766E12, "maxY": 2.966666666666667, "series": [{"data": [[1.63607802E12, 0.016666666666666666], [1.63607784E12, 0.06666666666666667], [1.6360779E12, 0.13333333333333333], [1.6360782E12, 0.016666666666666666], [1.63607778E12, 0.016666666666666666], [1.63607826E12, 0.03333333333333333], [1.63607814E12, 0.03333333333333333], [1.63607796E12, 0.03333333333333333]], "isOverall": false, "label": "HTTP\u8BF7\u6C42-failure", "isController": false}, {"data": [[1.63607802E12, 2.8833333333333333], [1.63607784E12, 2.8666666666666667], [1.63607832E12, 0.38333333333333336], [1.6360779E12, 2.716666666666667], [1.63607772E12, 2.966666666666667], [1.6360782E12, 2.7666666666666666], [1.63607778E12, 2.9166666666666665], [1.63607826E12, 2.9], [1.63607808E12, 2.9166666666666665], [1.63607766E12, 1.7833333333333334], [1.63607814E12, 2.9], [1.63607796E12, 2.716666666666667]], "isOverall": false, "label": "HTTP\u8BF7\u6C42-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.63607832E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 0.016666666666666666, "minX": 1.63607766E12, "maxY": 2.966666666666667, "series": [{"data": [[1.63607802E12, 2.8833333333333333], [1.63607784E12, 2.8666666666666667], [1.63607832E12, 0.38333333333333336], [1.6360779E12, 2.716666666666667], [1.63607772E12, 2.966666666666667], [1.6360782E12, 2.7666666666666666], [1.63607778E12, 2.9166666666666665], [1.63607826E12, 2.9], [1.63607808E12, 2.9166666666666665], [1.63607766E12, 1.7833333333333334], [1.63607814E12, 2.9], [1.63607796E12, 2.716666666666667]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [[1.63607802E12, 0.016666666666666666], [1.63607784E12, 0.06666666666666667], [1.6360779E12, 0.13333333333333333], [1.6360782E12, 0.016666666666666666], [1.63607778E12, 0.016666666666666666], [1.63607826E12, 0.03333333333333333], [1.63607814E12, 0.03333333333333333], [1.63607796E12, 0.03333333333333333]], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.63607832E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

