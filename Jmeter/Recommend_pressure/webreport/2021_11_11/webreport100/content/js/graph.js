/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 3582.0, "minX": 0.0, "maxY": 93093.0, "series": [{"data": [[0.0, 3582.0], [0.1, 3864.0], [0.2, 4378.0], [0.3, 4985.0], [0.4, 5679.0], [0.5, 5807.0], [0.6, 6712.0], [0.7, 7295.0], [0.8, 8115.0], [0.9, 8621.0], [1.0, 9012.0], [1.1, 10719.0], [1.2, 11108.0], [1.3, 11704.0], [1.4, 12588.0], [1.5, 12815.0], [1.6, 13044.0], [1.7, 13900.0], [1.8, 14400.0], [1.9, 14483.0], [2.0, 14644.0], [2.1, 14712.0], [2.2, 14804.0], [2.3, 15363.0], [2.4, 15411.0], [2.5, 15784.0], [2.6, 15976.0], [2.7, 16099.0], [2.8, 16103.0], [2.9, 16522.0], [3.0, 16683.0], [3.1, 16750.0], [3.2, 16944.0], [3.3, 17091.0], [3.4, 17371.0], [3.5, 17511.0], [3.6, 17547.0], [3.7, 17584.0], [3.8, 17644.0], [3.9, 17697.0], [4.0, 17699.0], [4.1, 17723.0], [4.2, 18003.0], [4.3, 18207.0], [4.4, 18399.0], [4.5, 18550.0], [4.6, 18604.0], [4.7, 18643.0], [4.8, 18696.0], [4.9, 18729.0], [5.0, 18961.0], [5.1, 18977.0], [5.2, 19081.0], [5.3, 19239.0], [5.4, 19284.0], [5.5, 19307.0], [5.6, 19399.0], [5.7, 19545.0], [5.8, 19650.0], [5.9, 19728.0], [6.0, 19752.0], [6.1, 19794.0], [6.2, 19906.0], [6.3, 19974.0], [6.4, 19996.0], [6.5, 20077.0], [6.6, 20139.0], [6.7, 20220.0], [6.8, 20326.0], [6.9, 20333.0], [7.0, 20383.0], [7.1, 20462.0], [7.2, 20474.0], [7.3, 20502.0], [7.4, 20537.0], [7.5, 20556.0], [7.6, 20573.0], [7.7, 20581.0], [7.8, 20603.0], [7.9, 20729.0], [8.0, 20802.0], [8.1, 20838.0], [8.2, 20945.0], [8.3, 20957.0], [8.4, 21012.0], [8.5, 21119.0], [8.6, 21250.0], [8.7, 21327.0], [8.8, 21493.0], [8.9, 21525.0], [9.0, 21564.0], [9.1, 21578.0], [9.2, 21607.0], [9.3, 21639.0], [9.4, 21773.0], [9.5, 21810.0], [9.6, 21823.0], [9.7, 21881.0], [9.8, 21902.0], [9.9, 21943.0], [10.0, 21960.0], [10.1, 21994.0], [10.2, 22004.0], [10.3, 22022.0], [10.4, 22042.0], [10.5, 22064.0], [10.6, 22077.0], [10.7, 22102.0], [10.8, 22105.0], [10.9, 22123.0], [11.0, 22234.0], [11.1, 22255.0], [11.2, 22270.0], [11.3, 22287.0], [11.4, 22325.0], [11.5, 22350.0], [11.6, 22372.0], [11.7, 22434.0], [11.8, 22437.0], [11.9, 22455.0], [12.0, 22478.0], [12.1, 22481.0], [12.2, 22569.0], [12.3, 22619.0], [12.4, 22643.0], [12.5, 22693.0], [12.6, 22704.0], [12.7, 22726.0], [12.8, 22787.0], [12.9, 22893.0], [13.0, 22922.0], [13.1, 22950.0], [13.2, 22977.0], [13.3, 23017.0], [13.4, 23039.0], [13.5, 23083.0], [13.6, 23088.0], [13.7, 23209.0], [13.8, 23232.0], [13.9, 23275.0], [14.0, 23307.0], [14.1, 23347.0], [14.2, 23404.0], [14.3, 23436.0], [14.4, 23453.0], [14.5, 23464.0], [14.6, 23484.0], [14.7, 23509.0], [14.8, 23518.0], [14.9, 23532.0], [15.0, 23595.0], [15.1, 23617.0], [15.2, 23632.0], [15.3, 23714.0], [15.4, 23726.0], [15.5, 23744.0], [15.6, 23774.0], [15.7, 23775.0], [15.8, 23808.0], [15.9, 23812.0], [16.0, 23839.0], [16.1, 23854.0], [16.2, 23943.0], [16.3, 23975.0], [16.4, 24002.0], [16.5, 24018.0], [16.6, 24023.0], [16.7, 24041.0], [16.8, 24097.0], [16.9, 24108.0], [17.0, 24119.0], [17.1, 24150.0], [17.2, 24160.0], [17.3, 24171.0], [17.4, 24258.0], [17.5, 24297.0], [17.6, 24317.0], [17.7, 24332.0], [17.8, 24349.0], [17.9, 24396.0], [18.0, 24450.0], [18.1, 24465.0], [18.2, 24497.0], [18.3, 24503.0], [18.4, 24516.0], [18.5, 24520.0], [18.6, 24570.0], [18.7, 24615.0], [18.8, 24630.0], [18.9, 24645.0], [19.0, 24657.0], [19.1, 24658.0], [19.2, 24674.0], [19.3, 24681.0], [19.4, 24731.0], [19.5, 24761.0], [19.6, 24777.0], [19.7, 24793.0], [19.8, 24816.0], [19.9, 24824.0], [20.0, 24842.0], [20.1, 24892.0], [20.2, 24907.0], [20.3, 24913.0], [20.4, 24922.0], [20.5, 24953.0], [20.6, 24977.0], [20.7, 24985.0], [20.8, 25049.0], [20.9, 25078.0], [21.0, 25147.0], [21.1, 25186.0], [21.2, 25222.0], [21.3, 25237.0], [21.4, 25279.0], [21.5, 25288.0], [21.6, 25311.0], [21.7, 25332.0], [21.8, 25346.0], [21.9, 25351.0], [22.0, 25376.0], [22.1, 25381.0], [22.2, 25475.0], [22.3, 25512.0], [22.4, 25596.0], [22.5, 25620.0], [22.6, 25622.0], [22.7, 25678.0], [22.8, 25680.0], [22.9, 25702.0], [23.0, 25733.0], [23.1, 25744.0], [23.2, 25777.0], [23.3, 25797.0], [23.4, 25811.0], [23.5, 25814.0], [23.6, 25848.0], [23.7, 25866.0], [23.8, 25915.0], [23.9, 25925.0], [24.0, 25954.0], [24.1, 25968.0], [24.2, 26023.0], [24.3, 26089.0], [24.4, 26097.0], [24.5, 26135.0], [24.6, 26168.0], [24.7, 26207.0], [24.8, 26221.0], [24.9, 26258.0], [25.0, 26269.0], [25.1, 26305.0], [25.2, 26350.0], [25.3, 26357.0], [25.4, 26372.0], [25.5, 26427.0], [25.6, 26439.0], [25.7, 26485.0], [25.8, 26574.0], [25.9, 26602.0], [26.0, 26610.0], [26.1, 26644.0], [26.2, 26667.0], [26.3, 26673.0], [26.4, 26676.0], [26.5, 26701.0], [26.6, 26731.0], [26.7, 26770.0], [26.8, 26773.0], [26.9, 26794.0], [27.0, 26808.0], [27.1, 26818.0], [27.2, 26826.0], [27.3, 26874.0], [27.4, 26906.0], [27.5, 26912.0], [27.6, 27035.0], [27.7, 27053.0], [27.8, 27074.0], [27.9, 27089.0], [28.0, 27091.0], [28.1, 27097.0], [28.2, 27108.0], [28.3, 27140.0], [28.4, 27175.0], [28.5, 27182.0], [28.6, 27234.0], [28.7, 27242.0], [28.8, 27274.0], [28.9, 27276.0], [29.0, 27287.0], [29.1, 27308.0], [29.2, 27324.0], [29.3, 27327.0], [29.4, 27339.0], [29.5, 27406.0], [29.6, 27448.0], [29.7, 27484.0], [29.8, 27526.0], [29.9, 27530.0], [30.0, 27542.0], [30.1, 27557.0], [30.2, 27611.0], [30.3, 27659.0], [30.4, 27689.0], [30.5, 27724.0], [30.6, 27738.0], [30.7, 27743.0], [30.8, 27770.0], [30.9, 27782.0], [31.0, 27788.0], [31.1, 27798.0], [31.2, 27818.0], [31.3, 27844.0], [31.4, 27860.0], [31.5, 27871.0], [31.6, 27877.0], [31.7, 27886.0], [31.8, 27919.0], [31.9, 27923.0], [32.0, 27925.0], [32.1, 27927.0], [32.2, 27966.0], [32.3, 27990.0], [32.4, 27994.0], [32.5, 27995.0], [32.6, 28043.0], [32.7, 28051.0], [32.8, 28084.0], [32.9, 28095.0], [33.0, 28129.0], [33.1, 28138.0], [33.2, 28171.0], [33.3, 28181.0], [33.4, 28189.0], [33.5, 28207.0], [33.6, 28253.0], [33.7, 28273.0], [33.8, 28294.0], [33.9, 28305.0], [34.0, 28321.0], [34.1, 28349.0], [34.2, 28418.0], [34.3, 28431.0], [34.4, 28448.0], [34.5, 28472.0], [34.6, 28493.0], [34.7, 28517.0], [34.8, 28525.0], [34.9, 28557.0], [35.0, 28563.0], [35.1, 28580.0], [35.2, 28605.0], [35.3, 28610.0], [35.4, 28621.0], [35.5, 28642.0], [35.6, 28656.0], [35.7, 28683.0], [35.8, 28700.0], [35.9, 28774.0], [36.0, 28808.0], [36.1, 28845.0], [36.2, 28851.0], [36.3, 28859.0], [36.4, 28878.0], [36.5, 28886.0], [36.6, 28907.0], [36.7, 28934.0], [36.8, 28956.0], [36.9, 28963.0], [37.0, 28999.0], [37.1, 29004.0], [37.2, 29012.0], [37.3, 29018.0], [37.4, 29029.0], [37.5, 29036.0], [37.6, 29045.0], [37.7, 29052.0], [37.8, 29083.0], [37.9, 29111.0], [38.0, 29118.0], [38.1, 29127.0], [38.2, 29147.0], [38.3, 29164.0], [38.4, 29264.0], [38.5, 29292.0], [38.6, 29300.0], [38.7, 29352.0], [38.8, 29363.0], [38.9, 29374.0], [39.0, 29390.0], [39.1, 29420.0], [39.2, 29437.0], [39.3, 29442.0], [39.4, 29460.0], [39.5, 29482.0], [39.6, 29492.0], [39.7, 29500.0], [39.8, 29506.0], [39.9, 29542.0], [40.0, 29558.0], [40.1, 29566.0], [40.2, 29576.0], [40.3, 29594.0], [40.4, 29610.0], [40.5, 29645.0], [40.6, 29682.0], [40.7, 29696.0], [40.8, 29716.0], [40.9, 29734.0], [41.0, 29747.0], [41.1, 29760.0], [41.2, 29775.0], [41.3, 29789.0], [41.4, 29820.0], [41.5, 29822.0], [41.6, 29841.0], [41.7, 29853.0], [41.8, 29876.0], [41.9, 29881.0], [42.0, 29892.0], [42.1, 29899.0], [42.2, 29916.0], [42.3, 29941.0], [42.4, 29957.0], [42.5, 29971.0], [42.6, 29990.0], [42.7, 30018.0], [42.8, 30058.0], [42.9, 30080.0], [43.0, 30088.0], [43.1, 30174.0], [43.2, 30220.0], [43.3, 30239.0], [43.4, 30255.0], [43.5, 30275.0], [43.6, 30312.0], [43.7, 30345.0], [43.8, 30385.0], [43.9, 30401.0], [44.0, 30413.0], [44.1, 30428.0], [44.2, 30438.0], [44.3, 30443.0], [44.4, 30491.0], [44.5, 30514.0], [44.6, 30529.0], [44.7, 30556.0], [44.8, 30582.0], [44.9, 30604.0], [45.0, 30644.0], [45.1, 30646.0], [45.2, 30648.0], [45.3, 30689.0], [45.4, 30700.0], [45.5, 30721.0], [45.6, 30755.0], [45.7, 30760.0], [45.8, 30784.0], [45.9, 30833.0], [46.0, 30845.0], [46.1, 30855.0], [46.2, 30872.0], [46.3, 30906.0], [46.4, 30943.0], [46.5, 31012.0], [46.6, 31057.0], [46.7, 31068.0], [46.8, 31077.0], [46.9, 31080.0], [47.0, 31102.0], [47.1, 31111.0], [47.2, 31112.0], [47.3, 31165.0], [47.4, 31181.0], [47.5, 31231.0], [47.6, 31250.0], [47.7, 31256.0], [47.8, 31261.0], [47.9, 31263.0], [48.0, 31297.0], [48.1, 31322.0], [48.2, 31363.0], [48.3, 31411.0], [48.4, 31422.0], [48.5, 31439.0], [48.6, 31453.0], [48.7, 31523.0], [48.8, 31574.0], [48.9, 31591.0], [49.0, 31623.0], [49.1, 31666.0], [49.2, 31704.0], [49.3, 31718.0], [49.4, 31746.0], [49.5, 31759.0], [49.6, 31785.0], [49.7, 31799.0], [49.8, 31804.0], [49.9, 31826.0], [50.0, 31862.0], [50.1, 31888.0], [50.2, 31916.0], [50.3, 31940.0], [50.4, 31997.0], [50.5, 32061.0], [50.6, 32093.0], [50.7, 32141.0], [50.8, 32148.0], [50.9, 32151.0], [51.0, 32181.0], [51.1, 32199.0], [51.2, 32220.0], [51.3, 32237.0], [51.4, 32245.0], [51.5, 32268.0], [51.6, 32301.0], [51.7, 32311.0], [51.8, 32330.0], [51.9, 32388.0], [52.0, 32395.0], [52.1, 32428.0], [52.2, 32434.0], [52.3, 32442.0], [52.4, 32492.0], [52.5, 32497.0], [52.6, 32511.0], [52.7, 32530.0], [52.8, 32556.0], [52.9, 32566.0], [53.0, 32574.0], [53.1, 32592.0], [53.2, 32597.0], [53.3, 32620.0], [53.4, 32655.0], [53.5, 32676.0], [53.6, 32713.0], [53.7, 32733.0], [53.8, 32739.0], [53.9, 32743.0], [54.0, 32762.0], [54.1, 32766.0], [54.2, 32783.0], [54.3, 32858.0], [54.4, 32865.0], [54.5, 32923.0], [54.6, 32940.0], [54.7, 32978.0], [54.8, 32986.0], [54.9, 33003.0], [55.0, 33003.0], [55.1, 33014.0], [55.2, 33052.0], [55.3, 33055.0], [55.4, 33096.0], [55.5, 33125.0], [55.6, 33138.0], [55.7, 33162.0], [55.8, 33171.0], [55.9, 33204.0], [56.0, 33221.0], [56.1, 33239.0], [56.2, 33246.0], [56.3, 33272.0], [56.4, 33279.0], [56.5, 33310.0], [56.6, 33341.0], [56.7, 33379.0], [56.8, 33386.0], [56.9, 33407.0], [57.0, 33410.0], [57.1, 33443.0], [57.2, 33490.0], [57.3, 33504.0], [57.4, 33539.0], [57.5, 33575.0], [57.6, 33631.0], [57.7, 33641.0], [57.8, 33661.0], [57.9, 33670.0], [58.0, 33682.0], [58.1, 33700.0], [58.2, 33724.0], [58.3, 33737.0], [58.4, 33778.0], [58.5, 33802.0], [58.6, 33812.0], [58.7, 33835.0], [58.8, 33853.0], [58.9, 33865.0], [59.0, 33905.0], [59.1, 33910.0], [59.2, 33914.0], [59.3, 33922.0], [59.4, 33940.0], [59.5, 33947.0], [59.6, 33970.0], [59.7, 34010.0], [59.8, 34042.0], [59.9, 34072.0], [60.0, 34079.0], [60.1, 34136.0], [60.2, 34157.0], [60.3, 34166.0], [60.4, 34169.0], [60.5, 34185.0], [60.6, 34220.0], [60.7, 34227.0], [60.8, 34232.0], [60.9, 34244.0], [61.0, 34254.0], [61.1, 34275.0], [61.2, 34324.0], [61.3, 34341.0], [61.4, 34361.0], [61.5, 34381.0], [61.6, 34411.0], [61.7, 34439.0], [61.8, 34454.0], [61.9, 34484.0], [62.0, 34503.0], [62.1, 34517.0], [62.2, 34527.0], [62.3, 34533.0], [62.4, 34557.0], [62.5, 34563.0], [62.6, 34574.0], [62.7, 34586.0], [62.8, 34617.0], [62.9, 34646.0], [63.0, 34656.0], [63.1, 34667.0], [63.2, 34677.0], [63.3, 34688.0], [63.4, 34724.0], [63.5, 34760.0], [63.6, 34775.0], [63.7, 34822.0], [63.8, 34851.0], [63.9, 34867.0], [64.0, 34883.0], [64.1, 34902.0], [64.2, 34919.0], [64.3, 34953.0], [64.4, 34959.0], [64.5, 34986.0], [64.6, 35005.0], [64.7, 35017.0], [64.8, 35030.0], [64.9, 35047.0], [65.0, 35113.0], [65.1, 35114.0], [65.2, 35198.0], [65.3, 35212.0], [65.4, 35262.0], [65.5, 35286.0], [65.6, 35357.0], [65.7, 35366.0], [65.8, 35371.0], [65.9, 35410.0], [66.0, 35479.0], [66.1, 35496.0], [66.2, 35577.0], [66.3, 35653.0], [66.4, 35694.0], [66.5, 35698.0], [66.6, 35714.0], [66.7, 35720.0], [66.8, 35740.0], [66.9, 35761.0], [67.0, 35821.0], [67.1, 35832.0], [67.2, 35854.0], [67.3, 35900.0], [67.4, 35929.0], [67.5, 35938.0], [67.6, 35953.0], [67.7, 35959.0], [67.8, 35984.0], [67.9, 35997.0], [68.0, 36020.0], [68.1, 36026.0], [68.2, 36031.0], [68.3, 36041.0], [68.4, 36058.0], [68.5, 36092.0], [68.6, 36165.0], [68.7, 36178.0], [68.8, 36286.0], [68.9, 36298.0], [69.0, 36333.0], [69.1, 36357.0], [69.2, 36406.0], [69.3, 36466.0], [69.4, 36506.0], [69.5, 36527.0], [69.6, 36585.0], [69.7, 36636.0], [69.8, 36644.0], [69.9, 36653.0], [70.0, 36671.0], [70.1, 36678.0], [70.2, 36684.0], [70.3, 36687.0], [70.4, 36753.0], [70.5, 36769.0], [70.6, 36795.0], [70.7, 36829.0], [70.8, 36889.0], [70.9, 36913.0], [71.0, 36920.0], [71.1, 36946.0], [71.2, 36948.0], [71.3, 36977.0], [71.4, 37028.0], [71.5, 37042.0], [71.6, 37070.0], [71.7, 37099.0], [71.8, 37130.0], [71.9, 37150.0], [72.0, 37195.0], [72.1, 37208.0], [72.2, 37225.0], [72.3, 37249.0], [72.4, 37299.0], [72.5, 37308.0], [72.6, 37328.0], [72.7, 37346.0], [72.8, 37390.0], [72.9, 37398.0], [73.0, 37435.0], [73.1, 37451.0], [73.2, 37452.0], [73.3, 37516.0], [73.4, 37537.0], [73.5, 37583.0], [73.6, 37600.0], [73.7, 37668.0], [73.8, 37722.0], [73.9, 37784.0], [74.0, 37807.0], [74.1, 37847.0], [74.2, 37902.0], [74.3, 37941.0], [74.4, 37948.0], [74.5, 37979.0], [74.6, 38009.0], [74.7, 38021.0], [74.8, 38033.0], [74.9, 38113.0], [75.0, 38116.0], [75.1, 38149.0], [75.2, 38180.0], [75.3, 38186.0], [75.4, 38213.0], [75.5, 38237.0], [75.6, 38245.0], [75.7, 38251.0], [75.8, 38273.0], [75.9, 38311.0], [76.0, 38349.0], [76.1, 38412.0], [76.2, 38428.0], [76.3, 38439.0], [76.4, 38447.0], [76.5, 38471.0], [76.6, 38473.0], [76.7, 38488.0], [76.8, 38504.0], [76.9, 38525.0], [77.0, 38534.0], [77.1, 38548.0], [77.2, 38587.0], [77.3, 38636.0], [77.4, 38684.0], [77.5, 38724.0], [77.6, 38741.0], [77.7, 38758.0], [77.8, 38793.0], [77.9, 38878.0], [78.0, 38939.0], [78.1, 38942.0], [78.2, 38957.0], [78.3, 38975.0], [78.4, 38987.0], [78.5, 38997.0], [78.6, 39038.0], [78.7, 39058.0], [78.8, 39087.0], [78.9, 39128.0], [79.0, 39162.0], [79.1, 39205.0], [79.2, 39376.0], [79.3, 39423.0], [79.4, 39473.0], [79.5, 39485.0], [79.6, 39508.0], [79.7, 39560.0], [79.8, 39622.0], [79.9, 39633.0], [80.0, 39733.0], [80.1, 39764.0], [80.2, 39765.0], [80.3, 39778.0], [80.4, 39791.0], [80.5, 39840.0], [80.6, 39854.0], [80.7, 39858.0], [80.8, 39941.0], [80.9, 39947.0], [81.0, 40042.0], [81.1, 40056.0], [81.2, 40068.0], [81.3, 40086.0], [81.4, 40097.0], [81.5, 40098.0], [81.6, 40169.0], [81.7, 40182.0], [81.8, 40201.0], [81.9, 40235.0], [82.0, 40257.0], [82.1, 40298.0], [82.2, 40359.0], [82.3, 40452.0], [82.4, 40498.0], [82.5, 40537.0], [82.6, 40574.0], [82.7, 40601.0], [82.8, 40632.0], [82.9, 40640.0], [83.0, 40673.0], [83.1, 40688.0], [83.2, 40780.0], [83.3, 40835.0], [83.4, 40844.0], [83.5, 40850.0], [83.6, 40885.0], [83.7, 40981.0], [83.8, 41029.0], [83.9, 41063.0], [84.0, 41095.0], [84.1, 41159.0], [84.2, 41199.0], [84.3, 41327.0], [84.4, 41370.0], [84.5, 41462.0], [84.6, 41529.0], [84.7, 41540.0], [84.8, 41580.0], [84.9, 41596.0], [85.0, 41639.0], [85.1, 41656.0], [85.2, 41682.0], [85.3, 41723.0], [85.4, 41908.0], [85.5, 41970.0], [85.6, 42090.0], [85.7, 42126.0], [85.8, 42165.0], [85.9, 42200.0], [86.0, 42263.0], [86.1, 42308.0], [86.2, 42326.0], [86.3, 42355.0], [86.4, 42410.0], [86.5, 42469.0], [86.6, 42550.0], [86.7, 42580.0], [86.8, 42616.0], [86.9, 42737.0], [87.0, 42768.0], [87.1, 42818.0], [87.2, 42832.0], [87.3, 42855.0], [87.4, 42925.0], [87.5, 42955.0], [87.6, 43009.0], [87.7, 43048.0], [87.8, 43075.0], [87.9, 43079.0], [88.0, 43122.0], [88.1, 43168.0], [88.2, 43270.0], [88.3, 43272.0], [88.4, 43311.0], [88.5, 43357.0], [88.6, 43431.0], [88.7, 43543.0], [88.8, 43572.0], [88.9, 43642.0], [89.0, 43679.0], [89.1, 43757.0], [89.2, 43915.0], [89.3, 43985.0], [89.4, 44079.0], [89.5, 44159.0], [89.6, 44247.0], [89.7, 44309.0], [89.8, 44319.0], [89.9, 44335.0], [90.0, 44368.0], [90.1, 44381.0], [90.2, 44428.0], [90.3, 44456.0], [90.4, 44533.0], [90.5, 44537.0], [90.6, 44707.0], [90.7, 44749.0], [90.8, 44863.0], [90.9, 44908.0], [91.0, 44993.0], [91.1, 45097.0], [91.2, 45174.0], [91.3, 45247.0], [91.4, 45309.0], [91.5, 45450.0], [91.6, 45588.0], [91.7, 45648.0], [91.8, 45672.0], [91.9, 45700.0], [92.0, 45850.0], [92.1, 45984.0], [92.2, 46027.0], [92.3, 46099.0], [92.4, 46175.0], [92.5, 46285.0], [92.6, 46341.0], [92.7, 46396.0], [92.8, 46414.0], [92.9, 46445.0], [93.0, 46507.0], [93.1, 46671.0], [93.2, 46764.0], [93.3, 46784.0], [93.4, 46865.0], [93.5, 46909.0], [93.6, 46939.0], [93.7, 47010.0], [93.8, 47060.0], [93.9, 47335.0], [94.0, 47411.0], [94.1, 47609.0], [94.2, 47772.0], [94.3, 47823.0], [94.4, 47932.0], [94.5, 48159.0], [94.6, 48237.0], [94.7, 48359.0], [94.8, 48387.0], [94.9, 48401.0], [95.0, 48616.0], [95.1, 48672.0], [95.2, 48761.0], [95.3, 48955.0], [95.4, 49069.0], [95.5, 49134.0], [95.6, 49359.0], [95.7, 49417.0], [95.8, 49494.0], [95.9, 49555.0], [96.0, 49645.0], [96.1, 49792.0], [96.2, 49878.0], [96.3, 49963.0], [96.4, 50003.0], [96.5, 50220.0], [96.6, 50676.0], [96.7, 50955.0], [96.8, 51185.0], [96.9, 51421.0], [97.0, 51941.0], [97.1, 52325.0], [97.2, 52941.0], [97.3, 52989.0], [97.4, 53493.0], [97.5, 53622.0], [97.6, 53676.0], [97.7, 54295.0], [97.8, 54691.0], [97.9, 55286.0], [98.0, 55991.0], [98.1, 56367.0], [98.2, 56755.0], [98.3, 57666.0], [98.4, 58054.0], [98.5, 59252.0], [98.6, 59717.0], [98.7, 59767.0], [98.8, 61374.0], [98.9, 62157.0], [99.0, 63072.0], [99.1, 63268.0], [99.2, 63842.0], [99.3, 64220.0], [99.4, 65147.0], [99.5, 70696.0], [99.6, 71942.0], [99.7, 75442.0], [99.8, 76538.0], [99.9, 85531.0]], "isOverall": false, "label": "HTTP\u8BF7\u6C42", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 3500.0, "maxY": 16.0, "series": [{"data": [[34500.0, 14.0], [33700.0, 8.0], [32900.0, 9.0], [36100.0, 4.0], [35300.0, 6.0], [36900.0, 9.0], [38500.0, 9.0], [37700.0, 4.0], [39300.0, 1.0], [40900.0, 2.0], [40100.0, 5.0], [42500.0, 3.0], [41700.0, 2.0], [44900.0, 2.0], [44100.0, 2.0], [43300.0, 3.0], [45700.0, 2.0], [46500.0, 2.0], [47300.0, 2.0], [48900.0, 2.0], [48100.0, 1.0], [49700.0, 1.0], [51300.0, 1.0], [52900.0, 2.0], [53700.0, 1.0], [56100.0, 1.0], [64100.0, 1.0], [70600.0, 1.0], [75400.0, 1.0], [93000.0, 1.0], [3500.0, 1.0], [3800.0, 1.0], [4100.0, 1.0], [4300.0, 1.0], [71300.0, 1.0], [4800.0, 1.0], [4900.0, 1.0], [5500.0, 1.0], [5600.0, 1.0], [5700.0, 1.0], [5800.0, 1.0], [6300.0, 1.0], [6700.0, 1.0], [6900.0, 1.0], [7200.0, 1.0], [7700.0, 1.0], [8100.0, 1.0], [8400.0, 1.0], [8600.0, 1.0], [9000.0, 1.0], [11000.0, 1.0], [11400.0, 1.0], [12800.0, 1.0], [13000.0, 1.0], [14400.0, 2.0], [14600.0, 2.0], [14800.0, 1.0], [15400.0, 2.0], [16000.0, 2.0], [16200.0, 1.0], [16800.0, 1.0], [17200.0, 1.0], [17600.0, 6.0], [18000.0, 2.0], [18400.0, 1.0], [19200.0, 3.0], [20000.0, 2.0], [19600.0, 2.0], [20400.0, 4.0], [21200.0, 2.0], [20800.0, 3.0], [22000.0, 10.0], [21600.0, 3.0], [22400.0, 9.0], [23200.0, 6.0], [22800.0, 2.0], [24000.0, 10.0], [23600.0, 5.0], [24400.0, 5.0], [24800.0, 8.0], [25200.0, 7.0], [25600.0, 7.0], [26400.0, 5.0], [26000.0, 5.0], [27600.0, 6.0], [27200.0, 9.0], [26800.0, 8.0], [28000.0, 9.0], [28400.0, 8.0], [28800.0, 11.0], [29600.0, 7.0], [29200.0, 5.0], [30000.0, 8.0], [30400.0, 10.0], [31600.0, 5.0], [31200.0, 11.0], [30800.0, 7.0], [32000.0, 4.0], [32400.0, 9.0], [32800.0, 3.0], [33600.0, 9.0], [34400.0, 8.0], [36000.0, 11.0], [35200.0, 6.0], [36800.0, 5.0], [38400.0, 13.0], [37600.0, 3.0], [40000.0, 10.0], [40800.0, 7.0], [39200.0, 2.0], [41600.0, 6.0], [42400.0, 3.0], [44800.0, 3.0], [43200.0, 4.0], [44000.0, 3.0], [45600.0, 3.0], [46400.0, 4.0], [48800.0, 1.0], [49600.0, 2.0], [53600.0, 3.0], [55200.0, 1.0], [54400.0, 1.0], [59200.0, 1.0], [57600.0, 1.0], [63200.0, 1.0], [72000.0, 1.0], [71900.0, 1.0], [78300.0, 1.0], [33900.0, 14.0], [34700.0, 6.0], [33100.0, 8.0], [36300.0, 5.0], [35500.0, 2.0], [37900.0, 7.0], [38700.0, 7.0], [37100.0, 6.0], [39500.0, 4.0], [40300.0, 2.0], [42700.0, 4.0], [41900.0, 3.0], [41100.0, 4.0], [43500.0, 5.0], [44300.0, 8.0], [46700.0, 4.0], [45100.0, 2.0], [45900.0, 1.0], [49100.0, 1.0], [48300.0, 5.0], [47500.0, 1.0], [49900.0, 1.0], [52300.0, 1.0], [54700.0, 1.0], [56300.0, 1.0], [61900.0, 1.0], [65100.0, 1.0], [76500.0, 1.0], [16500.0, 2.0], [17300.0, 1.0], [16900.0, 1.0], [17700.0, 2.0], [18500.0, 1.0], [19300.0, 3.0], [18900.0, 3.0], [19700.0, 6.0], [20100.0, 3.0], [20500.0, 10.0], [21300.0, 1.0], [20900.0, 4.0], [21700.0, 3.0], [22100.0, 5.0], [22500.0, 3.0], [22900.0, 7.0], [23300.0, 4.0], [23700.0, 9.0], [24100.0, 9.0], [24500.0, 9.0], [25300.0, 11.0], [24900.0, 11.0], [25700.0, 9.0], [26500.0, 3.0], [26100.0, 4.0], [27300.0, 9.0], [26900.0, 4.0], [28100.0, 9.0], [27700.0, 12.0], [28500.0, 10.0], [29300.0, 8.0], [28900.0, 8.0], [30500.0, 9.0], [29700.0, 13.0], [30100.0, 1.0], [31700.0, 10.0], [31300.0, 4.0], [30900.0, 5.0], [32100.0, 9.0], [32500.0, 12.0], [33000.0, 10.0], [34600.0, 12.0], [33800.0, 8.0], [36200.0, 4.0], [35400.0, 5.0], [37800.0, 4.0], [38600.0, 4.0], [37000.0, 7.0], [39400.0, 5.0], [40200.0, 6.0], [42600.0, 3.0], [41000.0, 5.0], [41800.0, 1.0], [45000.0, 2.0], [44200.0, 2.0], [43400.0, 2.0], [46600.0, 1.0], [45800.0, 2.0], [48200.0, 1.0], [47400.0, 2.0], [49000.0, 1.0], [49800.0, 3.0], [50600.0, 3.0], [51400.0, 2.0], [52200.0, 1.0], [54600.0, 1.0], [63400.0, 1.0], [64200.0, 1.0], [34100.0, 9.0], [33300.0, 7.0], [34900.0, 9.0], [36500.0, 5.0], [35700.0, 8.0], [37300.0, 10.0], [38900.0, 11.0], [38100.0, 10.0], [40500.0, 5.0], [39700.0, 9.0], [42900.0, 4.0], [42100.0, 5.0], [41300.0, 4.0], [44500.0, 5.0], [43700.0, 2.0], [45300.0, 2.0], [46900.0, 4.0], [46100.0, 2.0], [47700.0, 3.0], [50900.0, 2.0], [49300.0, 2.0], [53300.0, 1.0], [57300.0, 1.0], [59700.0, 3.0], [61300.0, 1.0], [62100.0, 1.0], [65300.0, 1.0], [9900.0, 1.0], [10700.0, 1.0], [11100.0, 1.0], [11700.0, 2.0], [12500.0, 2.0], [12900.0, 1.0], [13500.0, 1.0], [13900.0, 2.0], [14700.0, 3.0], [15300.0, 2.0], [15500.0, 1.0], [15700.0, 1.0], [15900.0, 2.0], [16100.0, 1.0], [17000.0, 2.0], [16600.0, 1.0], [17400.0, 1.0], [18200.0, 2.0], [18600.0, 5.0], [19000.0, 2.0], [19400.0, 1.0], [20200.0, 2.0], [20600.0, 2.0], [21000.0, 2.0], [21400.0, 2.0], [22200.0, 8.0], [21800.0, 6.0], [22600.0, 6.0], [23000.0, 6.0], [23400.0, 9.0], [24200.0, 3.0], [23800.0, 7.0], [24600.0, 12.0], [25400.0, 3.0], [25000.0, 4.0], [26600.0, 11.0], [25800.0, 8.0], [26200.0, 7.0], [27400.0, 5.0], [27000.0, 10.0], [28600.0, 12.0], [27800.0, 11.0], [28200.0, 7.0], [29400.0, 12.0], [29000.0, 16.0], [29800.0, 14.0], [30600.0, 9.0], [30200.0, 8.0], [31400.0, 8.0], [31000.0, 9.0], [31800.0, 8.0], [32600.0, 6.0], [32200.0, 8.0], [33200.0, 11.0], [34000.0, 7.0], [34800.0, 7.0], [36400.0, 3.0], [35600.0, 6.0], [38000.0, 6.0], [37200.0, 7.0], [38800.0, 2.0], [40400.0, 4.0], [39600.0, 4.0], [42800.0, 5.0], [41200.0, 1.0], [42000.0, 1.0], [44400.0, 4.0], [43600.0, 3.0], [45200.0, 3.0], [46000.0, 4.0], [46800.0, 2.0], [48400.0, 2.0], [47600.0, 1.0], [50000.0, 2.0], [49200.0, 1.0], [52400.0, 1.0], [55600.0, 1.0], [58000.0, 3.0], [60400.0, 1.0], [59600.0, 1.0], [64400.0, 1.0], [85500.0, 1.0], [34300.0, 8.0], [33500.0, 6.0], [35900.0, 12.0], [36700.0, 5.0], [35100.0, 6.0], [37500.0, 6.0], [38300.0, 4.0], [39900.0, 4.0], [39100.0, 4.0], [40700.0, 3.0], [41500.0, 6.0], [42300.0, 6.0], [43900.0, 3.0], [43100.0, 4.0], [44700.0, 3.0], [46300.0, 3.0], [45500.0, 3.0], [47900.0, 3.0], [48700.0, 1.0], [49500.0, 3.0], [51100.0, 1.0], [51900.0, 1.0], [53500.0, 1.0], [56700.0, 1.0], [55900.0, 1.0], [75700.0, 1.0], [16700.0, 2.0], [17500.0, 4.0], [18300.0, 1.0], [17900.0, 1.0], [18700.0, 3.0], [19100.0, 1.0], [20300.0, 5.0], [19900.0, 5.0], [19500.0, 1.0], [21100.0, 2.0], [21500.0, 6.0], [20700.0, 2.0], [21900.0, 7.0], [22300.0, 5.0], [22700.0, 4.0], [23500.0, 7.0], [23100.0, 1.0], [24300.0, 8.0], [23900.0, 4.0], [25500.0, 4.0], [25100.0, 4.0], [24700.0, 8.0], [26300.0, 8.0], [25900.0, 8.0], [26700.0, 9.0], [27100.0, 8.0], [27500.0, 8.0], [27900.0, 15.0], [28300.0, 7.0], [28700.0, 4.0], [29100.0, 9.0], [29500.0, 13.0], [29900.0, 10.0], [30300.0, 6.0], [30700.0, 9.0], [31100.0, 9.0], [31500.0, 5.0], [32300.0, 10.0], [32700.0, 14.0], [31900.0, 6.0], [33400.0, 9.0], [34200.0, 12.0], [35000.0, 7.0], [36600.0, 14.0], [35800.0, 6.0], [38200.0, 9.0], [37400.0, 6.0], [39000.0, 7.0], [40600.0, 8.0], [39800.0, 7.0], [43000.0, 7.0], [41400.0, 2.0], [42200.0, 4.0], [47000.0, 3.0], [45400.0, 1.0], [46200.0, 3.0], [48600.0, 4.0], [47800.0, 1.0], [49400.0, 3.0], [50200.0, 1.0], [54200.0, 1.0], [53400.0, 1.0], [63000.0, 2.0], [63800.0, 1.0]], "isOverall": false, "label": "HTTP\u8BF7\u6C42", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 93000.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 1889.0, "minX": 2.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 1889.0, "series": [{"data": [], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 1889.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 2.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 68.489932885906, "minX": 1.63607532E12, "maxY": 100.0, "series": [{"data": [[1.63607532E12, 100.0], [1.6360758E12, 100.0], [1.6360755E12, 100.0], [1.63607544E12, 100.0], [1.63607592E12, 68.489932885906], [1.63607562E12, 100.0], [1.63607556E12, 100.0], [1.63607574E12, 100.0], [1.63607568E12, 100.0], [1.63607538E12, 100.0], [1.63607586E12, 100.0]], "isOverall": false, "label": "\u7EBF\u7A0B\u7EC4", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.63607592E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 16077.0, "minX": 4.0, "maxY": 58098.0, "series": [{"data": [[4.0, 43215.0], [5.0, 39855.0], [6.0, 41462.0], [7.0, 38245.0], [8.0, 49792.0], [9.0, 41180.0], [10.0, 31181.0], [11.0, 38447.0], [12.0, 31111.0], [13.0, 47411.0], [14.0, 49069.0], [15.0, 45672.0], [16.0, 33020.0], [17.0, 30174.0], [18.0, 32306.0], [19.0, 34883.0], [20.0, 34061.0], [21.0, 36829.0], [22.0, 46027.0], [23.0, 43572.0], [24.0, 34956.0], [25.0, 29281.0], [26.0, 31112.0], [27.0, 42955.0], [28.0, 43650.0], [29.0, 32739.0], [30.0, 44079.0], [31.0, 45850.0], [33.0, 41779.0], [35.0, 46821.0], [34.0, 26142.0], [37.0, 25706.0], [36.0, 28212.0], [39.0, 35212.0], [38.0, 26269.0], [41.0, 46932.0], [40.0, 36769.0], [43.0, 48955.0], [42.0, 37524.0], [45.0, 32428.0], [44.0, 29879.0], [47.0, 29464.0], [46.0, 22250.0], [49.0, 46507.0], [48.0, 33125.0], [51.0, 22437.0], [50.0, 30312.0], [53.0, 31666.0], [52.0, 18003.0], [55.0, 16944.0], [54.0, 21881.0], [57.0, 42410.0], [56.0, 16077.0], [59.0, 19248.0], [58.0, 17547.0], [61.0, 26685.0], [60.0, 40158.0], [63.0, 28580.0], [62.0, 43023.0], [67.0, 25622.0], [66.0, 23464.0], [65.0, 26023.0], [64.0, 46435.0], [71.0, 58098.0], [70.0, 40513.0], [69.0, 25797.0], [68.0, 22478.0], [75.0, 31322.0], [74.0, 36656.0], [73.0, 21783.0], [72.0, 36648.0], [79.0, 35956.0], [78.0, 18777.0], [77.0, 36041.0], [76.0, 38959.0], [83.0, 40981.0], [82.0, 36585.0], [81.0, 32739.0], [80.0, 18478.0], [87.0, 25860.0], [86.0, 29822.0], [85.0, 25309.0], [84.0, 28700.0], [91.0, 24783.0], [90.0, 47060.0], [89.0, 29610.0], [88.0, 35496.0], [95.0, 22569.0], [94.0, 26258.0], [93.0, 24658.0], [92.0, 25787.0], [99.0, 32783.0], [98.0, 32330.0], [97.0, 25827.0], [96.0, 22004.0], [100.0, 32528.31975446426]], "isOverall": false, "label": "HTTP\u8BF7\u6C42", "isController": false}, {"data": [[97.51455796717846, 32581.24722075169]], "isOverall": false, "label": "HTTP\u8BF7\u6C42-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 481.98333333333335, "minX": 1.63607532E12, "maxY": 90132.7, "series": [{"data": [[1.63607532E12, 58901.76666666667], [1.6360758E12, 84171.38333333333], [1.6360755E12, 87515.46666666666], [1.63607544E12, 87757.03333333334], [1.63607592E12, 72588.43333333333], [1.63607562E12, 87085.41666666667], [1.63607556E12, 87775.26666666666], [1.63607574E12, 87537.66666666667], [1.63607568E12, 88255.08333333333], [1.63607538E12, 88203.71666666666], [1.63607586E12, 90132.7]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.63607532E12, 481.98333333333335], [1.6360758E12, 689.1166666666667], [1.6360755E12, 717.0], [1.63607544E12, 717.0], [1.63607592E12, 593.5166666666667], [1.63607562E12, 713.0166666666667], [1.63607556E12, 717.0], [1.63607574E12, 717.0], [1.63607568E12, 720.9833333333333], [1.63607538E12, 720.9833333333333], [1.63607586E12, 736.9166666666666]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.63607592E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 21350.652892561982, "minX": 1.63607532E12, "maxY": 34764.35754189947, "series": [{"data": [[1.63607532E12, 21350.652892561982], [1.6360758E12, 34414.39884393063], [1.6360755E12, 33193.94999999999], [1.63607544E12, 33759.977777777785], [1.63607592E12, 33798.20805369128], [1.63607562E12, 34764.35754189947], [1.63607556E12, 31556.455555555545], [1.63607574E12, 32687.983333333355], [1.63607568E12, 33641.79005524861], [1.63607538E12, 33086.87845303867], [1.63607586E12, 32737.881081081094]], "isOverall": false, "label": "HTTP\u8BF7\u6C42", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.63607592E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 21344.404958677693, "minX": 1.63607532E12, "maxY": 34756.17877094972, "series": [{"data": [[1.63607532E12, 21344.404958677693], [1.6360758E12, 34405.79768786128], [1.6360755E12, 33186.72777777778], [1.63607544E12, 33752.333333333314], [1.63607592E12, 33788.29530201342], [1.63607562E12, 34756.17877094972], [1.63607556E12, 31547.772222222222], [1.63607574E12, 32679.572222222214], [1.63607568E12, 33633.8397790055], [1.63607538E12, 33078.762430939256], [1.63607586E12, 32728.2216216216]], "isOverall": false, "label": "HTTP\u8BF7\u6C42", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.63607592E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 6.472222222222224, "minX": 1.63607532E12, "maxY": 30.98347107438015, "series": [{"data": [[1.63607532E12, 30.98347107438015], [1.6360758E12, 7.387283236994221], [1.6360755E12, 6.472222222222224], [1.63607544E12, 7.572222222222221], [1.63607592E12, 6.671140939597315], [1.63607562E12, 6.620111731843575], [1.63607556E12, 6.82222222222222], [1.63607574E12, 6.67777777777778], [1.63607568E12, 6.535911602209942], [1.63607538E12, 7.364640883977903], [1.63607586E12, 7.297297297297297]], "isOverall": false, "label": "HTTP\u8BF7\u6C42", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.63607592E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 3582.0, "minX": 1.63607532E12, "maxY": 93093.0, "series": [{"data": [[1.63607532E12, 39485.0], [1.6360758E12, 60493.0], [1.6360755E12, 57347.0], [1.63607544E12, 78366.0], [1.63607592E12, 58098.0], [1.63607562E12, 93093.0], [1.63607556E12, 71399.0], [1.63607574E12, 54691.0], [1.63607568E12, 62157.0], [1.63607538E12, 51320.0], [1.63607586E12, 63842.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.63607532E12, 3582.0], [1.6360758E12, 17247.0], [1.6360755E12, 17699.0], [1.63607544E12, 15784.0], [1.63607592E12, 16077.0], [1.63607562E12, 16820.0], [1.63607556E12, 13044.0], [1.63607574E12, 14755.0], [1.63607568E12, 18977.0], [1.63607538E12, 14644.0], [1.63607586E12, 12594.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.63607532E12, 33377.2], [1.6360758E12, 46877.0], [1.6360755E12, 42770.4], [1.63607544E12, 45101.5], [1.63607592E12, 46027.0], [1.63607562E12, 54295.0], [1.63607556E12, 43594.600000000006], [1.63607574E12, 44839.0], [1.63607568E12, 45071.4], [1.63607538E12, 44336.200000000004], [1.63607586E12, 43216.0]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.63607532E12, 39134.76], [1.6360758E12, 59888.41999999999], [1.6360755E12, 54335.41999999999], [1.63607544E12, 76281.87], [1.63607592E12, 56289.0], [1.63607562E12, 87043.3999999999], [1.63607556E12, 60589.54999999997], [1.63607574E12, 53273.49999999999], [1.63607568E12, 60197.20000000002], [1.63607538E12, 49803.000000000015], [1.63607586E12, 63485.95999999999]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.63607532E12, 35995.59999999999], [1.6360758E12, 52620.09999999998], [1.6360755E12, 46304.39999999998], [1.63607544E12, 49490.15], [1.63607592E12, 47974.5], [1.63607562E12, 64129.0], [1.63607556E12, 49947.1], [1.63607574E12, 47319.799999999996], [1.63607568E12, 48643.5], [1.63607538E12, 46778.4], [1.63607586E12, 47317.499999999985]], "isOverall": false, "label": "95th percentile", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.63607592E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 26710.0, "minX": 1.0, "maxY": 38180.5, "series": [{"data": [[4.0, 31598.5], [2.0, 32200.5], [1.0, 38180.5], [8.0, 26710.0], [5.0, 34184.5], [21.0, 36644.0], [3.0, 31421.5], [6.0, 32265.5], [7.0, 36259.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 21.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 26704.0, "minX": 1.0, "maxY": 38173.0, "series": [{"data": [[4.0, 31587.5], [2.0, 32192.5], [1.0, 38173.0], [8.0, 26704.0], [5.0, 34174.0], [21.0, 36638.0], [3.0, 31412.5], [6.0, 32257.0], [7.0, 36244.5]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 21.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 0.8333333333333334, "minX": 1.63607532E12, "maxY": 3.683333333333333, "series": [{"data": [[1.63607532E12, 3.683333333333333], [1.6360758E12, 2.8833333333333333], [1.6360755E12, 3.0], [1.63607544E12, 3.0], [1.63607592E12, 0.8333333333333334], [1.63607562E12, 2.9833333333333334], [1.63607556E12, 3.0], [1.63607574E12, 3.0], [1.63607568E12, 3.0166666666666666], [1.63607538E12, 3.0166666666666666], [1.63607586E12, 3.066666666666667]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.63607592E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 2.0166666666666666, "minX": 1.63607532E12, "maxY": 3.0833333333333335, "series": [{"data": [[1.63607532E12, 2.0166666666666666], [1.6360758E12, 2.8833333333333333], [1.6360755E12, 3.0], [1.63607544E12, 3.0], [1.63607592E12, 2.4833333333333334], [1.63607562E12, 2.9833333333333334], [1.63607556E12, 3.0], [1.63607574E12, 3.0], [1.63607568E12, 3.0166666666666666], [1.63607538E12, 3.0166666666666666], [1.63607586E12, 3.0833333333333335]], "isOverall": false, "label": "200", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.63607592E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 2.0166666666666666, "minX": 1.63607532E12, "maxY": 3.0833333333333335, "series": [{"data": [[1.63607532E12, 2.0166666666666666], [1.6360758E12, 2.8833333333333333], [1.6360755E12, 3.0], [1.63607544E12, 3.0], [1.63607592E12, 2.4833333333333334], [1.63607562E12, 2.9833333333333334], [1.63607556E12, 3.0], [1.63607574E12, 3.0], [1.63607568E12, 3.0166666666666666], [1.63607538E12, 3.0166666666666666], [1.63607586E12, 3.0833333333333335]], "isOverall": false, "label": "HTTP\u8BF7\u6C42-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.63607592E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 2.0166666666666666, "minX": 1.63607532E12, "maxY": 3.0833333333333335, "series": [{"data": [[1.63607532E12, 2.0166666666666666], [1.6360758E12, 2.8833333333333333], [1.6360755E12, 3.0], [1.63607544E12, 3.0], [1.63607592E12, 2.4833333333333334], [1.63607562E12, 2.9833333333333334], [1.63607556E12, 3.0], [1.63607574E12, 3.0], [1.63607568E12, 3.0166666666666666], [1.63607538E12, 3.0166666666666666], [1.63607586E12, 3.0833333333333335]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.63607592E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

