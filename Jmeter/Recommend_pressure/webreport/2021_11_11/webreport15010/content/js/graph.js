/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 6174.0, "minX": 0.0, "maxY": 120029.0, "series": [{"data": [[0.0, 6174.0], [0.1, 6491.0], [0.2, 7913.0], [0.3, 8862.0], [0.4, 9597.0], [0.5, 9614.0], [0.6, 9787.0], [0.7, 10505.0], [0.8, 10858.0], [0.9, 11655.0], [1.0, 11672.0], [1.1, 11840.0], [1.2, 12609.0], [1.3, 13032.0], [1.4, 13646.0], [1.5, 14038.0], [1.6, 15051.0], [1.7, 15457.0], [1.8, 15633.0], [1.9, 16595.0], [2.0, 16755.0], [2.1, 16785.0], [2.2, 17130.0], [2.3, 17238.0], [2.4, 17450.0], [2.5, 17731.0], [2.6, 17936.0], [2.7, 18389.0], [2.8, 18905.0], [2.9, 19228.0], [3.0, 19276.0], [3.1, 19840.0], [3.2, 19867.0], [3.3, 20218.0], [3.4, 20421.0], [3.5, 20966.0], [3.6, 21273.0], [3.7, 22092.0], [3.8, 22554.0], [3.9, 22626.0], [4.0, 22960.0], [4.1, 23089.0], [4.2, 23224.0], [4.3, 23361.0], [4.4, 23487.0], [4.5, 23685.0], [4.6, 23918.0], [4.7, 23960.0], [4.8, 24158.0], [4.9, 24230.0], [5.0, 24301.0], [5.1, 24410.0], [5.2, 24600.0], [5.3, 24635.0], [5.4, 24747.0], [5.5, 24959.0], [5.6, 24998.0], [5.7, 25458.0], [5.8, 25537.0], [5.9, 25657.0], [6.0, 25990.0], [6.1, 26419.0], [6.2, 26593.0], [6.3, 26651.0], [6.4, 26682.0], [6.5, 26728.0], [6.6, 26752.0], [6.7, 26762.0], [6.8, 26951.0], [6.9, 27030.0], [7.0, 27088.0], [7.1, 27186.0], [7.2, 27338.0], [7.3, 27474.0], [7.4, 27563.0], [7.5, 27718.0], [7.6, 27889.0], [7.7, 27898.0], [7.8, 27906.0], [7.9, 28390.0], [8.0, 28476.0], [8.1, 28544.0], [8.2, 28597.0], [8.3, 28661.0], [8.4, 28806.0], [8.5, 28819.0], [8.6, 28850.0], [8.7, 28915.0], [8.8, 29021.0], [8.9, 29068.0], [9.0, 29201.0], [9.1, 29258.0], [9.2, 29374.0], [9.3, 29457.0], [9.4, 29493.0], [9.5, 29623.0], [9.6, 29649.0], [9.7, 29771.0], [9.8, 29791.0], [9.9, 29987.0], [10.0, 30074.0], [10.1, 30111.0], [10.2, 30140.0], [10.3, 30167.0], [10.4, 30525.0], [10.5, 30601.0], [10.6, 30681.0], [10.7, 30884.0], [10.8, 30952.0], [10.9, 31048.0], [11.0, 31058.0], [11.1, 31060.0], [11.2, 31135.0], [11.3, 31333.0], [11.4, 31423.0], [11.5, 31481.0], [11.6, 31563.0], [11.7, 31582.0], [11.8, 31707.0], [11.9, 31715.0], [12.0, 31738.0], [12.1, 31834.0], [12.2, 31920.0], [12.3, 31937.0], [12.4, 31954.0], [12.5, 32034.0], [12.6, 32121.0], [12.7, 32185.0], [12.8, 32211.0], [12.9, 32287.0], [13.0, 32302.0], [13.1, 32516.0], [13.2, 32571.0], [13.3, 32625.0], [13.4, 32782.0], [13.5, 32838.0], [13.6, 32841.0], [13.7, 33017.0], [13.8, 33057.0], [13.9, 33180.0], [14.0, 33207.0], [14.1, 33256.0], [14.2, 33285.0], [14.3, 33348.0], [14.4, 33366.0], [14.5, 33399.0], [14.6, 33442.0], [14.7, 33495.0], [14.8, 33519.0], [14.9, 33531.0], [15.0, 33589.0], [15.1, 33682.0], [15.2, 33842.0], [15.3, 33868.0], [15.4, 33912.0], [15.5, 34001.0], [15.6, 34036.0], [15.7, 34040.0], [15.8, 34048.0], [15.9, 34151.0], [16.0, 34161.0], [16.1, 34196.0], [16.2, 34214.0], [16.3, 34260.0], [16.4, 34283.0], [16.5, 34399.0], [16.6, 34400.0], [16.7, 34502.0], [16.8, 34609.0], [16.9, 34658.0], [17.0, 34674.0], [17.1, 34714.0], [17.2, 34786.0], [17.3, 34940.0], [17.4, 34970.0], [17.5, 35060.0], [17.6, 35162.0], [17.7, 35236.0], [17.8, 35354.0], [17.9, 35464.0], [18.0, 35523.0], [18.1, 35613.0], [18.2, 35754.0], [18.3, 35765.0], [18.4, 35818.0], [18.5, 35839.0], [18.6, 35948.0], [18.7, 35955.0], [18.8, 35986.0], [18.9, 36042.0], [19.0, 36112.0], [19.1, 36121.0], [19.2, 36129.0], [19.3, 36185.0], [19.4, 36212.0], [19.5, 36245.0], [19.6, 36332.0], [19.7, 36450.0], [19.8, 36516.0], [19.9, 36590.0], [20.0, 36596.0], [20.1, 36638.0], [20.2, 36655.0], [20.3, 36677.0], [20.4, 36682.0], [20.5, 36717.0], [20.6, 36843.0], [20.7, 36862.0], [20.8, 36893.0], [20.9, 36944.0], [21.0, 36967.0], [21.1, 36995.0], [21.2, 37038.0], [21.3, 37061.0], [21.4, 37079.0], [21.5, 37091.0], [21.6, 37128.0], [21.7, 37136.0], [21.8, 37198.0], [21.9, 37296.0], [22.0, 37335.0], [22.1, 37352.0], [22.2, 37414.0], [22.3, 37447.0], [22.4, 37492.0], [22.5, 37513.0], [22.6, 37612.0], [22.7, 37671.0], [22.8, 37688.0], [22.9, 37700.0], [23.0, 37771.0], [23.1, 37801.0], [23.2, 37852.0], [23.3, 37931.0], [23.4, 37948.0], [23.5, 37974.0], [23.6, 37986.0], [23.7, 38042.0], [23.8, 38136.0], [23.9, 38195.0], [24.0, 38223.0], [24.1, 38270.0], [24.2, 38311.0], [24.3, 38363.0], [24.4, 38556.0], [24.5, 38687.0], [24.6, 38749.0], [24.7, 38882.0], [24.8, 38945.0], [24.9, 39021.0], [25.0, 39056.0], [25.1, 39096.0], [25.2, 39141.0], [25.3, 39181.0], [25.4, 39254.0], [25.5, 39277.0], [25.6, 39294.0], [25.7, 39365.0], [25.8, 39467.0], [25.9, 39473.0], [26.0, 39674.0], [26.1, 39728.0], [26.2, 39806.0], [26.3, 39824.0], [26.4, 39857.0], [26.5, 39909.0], [26.6, 39933.0], [26.7, 39947.0], [26.8, 39948.0], [26.9, 39999.0], [27.0, 40117.0], [27.1, 40148.0], [27.2, 40156.0], [27.3, 40202.0], [27.4, 40243.0], [27.5, 40302.0], [27.6, 40320.0], [27.7, 40332.0], [27.8, 40382.0], [27.9, 40433.0], [28.0, 40434.0], [28.1, 40454.0], [28.2, 40503.0], [28.3, 40593.0], [28.4, 40604.0], [28.5, 40747.0], [28.6, 40779.0], [28.7, 40783.0], [28.8, 40843.0], [28.9, 40925.0], [29.0, 40989.0], [29.1, 40999.0], [29.2, 41028.0], [29.3, 41033.0], [29.4, 41078.0], [29.5, 41106.0], [29.6, 41160.0], [29.7, 41202.0], [29.8, 41239.0], [29.9, 41299.0], [30.0, 41394.0], [30.1, 41426.0], [30.2, 41445.0], [30.3, 41499.0], [30.4, 41524.0], [30.5, 41585.0], [30.6, 41589.0], [30.7, 41672.0], [30.8, 41717.0], [30.9, 41821.0], [31.0, 41922.0], [31.1, 41992.0], [31.2, 41999.0], [31.3, 42018.0], [31.4, 42055.0], [31.5, 42074.0], [31.6, 42124.0], [31.7, 42169.0], [31.8, 42189.0], [31.9, 42200.0], [32.0, 42273.0], [32.1, 42382.0], [32.2, 42420.0], [32.3, 42438.0], [32.4, 42494.0], [32.5, 42558.0], [32.6, 42659.0], [32.7, 42769.0], [32.8, 42846.0], [32.9, 42864.0], [33.0, 42909.0], [33.1, 42957.0], [33.2, 42991.0], [33.3, 43060.0], [33.4, 43099.0], [33.5, 43118.0], [33.6, 43154.0], [33.7, 43233.0], [33.8, 43419.0], [33.9, 43423.0], [34.0, 43502.0], [34.1, 43555.0], [34.2, 43591.0], [34.3, 43605.0], [34.4, 43646.0], [34.5, 43663.0], [34.6, 43724.0], [34.7, 43798.0], [34.8, 43813.0], [34.9, 43855.0], [35.0, 43872.0], [35.1, 43889.0], [35.2, 43911.0], [35.3, 43991.0], [35.4, 44024.0], [35.5, 44199.0], [35.6, 44199.0], [35.7, 44247.0], [35.8, 44283.0], [35.9, 44321.0], [36.0, 44430.0], [36.1, 44454.0], [36.2, 44478.0], [36.3, 44485.0], [36.4, 44634.0], [36.5, 44651.0], [36.6, 44738.0], [36.7, 44816.0], [36.8, 44847.0], [36.9, 44870.0], [37.0, 45011.0], [37.1, 45095.0], [37.2, 45170.0], [37.3, 45183.0], [37.4, 45237.0], [37.5, 45340.0], [37.6, 45362.0], [37.7, 45411.0], [37.8, 45414.0], [37.9, 45450.0], [38.0, 45562.0], [38.1, 45617.0], [38.2, 45620.0], [38.3, 45645.0], [38.4, 45663.0], [38.5, 45791.0], [38.6, 45801.0], [38.7, 45863.0], [38.8, 45973.0], [38.9, 46040.0], [39.0, 46125.0], [39.1, 46170.0], [39.2, 46202.0], [39.3, 46226.0], [39.4, 46265.0], [39.5, 46287.0], [39.6, 46341.0], [39.7, 46365.0], [39.8, 46397.0], [39.9, 46430.0], [40.0, 46487.0], [40.1, 46557.0], [40.2, 46727.0], [40.3, 46779.0], [40.4, 46872.0], [40.5, 46941.0], [40.6, 46953.0], [40.7, 46961.0], [40.8, 46999.0], [40.9, 47062.0], [41.0, 47086.0], [41.1, 47116.0], [41.2, 47128.0], [41.3, 47152.0], [41.4, 47194.0], [41.5, 47220.0], [41.6, 47252.0], [41.7, 47266.0], [41.8, 47323.0], [41.9, 47345.0], [42.0, 47387.0], [42.1, 47447.0], [42.2, 47542.0], [42.3, 47554.0], [42.4, 47613.0], [42.5, 47657.0], [42.6, 47680.0], [42.7, 47761.0], [42.8, 47770.0], [42.9, 47782.0], [43.0, 47846.0], [43.1, 47910.0], [43.2, 47949.0], [43.3, 48016.0], [43.4, 48085.0], [43.5, 48227.0], [43.6, 48244.0], [43.7, 48251.0], [43.8, 48274.0], [43.9, 48303.0], [44.0, 48351.0], [44.1, 48385.0], [44.2, 48409.0], [44.3, 48480.0], [44.4, 48545.0], [44.5, 48556.0], [44.6, 48609.0], [44.7, 48627.0], [44.8, 48647.0], [44.9, 48725.0], [45.0, 48751.0], [45.1, 48840.0], [45.2, 48903.0], [45.3, 49010.0], [45.4, 49019.0], [45.5, 49188.0], [45.6, 49212.0], [45.7, 49248.0], [45.8, 49255.0], [45.9, 49294.0], [46.0, 49308.0], [46.1, 49379.0], [46.2, 49436.0], [46.3, 49480.0], [46.4, 49513.0], [46.5, 49541.0], [46.6, 49574.0], [46.7, 49601.0], [46.8, 49627.0], [46.9, 49640.0], [47.0, 49705.0], [47.1, 49707.0], [47.2, 49727.0], [47.3, 49762.0], [47.4, 49784.0], [47.5, 49792.0], [47.6, 49813.0], [47.7, 49873.0], [47.8, 49886.0], [47.9, 49904.0], [48.0, 49929.0], [48.1, 49994.0], [48.2, 50029.0], [48.3, 50047.0], [48.4, 50060.0], [48.5, 50114.0], [48.6, 50131.0], [48.7, 50156.0], [48.8, 50167.0], [48.9, 50265.0], [49.0, 50304.0], [49.1, 50324.0], [49.2, 50364.0], [49.3, 50411.0], [49.4, 50444.0], [49.5, 50486.0], [49.6, 50532.0], [49.7, 50576.0], [49.8, 50611.0], [49.9, 50674.0], [50.0, 50693.0], [50.1, 50759.0], [50.2, 50794.0], [50.3, 50817.0], [50.4, 50839.0], [50.5, 50846.0], [50.6, 50880.0], [50.7, 50939.0], [50.8, 50996.0], [50.9, 51022.0], [51.0, 51088.0], [51.1, 51107.0], [51.2, 51190.0], [51.3, 51202.0], [51.4, 51240.0], [51.5, 51333.0], [51.6, 51343.0], [51.7, 51356.0], [51.8, 51437.0], [51.9, 51475.0], [52.0, 51540.0], [52.1, 51595.0], [52.2, 51608.0], [52.3, 51646.0], [52.4, 51688.0], [52.5, 51730.0], [52.6, 51753.0], [52.7, 51816.0], [52.8, 51873.0], [52.9, 51926.0], [53.0, 51957.0], [53.1, 52017.0], [53.2, 52091.0], [53.3, 52116.0], [53.4, 52192.0], [53.5, 52244.0], [53.6, 52271.0], [53.7, 52370.0], [53.8, 52394.0], [53.9, 52401.0], [54.0, 52494.0], [54.1, 52564.0], [54.2, 52595.0], [54.3, 52597.0], [54.4, 52692.0], [54.5, 52725.0], [54.6, 52756.0], [54.7, 52758.0], [54.8, 52805.0], [54.9, 52846.0], [55.0, 52910.0], [55.1, 52936.0], [55.2, 53032.0], [55.3, 53074.0], [55.4, 53156.0], [55.5, 53168.0], [55.6, 53196.0], [55.7, 53314.0], [55.8, 53499.0], [55.9, 53512.0], [56.0, 53513.0], [56.1, 53533.0], [56.2, 53579.0], [56.3, 53631.0], [56.4, 53635.0], [56.5, 53678.0], [56.6, 53742.0], [56.7, 53836.0], [56.8, 53925.0], [56.9, 53971.0], [57.0, 54081.0], [57.1, 54114.0], [57.2, 54170.0], [57.3, 54193.0], [57.4, 54267.0], [57.5, 54293.0], [57.6, 54346.0], [57.7, 54374.0], [57.8, 54416.0], [57.9, 54496.0], [58.0, 54557.0], [58.1, 54558.0], [58.2, 54592.0], [58.3, 54647.0], [58.4, 54676.0], [58.5, 54718.0], [58.6, 54739.0], [58.7, 54745.0], [58.8, 54876.0], [58.9, 54885.0], [59.0, 54905.0], [59.1, 54956.0], [59.2, 55021.0], [59.3, 55050.0], [59.4, 55066.0], [59.5, 55119.0], [59.6, 55185.0], [59.7, 55289.0], [59.8, 55306.0], [59.9, 55329.0], [60.0, 55365.0], [60.1, 55440.0], [60.2, 55528.0], [60.3, 55612.0], [60.4, 55667.0], [60.5, 55671.0], [60.6, 55765.0], [60.7, 55788.0], [60.8, 55868.0], [60.9, 55955.0], [61.0, 56073.0], [61.1, 56086.0], [61.2, 56123.0], [61.3, 56171.0], [61.4, 56194.0], [61.5, 56256.0], [61.6, 56341.0], [61.7, 56432.0], [61.8, 56486.0], [61.9, 56497.0], [62.0, 56661.0], [62.1, 56697.0], [62.2, 56708.0], [62.3, 56752.0], [62.4, 56867.0], [62.5, 56916.0], [62.6, 56928.0], [62.7, 57037.0], [62.8, 57057.0], [62.9, 57154.0], [63.0, 57183.0], [63.1, 57249.0], [63.2, 57304.0], [63.3, 57359.0], [63.4, 57393.0], [63.5, 57414.0], [63.6, 57478.0], [63.7, 57527.0], [63.8, 57550.0], [63.9, 57595.0], [64.0, 57605.0], [64.1, 57689.0], [64.2, 57773.0], [64.3, 57874.0], [64.4, 57946.0], [64.5, 57978.0], [64.6, 58005.0], [64.7, 58097.0], [64.8, 58185.0], [64.9, 58233.0], [65.0, 58265.0], [65.1, 58325.0], [65.2, 58362.0], [65.3, 58387.0], [65.4, 58397.0], [65.5, 58551.0], [65.6, 58699.0], [65.7, 58705.0], [65.8, 58800.0], [65.9, 58868.0], [66.0, 58899.0], [66.1, 58917.0], [66.2, 58939.0], [66.3, 58988.0], [66.4, 59065.0], [66.5, 59090.0], [66.6, 59097.0], [66.7, 59132.0], [66.8, 59205.0], [66.9, 59240.0], [67.0, 59240.0], [67.1, 59282.0], [67.2, 59380.0], [67.3, 59442.0], [67.4, 59465.0], [67.5, 59489.0], [67.6, 59550.0], [67.7, 59569.0], [67.8, 59595.0], [67.9, 59642.0], [68.0, 59731.0], [68.1, 59782.0], [68.2, 59851.0], [68.3, 59852.0], [68.4, 59956.0], [68.5, 60033.0], [68.6, 60157.0], [68.7, 60278.0], [68.8, 60291.0], [68.9, 60372.0], [69.0, 60388.0], [69.1, 60406.0], [69.2, 60420.0], [69.3, 60480.0], [69.4, 60542.0], [69.5, 60577.0], [69.6, 60639.0], [69.7, 60738.0], [69.8, 60844.0], [69.9, 60887.0], [70.0, 60889.0], [70.1, 60920.0], [70.2, 60992.0], [70.3, 61049.0], [70.4, 61088.0], [70.5, 61136.0], [70.6, 61177.0], [70.7, 61209.0], [70.8, 61269.0], [70.9, 61300.0], [71.0, 61342.0], [71.1, 61412.0], [71.2, 61433.0], [71.3, 61443.0], [71.4, 61510.0], [71.5, 61534.0], [71.6, 61552.0], [71.7, 61554.0], [71.8, 61597.0], [71.9, 61624.0], [72.0, 61645.0], [72.1, 61650.0], [72.2, 61797.0], [72.3, 62010.0], [72.4, 62119.0], [72.5, 62119.0], [72.6, 62189.0], [72.7, 62229.0], [72.8, 62308.0], [72.9, 62331.0], [73.0, 62380.0], [73.1, 62441.0], [73.2, 62451.0], [73.3, 62480.0], [73.4, 62504.0], [73.5, 62539.0], [73.6, 62593.0], [73.7, 62680.0], [73.8, 62711.0], [73.9, 62748.0], [74.0, 62837.0], [74.1, 62904.0], [74.2, 62920.0], [74.3, 63107.0], [74.4, 63188.0], [74.5, 63291.0], [74.6, 63379.0], [74.7, 63503.0], [74.8, 63539.0], [74.9, 63558.0], [75.0, 63602.0], [75.1, 63615.0], [75.2, 63679.0], [75.3, 63763.0], [75.4, 63878.0], [75.5, 63908.0], [75.6, 64046.0], [75.7, 64083.0], [75.8, 64227.0], [75.9, 64228.0], [76.0, 64296.0], [76.1, 64381.0], [76.2, 64410.0], [76.3, 64412.0], [76.4, 64440.0], [76.5, 64525.0], [76.6, 64624.0], [76.7, 64688.0], [76.8, 64791.0], [76.9, 64829.0], [77.0, 64879.0], [77.1, 64922.0], [77.2, 65051.0], [77.3, 65132.0], [77.4, 65162.0], [77.5, 65309.0], [77.6, 65309.0], [77.7, 65424.0], [77.8, 65452.0], [77.9, 65492.0], [78.0, 65613.0], [78.1, 65720.0], [78.2, 65797.0], [78.3, 65864.0], [78.4, 65919.0], [78.5, 66089.0], [78.6, 66187.0], [78.7, 66193.0], [78.8, 66323.0], [78.9, 66433.0], [79.0, 66608.0], [79.1, 66846.0], [79.2, 66964.0], [79.3, 66986.0], [79.4, 67122.0], [79.5, 67156.0], [79.6, 67213.0], [79.7, 67283.0], [79.8, 67373.0], [79.9, 67424.0], [80.0, 67529.0], [80.1, 67561.0], [80.2, 67585.0], [80.3, 67647.0], [80.4, 67704.0], [80.5, 67748.0], [80.6, 67750.0], [80.7, 67781.0], [80.8, 67988.0], [80.9, 68023.0], [81.0, 68133.0], [81.1, 68305.0], [81.2, 68506.0], [81.3, 68660.0], [81.4, 68747.0], [81.5, 68798.0], [81.6, 69016.0], [81.7, 69069.0], [81.8, 69095.0], [81.9, 69317.0], [82.0, 69384.0], [82.1, 69429.0], [82.2, 69492.0], [82.3, 69519.0], [82.4, 69626.0], [82.5, 69988.0], [82.6, 70028.0], [82.7, 70089.0], [82.8, 70164.0], [82.9, 70199.0], [83.0, 70290.0], [83.1, 70348.0], [83.2, 70400.0], [83.3, 70505.0], [83.4, 70542.0], [83.5, 70572.0], [83.6, 70607.0], [83.7, 70654.0], [83.8, 70895.0], [83.9, 70971.0], [84.0, 71156.0], [84.1, 71241.0], [84.2, 71245.0], [84.3, 71398.0], [84.4, 71415.0], [84.5, 71479.0], [84.6, 71517.0], [84.7, 71551.0], [84.8, 71616.0], [84.9, 71764.0], [85.0, 71834.0], [85.1, 72129.0], [85.2, 72345.0], [85.3, 72361.0], [85.4, 72435.0], [85.5, 72468.0], [85.6, 72476.0], [85.7, 72525.0], [85.8, 72650.0], [85.9, 72716.0], [86.0, 72863.0], [86.1, 72941.0], [86.2, 73014.0], [86.3, 73147.0], [86.4, 73255.0], [86.5, 73391.0], [86.6, 73532.0], [86.7, 73571.0], [86.8, 73594.0], [86.9, 73647.0], [87.0, 73738.0], [87.1, 73933.0], [87.2, 73975.0], [87.3, 74027.0], [87.4, 74181.0], [87.5, 74351.0], [87.6, 74401.0], [87.7, 74541.0], [87.8, 74616.0], [87.9, 74730.0], [88.0, 74834.0], [88.1, 75023.0], [88.2, 75077.0], [88.3, 75301.0], [88.4, 75390.0], [88.5, 75979.0], [88.6, 76023.0], [88.7, 76528.0], [88.8, 76575.0], [88.9, 76953.0], [89.0, 76967.0], [89.1, 77117.0], [89.2, 77169.0], [89.3, 77213.0], [89.4, 77384.0], [89.5, 77467.0], [89.6, 77499.0], [89.7, 77635.0], [89.8, 77712.0], [89.9, 77748.0], [90.0, 77877.0], [90.1, 78076.0], [90.2, 78486.0], [90.3, 78700.0], [90.4, 78810.0], [90.5, 79042.0], [90.6, 79194.0], [90.7, 79284.0], [90.8, 79401.0], [90.9, 79512.0], [91.0, 79706.0], [91.1, 80059.0], [91.2, 80071.0], [91.3, 80209.0], [91.4, 80308.0], [91.5, 80512.0], [91.6, 80587.0], [91.7, 80716.0], [91.8, 80966.0], [91.9, 81102.0], [92.0, 81738.0], [92.1, 81914.0], [92.2, 81953.0], [92.3, 82610.0], [92.4, 82644.0], [92.5, 82945.0], [92.6, 83007.0], [92.7, 83451.0], [92.8, 83487.0], [92.9, 83749.0], [93.0, 83979.0], [93.1, 84176.0], [93.2, 84426.0], [93.3, 84556.0], [93.4, 84752.0], [93.5, 85234.0], [93.6, 86051.0], [93.7, 86788.0], [93.8, 86952.0], [93.9, 87256.0], [94.0, 88280.0], [94.1, 88410.0], [94.2, 89237.0], [94.3, 89631.0], [94.4, 90198.0], [94.5, 90224.0], [94.6, 91201.0], [94.7, 91364.0], [94.8, 91703.0], [94.9, 91919.0], [95.0, 91963.0], [95.1, 92425.0], [95.2, 92844.0], [95.3, 93140.0], [95.4, 93159.0], [95.5, 93574.0], [95.6, 93974.0], [95.7, 94859.0], [95.8, 94878.0], [95.9, 95000.0], [96.0, 95301.0], [96.1, 95800.0], [96.2, 96380.0], [96.3, 96625.0], [96.4, 97120.0], [96.5, 98881.0], [96.6, 99870.0], [96.7, 100145.0], [96.8, 100393.0], [96.9, 101573.0], [97.0, 102268.0], [97.1, 102489.0], [97.2, 102718.0], [97.3, 103254.0], [97.4, 103701.0], [97.5, 104489.0], [97.6, 105481.0], [97.7, 106112.0], [97.8, 107678.0], [97.9, 107916.0], [98.0, 108620.0], [98.1, 109436.0], [98.2, 109912.0], [98.3, 110625.0], [98.4, 112641.0], [98.5, 113400.0], [98.6, 114395.0], [98.7, 116508.0], [98.8, 116543.0], [98.9, 118515.0], [99.0, 119223.0], [99.1, 120009.0], [99.2, 120011.0], [99.3, 120011.0], [99.4, 120012.0], [99.5, 120012.0], [99.6, 120012.0], [99.7, 120013.0], [99.8, 120014.0], [99.9, 120018.0], [100.0, 120029.0]], "isOverall": false, "label": "HTTP\u8BF7\u6C42", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 6100.0, "maxY": 16.0, "series": [{"data": [[68300.0, 2.0], [66700.0, 1.0], [71500.0, 3.0], [69900.0, 2.0], [73100.0, 3.0], [74700.0, 2.0], [81100.0, 1.0], [79500.0, 2.0], [77900.0, 1.0], [93900.0, 1.0], [97100.0, 2.0], [100300.0, 2.0], [109900.0, 1.0], [33700.0, 1.0], [34500.0, 1.0], [36100.0, 7.0], [35300.0, 2.0], [38500.0, 2.0], [36900.0, 6.0], [37700.0, 4.0], [40100.0, 5.0], [39300.0, 3.0], [40900.0, 5.0], [41700.0, 3.0], [42500.0, 3.0], [44100.0, 2.0], [44900.0, 1.0], [43300.0, 1.0], [46500.0, 2.0], [45700.0, 2.0], [47300.0, 5.0], [48900.0, 2.0], [48100.0, 1.0], [49700.0, 10.0], [50500.0, 4.0], [51300.0, 5.0], [52900.0, 3.0], [52100.0, 2.0], [53700.0, 3.0], [54500.0, 5.0], [56900.0, 4.0], [55300.0, 5.0], [56100.0, 6.0], [59300.0, 3.0], [57700.0, 2.0], [58500.0, 1.0], [60900.0, 4.0], [60100.0, 2.0], [62500.0, 5.0], [61700.0, 1.0], [63300.0, 1.0], [64900.0, 2.0], [64100.0, 1.0], [67400.0, 3.0], [69000.0, 4.0], [65800.0, 2.0], [70600.0, 3.0], [73800.0, 1.0], [80200.0, 2.0], [83400.0, 2.0], [88200.0, 1.0], [89800.0, 1.0], [97800.0, 1.0], [99400.0, 1.0], [110600.0, 1.0], [68100.0, 2.0], [71300.0, 1.0], [72900.0, 2.0], [77700.0, 2.0], [74500.0, 1.0], [80900.0, 2.0], [79300.0, 1.0], [84100.0, 2.0], [85700.0, 1.0], [6100.0, 1.0], [95300.0, 1.0], [100100.0, 1.0], [6400.0, 1.0], [6800.0, 1.0], [7900.0, 1.0], [8200.0, 1.0], [8800.0, 1.0], [9600.0, 1.0], [9800.0, 1.0], [10800.0, 2.0], [11600.0, 4.0], [11800.0, 2.0], [12600.0, 1.0], [13000.0, 2.0], [13600.0, 1.0], [14000.0, 1.0], [14400.0, 1.0], [15000.0, 1.0], [15600.0, 1.0], [15400.0, 1.0], [16000.0, 1.0], [17200.0, 2.0], [19200.0, 2.0], [20400.0, 1.0], [21200.0, 1.0], [22000.0, 1.0], [23200.0, 1.0], [23600.0, 2.0], [24400.0, 2.0], [24000.0, 1.0], [24800.0, 1.0], [25600.0, 2.0], [26400.0, 2.0], [27600.0, 1.0], [27200.0, 1.0], [28400.0, 2.0], [28800.0, 5.0], [29200.0, 4.0], [29600.0, 3.0], [30000.0, 3.0], [30800.0, 1.0], [31600.0, 1.0], [32000.0, 2.0], [32400.0, 1.0], [32800.0, 3.0], [34400.0, 2.0], [33600.0, 2.0], [35200.0, 2.0], [36800.0, 5.0], [36000.0, 1.0], [37600.0, 5.0], [39200.0, 5.0], [40000.0, 1.0], [40800.0, 1.0], [42400.0, 5.0], [41600.0, 2.0], [44800.0, 4.0], [43200.0, 1.0], [44000.0, 2.0], [45600.0, 6.0], [46400.0, 3.0], [48000.0, 3.0], [48800.0, 3.0], [47200.0, 4.0], [49600.0, 5.0], [50400.0, 5.0], [52000.0, 5.0], [52800.0, 4.0], [51200.0, 4.0], [55200.0, 2.0], [53600.0, 4.0], [54400.0, 4.0], [56800.0, 2.0], [56000.0, 2.0], [59200.0, 6.0], [57600.0, 3.0], [58400.0, 1.0], [60800.0, 4.0], [60000.0, 2.0], [62400.0, 6.0], [61600.0, 6.0], [63200.0, 2.0], [64800.0, 4.0], [64000.0, 4.0], [68800.0, 1.0], [67200.0, 3.0], [65600.0, 2.0], [73600.0, 2.0], [70400.0, 2.0], [75200.0, 1.0], [78400.0, 1.0], [80000.0, 2.0], [83200.0, 1.0], [89600.0, 1.0], [92800.0, 2.0], [91200.0, 2.0], [100800.0, 1.0], [102400.0, 2.0], [110400.0, 1.0], [120000.0, 16.0], [68700.0, 3.0], [67100.0, 4.0], [73500.0, 5.0], [70300.0, 2.0], [84700.0, 1.0], [89500.0, 1.0], [105500.0, 1.0], [107100.0, 1.0], [119900.0, 1.0], [33100.0, 2.0], [33900.0, 2.0], [34700.0, 3.0], [35500.0, 2.0], [36300.0, 2.0], [38700.0, 1.0], [37900.0, 6.0], [37100.0, 5.0], [40300.0, 6.0], [39500.0, 1.0], [42700.0, 1.0], [41900.0, 5.0], [41100.0, 3.0], [43500.0, 6.0], [44300.0, 1.0], [46700.0, 3.0], [45900.0, 2.0], [45100.0, 3.0], [47500.0, 4.0], [48300.0, 5.0], [49100.0, 3.0], [49900.0, 5.0], [50700.0, 4.0], [51500.0, 4.0], [52300.0, 4.0], [53100.0, 5.0], [54700.0, 5.0], [53900.0, 4.0], [55500.0, 2.0], [56300.0, 1.0], [57100.0, 4.0], [58700.0, 2.0], [57900.0, 3.0], [61100.0, 5.0], [60300.0, 4.0], [59500.0, 4.0], [62700.0, 4.0], [64300.0, 3.0], [63500.0, 5.0], [65100.0, 4.0], [69400.0, 4.0], [67800.0, 1.0], [66200.0, 1.0], [72600.0, 3.0], [74200.0, 1.0], [77400.0, 3.0], [79000.0, 1.0], [90200.0, 1.0], [95000.0, 2.0], [96600.0, 1.0], [99800.0, 1.0], [109400.0, 2.0], [112600.0, 1.0], [66900.0, 3.0], [68500.0, 1.0], [70100.0, 4.0], [71700.0, 3.0], [73300.0, 1.0], [76500.0, 3.0], [79700.0, 1.0], [78100.0, 1.0], [84500.0, 2.0], [82900.0, 3.0], [92500.0, 1.0], [90900.0, 1.0], [94100.0, 1.0], [103700.0, 1.0], [116500.0, 2.0], [16500.0, 1.0], [17700.0, 1.0], [18500.0, 1.0], [18900.0, 1.0], [20100.0, 1.0], [20500.0, 1.0], [20900.0, 1.0], [22100.0, 1.0], [22500.0, 1.0], [21700.0, 1.0], [22900.0, 1.0], [23300.0, 1.0], [24100.0, 2.0], [23700.0, 1.0], [24900.0, 2.0], [26500.0, 1.0], [26100.0, 1.0], [26900.0, 1.0], [27300.0, 1.0], [27700.0, 2.0], [28500.0, 3.0], [29300.0, 2.0], [28900.0, 2.0], [29700.0, 3.0], [30100.0, 4.0], [30500.0, 2.0], [31700.0, 5.0], [31300.0, 2.0], [30900.0, 3.0], [32500.0, 3.0], [32100.0, 3.0], [34600.0, 6.0], [33800.0, 3.0], [33000.0, 3.0], [36200.0, 3.0], [35400.0, 2.0], [37000.0, 7.0], [37800.0, 4.0], [38600.0, 2.0], [40200.0, 4.0], [39400.0, 2.0], [41000.0, 6.0], [41800.0, 1.0], [42600.0, 1.0], [43400.0, 3.0], [44200.0, 5.0], [45000.0, 3.0], [45800.0, 3.0], [48200.0, 7.0], [49000.0, 2.0], [47400.0, 2.0], [50600.0, 4.0], [49800.0, 6.0], [53000.0, 4.0], [52200.0, 4.0], [51400.0, 3.0], [54600.0, 4.0], [53800.0, 1.0], [57000.0, 4.0], [55400.0, 2.0], [56200.0, 2.0], [57800.0, 3.0], [58600.0, 2.0], [60200.0, 3.0], [59400.0, 5.0], [61000.0, 3.0], [63400.0, 1.0], [62600.0, 2.0], [61800.0, 1.0], [64200.0, 4.0], [65000.0, 2.0], [67600.0, 2.0], [66000.0, 2.0], [72400.0, 5.0], [70800.0, 1.0], [74000.0, 1.0], [77200.0, 1.0], [78800.0, 2.0], [83600.0, 1.0], [82000.0, 1.0], [85200.0, 1.0], [86800.0, 1.0], [88400.0, 1.0], [94800.0, 2.0], [96400.0, 1.0], [104400.0, 1.0], [107600.0, 1.0], [67500.0, 5.0], [65900.0, 1.0], [69100.0, 1.0], [72300.0, 4.0], [70700.0, 1.0], [77100.0, 4.0], [75500.0, 1.0], [73900.0, 3.0], [78700.0, 2.0], [80300.0, 1.0], [81900.0, 4.0], [86700.0, 1.0], [93100.0, 2.0], [91500.0, 1.0], [96300.0, 1.0], [102700.0, 2.0], [34100.0, 6.0], [33300.0, 5.0], [35700.0, 3.0], [34900.0, 4.0], [36500.0, 4.0], [38100.0, 3.0], [37300.0, 4.0], [38900.0, 2.0], [40500.0, 3.0], [39700.0, 3.0], [41300.0, 2.0], [42100.0, 5.0], [42900.0, 4.0], [43700.0, 4.0], [44500.0, 1.0], [46100.0, 4.0], [46900.0, 7.0], [45300.0, 4.0], [48500.0, 2.0], [47700.0, 5.0], [50100.0, 6.0], [50900.0, 4.0], [49300.0, 3.0], [52500.0, 6.0], [51700.0, 3.0], [54100.0, 4.0], [54900.0, 4.0], [53300.0, 2.0], [57300.0, 5.0], [55700.0, 3.0], [56500.0, 1.0], [58100.0, 2.0], [58900.0, 5.0], [59700.0, 4.0], [61300.0, 3.0], [60500.0, 3.0], [62100.0, 5.0], [62900.0, 2.0], [63700.0, 1.0], [65300.0, 2.0], [64500.0, 1.0], [66600.0, 1.0], [73000.0, 1.0], [71400.0, 4.0], [74600.0, 2.0], [76200.0, 1.0], [77800.0, 2.0], [81000.0, 1.0], [79400.0, 2.0], [82600.0, 2.0], [93800.0, 1.0], [95400.0, 1.0], [65700.0, 3.0], [67300.0, 1.0], [70500.0, 5.0], [72100.0, 2.0], [73700.0, 1.0], [76900.0, 3.0], [75300.0, 3.0], [81700.0, 1.0], [80100.0, 1.0], [84900.0, 1.0], [88100.0, 1.0], [91300.0, 1.0], [118500.0, 1.0], [9700.0, 2.0], [9500.0, 2.0], [10500.0, 1.0], [13700.0, 1.0], [15500.0, 1.0], [17400.0, 2.0], [16600.0, 1.0], [19400.0, 1.0], [19800.0, 3.0], [20200.0, 1.0], [21000.0, 1.0], [22600.0, 2.0], [23000.0, 2.0], [23400.0, 2.0], [24200.0, 2.0], [25400.0, 1.0], [24600.0, 4.0], [25000.0, 1.0], [26600.0, 3.0], [27000.0, 4.0], [27400.0, 1.0], [27800.0, 2.0], [28600.0, 3.0], [29400.0, 3.0], [29000.0, 2.0], [30600.0, 2.0], [31000.0, 4.0], [31400.0, 3.0], [32200.0, 4.0], [32600.0, 2.0], [31800.0, 1.0], [33200.0, 5.0], [34000.0, 6.0], [35600.0, 2.0], [36400.0, 3.0], [38800.0, 2.0], [38000.0, 2.0], [37200.0, 2.0], [40400.0, 6.0], [39600.0, 1.0], [42800.0, 5.0], [41200.0, 5.0], [42000.0, 6.0], [44400.0, 7.0], [43600.0, 4.0], [46000.0, 2.0], [46800.0, 2.0], [45200.0, 3.0], [47600.0, 5.0], [48400.0, 4.0], [49200.0, 7.0], [50800.0, 7.0], [50000.0, 6.0], [51600.0, 5.0], [52400.0, 3.0], [54800.0, 4.0], [54000.0, 2.0], [55600.0, 5.0], [56400.0, 5.0], [57200.0, 1.0], [58000.0, 3.0], [58800.0, 5.0], [60400.0, 6.0], [59600.0, 2.0], [61200.0, 3.0], [62800.0, 2.0], [62000.0, 1.0], [64400.0, 5.0], [63600.0, 6.0], [68000.0, 2.0], [69600.0, 2.0], [66400.0, 2.0], [72800.0, 1.0], [71200.0, 5.0], [77600.0, 3.0], [74400.0, 2.0], [76000.0, 1.0], [79200.0, 1.0], [84000.0, 1.0], [87200.0, 2.0], [92000.0, 1.0], [101600.0, 1.0], [103200.0, 2.0], [108000.0, 1.0], [119200.0, 1.0], [67900.0, 1.0], [66300.0, 1.0], [69500.0, 1.0], [71100.0, 2.0], [72700.0, 2.0], [75900.0, 1.0], [74300.0, 2.0], [80700.0, 2.0], [79100.0, 2.0], [83900.0, 1.0], [88700.0, 1.0], [93500.0, 2.0], [91900.0, 2.0], [101500.0, 1.0], [107900.0, 1.0], [114300.0, 2.0], [112700.0, 1.0], [33500.0, 5.0], [34300.0, 2.0], [35900.0, 5.0], [36700.0, 1.0], [35100.0, 1.0], [37500.0, 2.0], [38300.0, 3.0], [40700.0, 6.0], [39900.0, 8.0], [39100.0, 4.0], [41500.0, 5.0], [42300.0, 2.0], [44700.0, 3.0], [43900.0, 4.0], [43100.0, 4.0], [46300.0, 6.0], [45500.0, 2.0], [47100.0, 8.0], [48700.0, 2.0], [47900.0, 4.0], [49500.0, 5.0], [50300.0, 5.0], [51100.0, 3.0], [52700.0, 5.0], [51900.0, 3.0], [55100.0, 3.0], [53500.0, 8.0], [54300.0, 2.0], [55900.0, 2.0], [56700.0, 3.0], [58300.0, 7.0], [57500.0, 6.0], [59100.0, 3.0], [60700.0, 2.0], [59900.0, 2.0], [61500.0, 8.0], [62300.0, 4.0], [63100.0, 3.0], [64700.0, 2.0], [63900.0, 1.0], [68600.0, 2.0], [67000.0, 1.0], [73400.0, 1.0], [70200.0, 2.0], [71800.0, 1.0], [75000.0, 3.0], [76600.0, 1.0], [79800.0, 1.0], [83000.0, 1.0], [95800.0, 1.0], [102200.0, 1.0], [105400.0, 1.0], [108600.0, 2.0], [113400.0, 1.0], [118200.0, 1.0], [66100.0, 4.0], [69300.0, 3.0], [67700.0, 6.0], [72500.0, 1.0], [70900.0, 1.0], [74100.0, 2.0], [77300.0, 2.0], [80500.0, 3.0], [83700.0, 2.0], [90100.0, 1.0], [86900.0, 1.0], [91700.0, 2.0], [94900.0, 1.0], [106100.0, 1.0], [118900.0, 1.0], [16700.0, 3.0], [17100.0, 2.0], [18300.0, 2.0], [17900.0, 1.0], [19100.0, 1.0], [23100.0, 1.0], [23900.0, 2.0], [24300.0, 1.0], [25500.0, 2.0], [24700.0, 1.0], [25900.0, 1.0], [27100.0, 2.0], [27500.0, 2.0], [26700.0, 6.0], [27900.0, 2.0], [28300.0, 2.0], [29500.0, 1.0], [29900.0, 2.0], [30700.0, 1.0], [30300.0, 1.0], [31500.0, 3.0], [31100.0, 3.0], [31900.0, 6.0], [32700.0, 2.0], [32300.0, 1.0], [34200.0, 5.0], [33400.0, 4.0], [35000.0, 2.0], [35800.0, 4.0], [36600.0, 8.0], [37400.0, 5.0], [38200.0, 4.0], [39000.0, 5.0], [39800.0, 5.0], [40600.0, 2.0], [42200.0, 3.0], [41400.0, 5.0], [43000.0, 4.0], [43800.0, 7.0], [44600.0, 2.0], [45400.0, 5.0], [47000.0, 4.0], [46200.0, 6.0], [48600.0, 7.0], [47800.0, 2.0], [50200.0, 3.0], [51000.0, 4.0], [49400.0, 4.0], [52600.0, 2.0], [51800.0, 4.0], [54200.0, 5.0], [55000.0, 5.0], [53400.0, 1.0], [56600.0, 3.0], [55800.0, 3.0], [58200.0, 3.0], [57400.0, 3.0], [59000.0, 5.0], [61400.0, 6.0], [60600.0, 2.0], [59800.0, 3.0], [63000.0, 1.0], [62200.0, 3.0], [64600.0, 3.0], [65400.0, 6.0], [63800.0, 2.0], [66800.0, 1.0], [70000.0, 3.0], [71600.0, 1.0], [73200.0, 1.0], [74800.0, 1.0], [78000.0, 1.0], [86000.0, 1.0], [84400.0, 1.0], [89200.0, 1.0], [92400.0, 1.0], [98800.0, 1.0], [105200.0, 1.0], [114800.0, 1.0]], "isOverall": false, "label": "HTTP\u8BF7\u6C42", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 120000.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 16.0, "minX": 2.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 1748.0, "series": [{"data": [], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 1748.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [[3.0, 16.0]], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 3.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 66.50757575757575, "minX": 1.63607934E12, "maxY": 150.0, "series": [{"data": [[1.63607976E12, 150.0], [1.63607994E12, 149.1104651162791], [1.63607946E12, 150.0], [1.63607964E12, 150.0], [1.63607982E12, 150.0], [1.63607934E12, 95.0], [1.63607952E12, 150.0], [1.63608E12, 66.50757575757575], [1.6360797E12, 150.0], [1.63607988E12, 150.0], [1.6360794E12, 149.04907975460122], [1.63607958E12, 150.0]], "isOverall": false, "label": "\u7EBF\u7A0B\u7EC4", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.63608E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 27827.0, "minX": 1.0, "maxY": 120012.0, "series": [{"data": [[2.0, 61537.0], [3.0, 58699.0], [4.0, 61645.0], [5.0, 58868.0], [6.0, 59282.0], [7.0, 59731.0], [8.0, 59615.0], [9.0, 59281.0], [10.0, 60599.0], [11.0, 59851.0], [12.0, 59240.0], [13.0, 60011.0], [14.0, 62661.0], [15.0, 62443.0], [17.0, 66802.0], [18.0, 59470.0], [19.0, 59132.0], [20.0, 60107.0], [21.0, 59344.0], [22.0, 47414.0], [23.0, 62711.0], [24.0, 46487.0], [25.0, 47340.0], [26.0, 47782.0], [27.0, 47910.0], [28.0, 46999.0], [29.0, 45450.0], [30.0, 48351.0], [31.0, 49473.0], [33.0, 46961.0], [32.0, 61552.0], [35.0, 61342.0], [34.0, 62469.0], [37.0, 61124.0], [36.0, 58899.0], [39.0, 59852.0], [38.0, 58871.0], [41.0, 57316.0], [40.0, 58265.0], [43.0, 61669.0], [42.0, 46287.0], [45.0, 120011.0], [44.0, 103254.0], [47.0, 62539.0], [46.0, 41705.0], [49.0, 56752.0], [48.0, 59906.0], [51.0, 89631.0], [50.0, 95488.0], [53.0, 59489.0], [52.0, 37672.0], [55.0, 71523.0], [54.0, 100393.0], [57.0, 82945.0], [56.0, 73255.0], [59.0, 84556.0], [58.0, 37198.0], [61.0, 56661.0], [60.0, 37955.0], [63.0, 60291.0], [62.0, 60953.0], [67.0, 61049.0], [66.0, 60480.0], [65.0, 45362.0], [64.0, 61607.0], [71.0, 51646.0], [70.0, 48274.0], [69.0, 60577.0], [68.0, 50816.0], [75.0, 50674.0], [74.0, 49707.0], [73.0, 69048.0], [72.0, 50759.0], [79.0, 58435.0], [78.0, 49873.0], [77.0, 47916.0], [76.0, 79800.0], [83.0, 70199.0], [82.0, 36516.0], [81.0, 70089.0], [80.0, 77914.0], [87.0, 36493.0], [86.0, 67129.0], [85.0, 35354.0], [84.0, 68506.0], [91.0, 66193.0], [90.0, 67422.0], [89.0, 109436.0], [88.0, 44870.0], [95.0, 27827.0], [94.0, 52597.0], [93.0, 45459.0], [92.0, 36619.0], [99.0, 45011.0], [98.0, 69174.0], [97.0, 54482.0], [96.0, 67704.0], [100.0, 38552.0], [103.0, 51620.0], [102.0, 32571.0], [101.0, 69095.0], [107.0, 120009.0], [106.0, 65492.0], [105.0, 31048.0], [104.0, 49485.0], [108.0, 29726.0], [111.0, 80716.0], [110.0, 120012.0], [109.0, 99400.0], [115.0, 49705.0], [114.0, 57946.0], [113.0, 28597.0], [112.0, 51356.0], [119.0, 36944.0], [118.0, 91201.0], [117.0, 60889.0], [116.0, 79042.0], [123.0, 36677.0], [122.0, 39728.0], [121.0, 79515.0], [120.0, 37128.0], [126.0, 62228.0], [127.0, 42961.0], [125.0, 110625.0], [124.0, 118949.0], [134.0, 32095.5], [135.0, 55534.0], [133.0, 54742.0], [132.0, 54081.0], [131.0, 53836.0], [130.0, 64905.0], [129.0, 94878.0], [128.0, 38622.0], [143.0, 42991.0], [142.0, 96380.0], [141.0, 36814.0], [140.0, 60844.0], [139.0, 120012.0], [138.0, 30394.0], [137.0, 71415.0], [136.0, 36893.0], [150.0, 52349.26848974512], [149.0, 77199.0], [148.0, 42018.0], [147.0, 120011.0], [146.0, 34502.0], [145.0, 39201.0], [144.0, 43118.0], [1.0, 59465.0]], "isOverall": false, "label": "HTTP\u8BF7\u6C42", "isController": false}, {"data": [[143.54648526077114, 52965.62811791389]], "isOverall": false, "label": "HTTP\u8BF7\u6C42-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 150.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 3.9833333333333334, "minX": 1.63607934E12, "maxY": 81409.05, "series": [{"data": [[1.63607976E12, 71731.58333333333], [1.63607994E12, 81373.53333333334], [1.63607946E12, 81409.05], [1.63607964E12, 78924.96666666666], [1.63607982E12, 76996.25], [1.63607934E12, 476.53333333333336], [1.63607952E12, 81393.05], [1.63608E12, 62867.8], [1.6360797E12, 77947.68333333333], [1.63607988E12, 79550.98333333334], [1.6360794E12, 79526.55], [1.63607958E12, 79869.63333333333]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.63607976E12, 605.4666666666667], [1.63607994E12, 685.1333333333333], [1.63607946E12, 665.2166666666667], [1.63607964E12, 649.2833333333333], [1.63607982E12, 629.3666666666667], [1.63607934E12, 3.9833333333333334], [1.63607952E12, 665.2166666666667], [1.63608E12, 525.8], [1.6360797E12, 637.3333333333334], [1.63607988E12, 653.2666666666667], [1.6360794E12, 649.2833333333333], [1.63607958E12, 657.25]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.63608E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 6174.0, "minX": 1.63607934E12, "maxY": 61662.81060606057, "series": [{"data": [[1.63607976E12, 56976.6052631579], [1.63607994E12, 52496.18023255812], [1.63607946E12, 52517.65868263477], [1.63607964E12, 56955.31901840491], [1.63607982E12, 57775.33544303796], [1.63607934E12, 6174.0], [1.63607952E12, 53268.50898203594], [1.63608E12, 61662.81060606057], [1.6360797E12, 54635.99999999999], [1.63607988E12, 54946.90243902438], [1.6360794E12, 30325.570552147226], [1.63607958E12, 53462.33939393939]], "isOverall": false, "label": "HTTP\u8BF7\u6C42", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.63608E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 6173.0, "minX": 1.63607934E12, "maxY": 61655.310606060615, "series": [{"data": [[1.63607976E12, 56970.22368421052], [1.63607994E12, 52489.33720930231], [1.63607946E12, 52510.30538922155], [1.63607964E12, 56948.576687116554], [1.63607982E12, 57768.25949367092], [1.63607934E12, 6173.0], [1.63607952E12, 53261.910179640705], [1.63608E12, 61655.310606060615], [1.6360797E12, 54628.12500000003], [1.63607988E12, 54939.55487804877], [1.6360794E12, 30318.705521472395], [1.63607958E12, 53455.56969696971]], "isOverall": false, "label": "HTTP\u8BF7\u6C42", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.63608E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 6.853658536585368, "minX": 1.63607934E12, "maxY": 8.311377245508982, "series": [{"data": [[1.63607976E12, 7.217105263157896], [1.63607994E12, 7.784883720930233], [1.63607946E12, 7.3772455089820355], [1.63607964E12, 7.6073619631901845], [1.63607982E12, 7.208860759493672], [1.63607934E12, 7.0], [1.63607952E12, 8.311377245508982], [1.63608E12, 7.333333333333331], [1.6360797E12, 7.61875], [1.63607988E12, 6.853658536585368], [1.6360794E12, 8.165644171779142], [1.63607958E12, 7.096969696969695]], "isOverall": false, "label": "HTTP\u8BF7\u6C42", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.63608E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 6174.0, "minX": 1.63607934E12, "maxY": 119940.0, "series": [{"data": [[1.63607976E12, 118229.0], [1.63607994E12, 116508.0], [1.63607946E12, 95000.0], [1.63607964E12, 110498.0], [1.63607982E12, 95093.0], [1.63607934E12, 6174.0], [1.63607952E12, 119940.0], [1.63608E12, 118949.0], [1.6360797E12, 103295.0], [1.63607988E12, 114395.0], [1.6360794E12, 60278.0], [1.63607958E12, 119223.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.63607976E12, 23685.0], [1.63607994E12, 21273.0], [1.63607946E12, 20139.0], [1.63607964E12, 17731.0], [1.63607982E12, 23478.0], [1.63607934E12, 6174.0], [1.63607952E12, 17936.0], [1.63608E12, 28597.0], [1.6360797E12, 19867.0], [1.63607988E12, 22626.0], [1.6360794E12, 6491.0], [1.63607958E12, 18389.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.63607976E12, 73772.80000000002], [1.63607994E12, 82366.80000000003], [1.63607946E12, 70909.80000000003], [1.63607964E12, 80266.70000000001], [1.63607982E12, 77658.8], [1.63607934E12, 6174.0], [1.63607952E12, 79202.80000000005], [1.63608E12, 82945.0], [1.6360797E12, 80532.6], [1.63607988E12, 78974.79999999999], [1.6360794E12, 49958.6], [1.63607958E12, 80189.5]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.63607976E12, 108096.68000000021], [1.63607994E12, 115014.03999999998], [1.63607946E12, 94030.31999999999], [1.63607964E12, 110128.82], [1.63607982E12, 95001.55], [1.63607934E12, 6174.0], [1.63607952E12, 115492.79999999996], [1.63608E12, 118227.19999999997], [1.6360797E12, 98418.65999999989], [1.63607988E12, 110739.95999999992], [1.6360794E12, 59271.27999999998], [1.63607958E12, 118762.8]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.63607976E12, 81356.2], [1.63607994E12, 99573.99999999997], [1.63607946E12, 84043.79999999999], [1.63607964E12, 99069.29999999994], [1.63607982E12, 80363.99999999996], [1.63607934E12, 6174.0], [1.63607952E12, 83975.2], [1.63608E12, 99896.5], [1.6360797E12, 89195.65], [1.63607988E12, 97113.79999999993], [1.6360794E12, 52999.0], [1.63607958E12, 100335.25]], "isOverall": false, "label": "95th percentile", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.63608E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 32545.5, "minX": 1.0, "maxY": 120029.0, "series": [{"data": [[1.0, 49906.5], [2.0, 50576.0], [4.0, 49650.5], [8.0, 60481.5], [5.0, 52588.0], [10.0, 58157.5], [3.0, 50927.5], [6.0, 32545.5]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[4.0, 120012.5], [1.0, 120029.0], [2.0, 120012.0], [5.0, 120012.0], [3.0, 120012.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 10.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 32538.5, "minX": 1.0, "maxY": 120029.0, "series": [{"data": [[1.0, 49899.5], [2.0, 50571.0], [4.0, 49642.5], [8.0, 60474.5], [5.0, 52583.0], [10.0, 58150.0], [3.0, 50922.0], [6.0, 32538.5]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[4.0, 120012.5], [1.0, 120029.0], [2.0, 120012.0], [5.0, 120012.0], [3.0, 120012.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 10.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 1.6, "minX": 1.63607934E12, "maxY": 3.6333333333333333, "series": [{"data": [[1.63607976E12, 2.533333333333333], [1.63607994E12, 2.566666666666667], [1.63607946E12, 2.783333333333333], [1.63607964E12, 2.716666666666667], [1.63607982E12, 2.6333333333333333], [1.63607934E12, 1.6], [1.63607952E12, 2.783333333333333], [1.6360797E12, 2.6666666666666665], [1.63607988E12, 2.7333333333333334], [1.6360794E12, 3.6333333333333333], [1.63607958E12, 2.75]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.63607994E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 0.016666666666666666, "minX": 1.63607934E12, "maxY": 2.783333333333333, "series": [{"data": [[1.63607976E12, 2.45], [1.63607994E12, 2.783333333333333], [1.63607946E12, 2.783333333333333], [1.63607964E12, 2.7], [1.63607982E12, 2.6333333333333333], [1.63607934E12, 0.016666666666666666], [1.63607952E12, 2.783333333333333], [1.63608E12, 2.15], [1.6360797E12, 2.6666666666666665], [1.63607988E12, 2.716666666666667], [1.6360794E12, 2.716666666666667], [1.63607958E12, 2.7333333333333334]], "isOverall": false, "label": "200", "isController": false}, {"data": [[1.63607976E12, 0.08333333333333333], [1.63607994E12, 0.08333333333333333], [1.63607964E12, 0.016666666666666666], [1.63608E12, 0.05], [1.63607988E12, 0.016666666666666666], [1.63607958E12, 0.016666666666666666]], "isOverall": false, "label": "404", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.63608E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.016666666666666666, "minX": 1.63607934E12, "maxY": 2.783333333333333, "series": [{"data": [[1.63607976E12, 0.08333333333333333], [1.63607994E12, 0.08333333333333333], [1.63607964E12, 0.016666666666666666], [1.63608E12, 0.05], [1.63607988E12, 0.016666666666666666], [1.63607958E12, 0.016666666666666666]], "isOverall": false, "label": "HTTP\u8BF7\u6C42-failure", "isController": false}, {"data": [[1.63607976E12, 2.45], [1.63607994E12, 2.783333333333333], [1.63607946E12, 2.783333333333333], [1.63607964E12, 2.7], [1.63607982E12, 2.6333333333333333], [1.63607934E12, 0.016666666666666666], [1.63607952E12, 2.783333333333333], [1.63608E12, 2.15], [1.6360797E12, 2.6666666666666665], [1.63607988E12, 2.716666666666667], [1.6360794E12, 2.716666666666667], [1.63607958E12, 2.7333333333333334]], "isOverall": false, "label": "HTTP\u8BF7\u6C42-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.63608E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 0.016666666666666666, "minX": 1.63607934E12, "maxY": 2.783333333333333, "series": [{"data": [[1.63607976E12, 2.45], [1.63607994E12, 2.783333333333333], [1.63607946E12, 2.783333333333333], [1.63607964E12, 2.7], [1.63607982E12, 2.6333333333333333], [1.63607934E12, 0.016666666666666666], [1.63607952E12, 2.783333333333333], [1.63608E12, 2.15], [1.6360797E12, 2.6666666666666665], [1.63607988E12, 2.716666666666667], [1.6360794E12, 2.716666666666667], [1.63607958E12, 2.7333333333333334]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [[1.63607976E12, 0.08333333333333333], [1.63607994E12, 0.08333333333333333], [1.63607964E12, 0.016666666666666666], [1.63608E12, 0.05], [1.63607988E12, 0.016666666666666666], [1.63607958E12, 0.016666666666666666]], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.63608E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

