/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 14.0, "minX": 0.0, "maxY": 120014.0, "series": [{"data": [[0.0, 14.0], [0.1, 14.0], [0.2, 15.0], [0.3, 15.0], [0.4, 16.0], [0.5, 16.0], [0.6, 16.0], [0.7, 16.0], [0.8, 16.0], [0.9, 16.0], [1.0, 17.0], [1.1, 17.0], [1.2, 18.0], [1.3, 18.0], [1.4, 18.0], [1.5, 19.0], [1.6, 19.0], [1.7, 19.0], [1.8, 19.0], [1.9, 19.0], [2.0, 20.0], [2.1, 21.0], [2.2, 22.0], [2.3, 22.0], [2.4, 24.0], [2.5, 3970.0], [2.6, 4017.0], [2.7, 4742.0], [2.8, 5395.0], [2.9, 6137.0], [3.0, 6313.0], [3.1, 7011.0], [3.2, 7894.0], [3.3, 8341.0], [3.4, 8368.0], [3.5, 9581.0], [3.6, 9980.0], [3.7, 10183.0], [3.8, 10588.0], [3.9, 11022.0], [4.0, 11272.0], [4.1, 11974.0], [4.2, 12360.0], [4.3, 13065.0], [4.4, 13575.0], [4.5, 13708.0], [4.6, 14002.0], [4.7, 15424.0], [4.8, 15773.0], [4.9, 16385.0], [5.0, 16773.0], [5.1, 17183.0], [5.2, 17553.0], [5.3, 18009.0], [5.4, 18292.0], [5.5, 18474.0], [5.6, 18616.0], [5.7, 18700.0], [5.8, 19121.0], [5.9, 19188.0], [6.0, 19584.0], [6.1, 19960.0], [6.2, 20344.0], [6.3, 20500.0], [6.4, 20805.0], [6.5, 21185.0], [6.6, 21484.0], [6.7, 21586.0], [6.8, 21669.0], [6.9, 21949.0], [7.0, 21998.0], [7.1, 22160.0], [7.2, 22256.0], [7.3, 22321.0], [7.4, 22403.0], [7.5, 22650.0], [7.6, 23029.0], [7.7, 23388.0], [7.8, 23464.0], [7.9, 23569.0], [8.0, 23814.0], [8.1, 24245.0], [8.2, 24250.0], [8.3, 24514.0], [8.4, 24696.0], [8.5, 24725.0], [8.6, 24908.0], [8.7, 25252.0], [8.8, 25499.0], [8.9, 25558.0], [9.0, 25602.0], [9.1, 25735.0], [9.2, 25929.0], [9.3, 26133.0], [9.4, 26196.0], [9.5, 26287.0], [9.6, 26378.0], [9.7, 26557.0], [9.8, 26591.0], [9.9, 26835.0], [10.0, 26935.0], [10.1, 27040.0], [10.2, 27081.0], [10.3, 27160.0], [10.4, 27242.0], [10.5, 27259.0], [10.6, 27326.0], [10.7, 27371.0], [10.8, 27381.0], [10.9, 27621.0], [11.0, 27666.0], [11.1, 27683.0], [11.2, 27728.0], [11.3, 27826.0], [11.4, 27864.0], [11.5, 27989.0], [11.6, 27999.0], [11.7, 28064.0], [11.8, 28120.0], [11.9, 28138.0], [12.0, 28173.0], [12.1, 28250.0], [12.2, 28268.0], [12.3, 28451.0], [12.4, 28536.0], [12.5, 28578.0], [12.6, 28620.0], [12.7, 28655.0], [12.8, 28698.0], [12.9, 28700.0], [13.0, 28706.0], [13.1, 28749.0], [13.2, 28841.0], [13.3, 28874.0], [13.4, 28905.0], [13.5, 28943.0], [13.6, 29121.0], [13.7, 29174.0], [13.8, 29250.0], [13.9, 29330.0], [14.0, 29401.0], [14.1, 29500.0], [14.2, 29555.0], [14.3, 29592.0], [14.4, 29615.0], [14.5, 29713.0], [14.6, 29773.0], [14.7, 29823.0], [14.8, 29850.0], [14.9, 29903.0], [15.0, 29946.0], [15.1, 30032.0], [15.2, 30043.0], [15.3, 30092.0], [15.4, 30168.0], [15.5, 30256.0], [15.6, 30314.0], [15.7, 30360.0], [15.8, 30401.0], [15.9, 30469.0], [16.0, 30537.0], [16.1, 30580.0], [16.2, 30617.0], [16.3, 30677.0], [16.4, 30724.0], [16.5, 30876.0], [16.6, 30907.0], [16.7, 30911.0], [16.8, 30953.0], [16.9, 31021.0], [17.0, 31036.0], [17.1, 31113.0], [17.2, 31233.0], [17.3, 31330.0], [17.4, 31339.0], [17.5, 31357.0], [17.6, 31483.0], [17.7, 31540.0], [17.8, 31585.0], [17.9, 31625.0], [18.0, 31641.0], [18.1, 31684.0], [18.2, 31781.0], [18.3, 31805.0], [18.4, 31882.0], [18.5, 31893.0], [18.6, 31926.0], [18.7, 31952.0], [18.8, 32001.0], [18.9, 32002.0], [19.0, 32044.0], [19.1, 32107.0], [19.2, 32124.0], [19.3, 32172.0], [19.4, 32220.0], [19.5, 32265.0], [19.6, 32293.0], [19.7, 32337.0], [19.8, 32361.0], [19.9, 32405.0], [20.0, 32424.0], [20.1, 32465.0], [20.2, 32558.0], [20.3, 32578.0], [20.4, 32717.0], [20.5, 32790.0], [20.6, 32819.0], [20.7, 32826.0], [20.8, 32859.0], [20.9, 32946.0], [21.0, 32982.0], [21.1, 32993.0], [21.2, 33081.0], [21.3, 33135.0], [21.4, 33148.0], [21.5, 33156.0], [21.6, 33160.0], [21.7, 33223.0], [21.8, 33227.0], [21.9, 33274.0], [22.0, 33318.0], [22.1, 33442.0], [22.2, 33449.0], [22.3, 33527.0], [22.4, 33607.0], [22.5, 33638.0], [22.6, 33664.0], [22.7, 33679.0], [22.8, 33749.0], [22.9, 33781.0], [23.0, 33847.0], [23.1, 33902.0], [23.2, 33975.0], [23.3, 33992.0], [23.4, 34006.0], [23.5, 34025.0], [23.6, 34036.0], [23.7, 34040.0], [23.8, 34113.0], [23.9, 34184.0], [24.0, 34191.0], [24.1, 34224.0], [24.2, 34338.0], [24.3, 34344.0], [24.4, 34431.0], [24.5, 34483.0], [24.6, 34532.0], [24.7, 34596.0], [24.8, 34629.0], [24.9, 34666.0], [25.0, 34744.0], [25.1, 34792.0], [25.2, 34830.0], [25.3, 34890.0], [25.4, 34905.0], [25.5, 34934.0], [25.6, 34961.0], [25.7, 35003.0], [25.8, 35043.0], [25.9, 35052.0], [26.0, 35067.0], [26.1, 35106.0], [26.2, 35113.0], [26.3, 35150.0], [26.4, 35181.0], [26.5, 35212.0], [26.6, 35251.0], [26.7, 35277.0], [26.8, 35324.0], [26.9, 35344.0], [27.0, 35374.0], [27.1, 35433.0], [27.2, 35526.0], [27.3, 35540.0], [27.4, 35561.0], [27.5, 35605.0], [27.6, 35617.0], [27.7, 35620.0], [27.8, 35651.0], [27.9, 35688.0], [28.0, 35755.0], [28.1, 35796.0], [28.2, 35863.0], [28.3, 35918.0], [28.4, 35982.0], [28.5, 36000.0], [28.6, 36046.0], [28.7, 36062.0], [28.8, 36119.0], [28.9, 36144.0], [29.0, 36192.0], [29.1, 36235.0], [29.2, 36241.0], [29.3, 36383.0], [29.4, 36426.0], [29.5, 36451.0], [29.6, 36473.0], [29.7, 36538.0], [29.8, 36570.0], [29.9, 36584.0], [30.0, 36612.0], [30.1, 36627.0], [30.2, 36649.0], [30.3, 36664.0], [30.4, 36728.0], [30.5, 36782.0], [30.6, 36815.0], [30.7, 36845.0], [30.8, 36866.0], [30.9, 36877.0], [31.0, 36890.0], [31.1, 37004.0], [31.2, 37011.0], [31.3, 37030.0], [31.4, 37055.0], [31.5, 37069.0], [31.6, 37077.0], [31.7, 37148.0], [31.8, 37167.0], [31.9, 37217.0], [32.0, 37341.0], [32.1, 37375.0], [32.2, 37384.0], [32.3, 37388.0], [32.4, 37416.0], [32.5, 37505.0], [32.6, 37521.0], [32.7, 37581.0], [32.8, 37636.0], [32.9, 37676.0], [33.0, 37738.0], [33.1, 37764.0], [33.2, 37856.0], [33.3, 37908.0], [33.4, 37927.0], [33.5, 37968.0], [33.6, 37975.0], [33.7, 38054.0], [33.8, 38146.0], [33.9, 38164.0], [34.0, 38185.0], [34.1, 38192.0], [34.2, 38216.0], [34.3, 38276.0], [34.4, 38297.0], [34.5, 38326.0], [34.6, 38385.0], [34.7, 38388.0], [34.8, 38431.0], [34.9, 38486.0], [35.0, 38495.0], [35.1, 38516.0], [35.2, 38529.0], [35.3, 38583.0], [35.4, 38607.0], [35.5, 38648.0], [35.6, 38666.0], [35.7, 38692.0], [35.8, 38723.0], [35.9, 38769.0], [36.0, 38798.0], [36.1, 38900.0], [36.2, 38905.0], [36.3, 38931.0], [36.4, 38984.0], [36.5, 39119.0], [36.6, 39213.0], [36.7, 39258.0], [36.8, 39278.0], [36.9, 39307.0], [37.0, 39313.0], [37.1, 39400.0], [37.2, 39476.0], [37.3, 39494.0], [37.4, 39501.0], [37.5, 39618.0], [37.6, 39663.0], [37.7, 39700.0], [37.8, 39734.0], [37.9, 39801.0], [38.0, 39939.0], [38.1, 39984.0], [38.2, 39989.0], [38.3, 40020.0], [38.4, 40021.0], [38.5, 40038.0], [38.6, 40082.0], [38.7, 40090.0], [38.8, 40114.0], [38.9, 40140.0], [39.0, 40155.0], [39.1, 40235.0], [39.2, 40236.0], [39.3, 40372.0], [39.4, 40437.0], [39.5, 40504.0], [39.6, 40515.0], [39.7, 40563.0], [39.8, 40591.0], [39.9, 40657.0], [40.0, 40674.0], [40.1, 40691.0], [40.2, 40721.0], [40.3, 40742.0], [40.4, 40789.0], [40.5, 40866.0], [40.6, 40925.0], [40.7, 41047.0], [40.8, 41058.0], [40.9, 41161.0], [41.0, 41167.0], [41.1, 41224.0], [41.2, 41253.0], [41.3, 41319.0], [41.4, 41340.0], [41.5, 41368.0], [41.6, 41386.0], [41.7, 41393.0], [41.8, 41425.0], [41.9, 41461.0], [42.0, 41545.0], [42.1, 41611.0], [42.2, 41651.0], [42.3, 41700.0], [42.4, 41704.0], [42.5, 41739.0], [42.6, 41760.0], [42.7, 41782.0], [42.8, 41828.0], [42.9, 41877.0], [43.0, 42024.0], [43.1, 42089.0], [43.2, 42089.0], [43.3, 42143.0], [43.4, 42279.0], [43.5, 42350.0], [43.6, 42407.0], [43.7, 42462.0], [43.8, 42488.0], [43.9, 42514.0], [44.0, 42540.0], [44.1, 42567.0], [44.2, 42632.0], [44.3, 42674.0], [44.4, 42679.0], [44.5, 42690.0], [44.6, 42739.0], [44.7, 42785.0], [44.8, 42912.0], [44.9, 42984.0], [45.0, 43058.0], [45.1, 43084.0], [45.2, 43170.0], [45.3, 43209.0], [45.4, 43218.0], [45.5, 43223.0], [45.6, 43262.0], [45.7, 43308.0], [45.8, 43310.0], [45.9, 43375.0], [46.0, 43392.0], [46.1, 43416.0], [46.2, 43425.0], [46.3, 43433.0], [46.4, 43447.0], [46.5, 43462.0], [46.6, 43463.0], [46.7, 43470.0], [46.8, 43503.0], [46.9, 43526.0], [47.0, 43560.0], [47.1, 43598.0], [47.2, 43676.0], [47.3, 43680.0], [47.4, 43770.0], [47.5, 43802.0], [47.6, 43825.0], [47.7, 43826.0], [47.8, 43871.0], [47.9, 43911.0], [48.0, 43911.0], [48.1, 44063.0], [48.2, 44125.0], [48.3, 44137.0], [48.4, 44174.0], [48.5, 44200.0], [48.6, 44279.0], [48.7, 44305.0], [48.8, 44339.0], [48.9, 44351.0], [49.0, 44372.0], [49.1, 44436.0], [49.2, 44501.0], [49.3, 44519.0], [49.4, 44534.0], [49.5, 44557.0], [49.6, 44592.0], [49.7, 44686.0], [49.8, 44703.0], [49.9, 44741.0], [50.0, 44782.0], [50.1, 44843.0], [50.2, 44864.0], [50.3, 44871.0], [50.4, 44881.0], [50.5, 44932.0], [50.6, 44957.0], [50.7, 44983.0], [50.8, 44997.0], [50.9, 45041.0], [51.0, 45073.0], [51.1, 45079.0], [51.2, 45098.0], [51.3, 45117.0], [51.4, 45159.0], [51.5, 45195.0], [51.6, 45210.0], [51.7, 45225.0], [51.8, 45253.0], [51.9, 45280.0], [52.0, 45347.0], [52.1, 45372.0], [52.2, 45395.0], [52.3, 45405.0], [52.4, 45427.0], [52.5, 45453.0], [52.6, 45484.0], [52.7, 45562.0], [52.8, 45595.0], [52.9, 45642.0], [53.0, 45689.0], [53.1, 45707.0], [53.2, 45739.0], [53.3, 45751.0], [53.4, 45793.0], [53.5, 45826.0], [53.6, 45837.0], [53.7, 45855.0], [53.8, 45863.0], [53.9, 45865.0], [54.0, 45891.0], [54.1, 45926.0], [54.2, 45956.0], [54.3, 45962.0], [54.4, 46105.0], [54.5, 46176.0], [54.6, 46245.0], [54.7, 46277.0], [54.8, 46301.0], [54.9, 46403.0], [55.0, 46412.0], [55.1, 46432.0], [55.2, 46438.0], [55.3, 46457.0], [55.4, 46461.0], [55.5, 46497.0], [55.6, 46555.0], [55.7, 46642.0], [55.8, 46642.0], [55.9, 46732.0], [56.0, 46784.0], [56.1, 46791.0], [56.2, 46803.0], [56.3, 46815.0], [56.4, 46886.0], [56.5, 46958.0], [56.6, 46998.0], [56.7, 47046.0], [56.8, 47129.0], [56.9, 47142.0], [57.0, 47170.0], [57.1, 47198.0], [57.2, 47214.0], [57.3, 47255.0], [57.4, 47312.0], [57.5, 47327.0], [57.6, 47329.0], [57.7, 47358.0], [57.8, 47448.0], [57.9, 47490.0], [58.0, 47538.0], [58.1, 47546.0], [58.2, 47603.0], [58.3, 47659.0], [58.4, 47663.0], [58.5, 47676.0], [58.6, 47737.0], [58.7, 47770.0], [58.8, 47777.0], [58.9, 47856.0], [59.0, 47890.0], [59.1, 47903.0], [59.2, 47932.0], [59.3, 48013.0], [59.4, 48040.0], [59.5, 48041.0], [59.6, 48101.0], [59.7, 48108.0], [59.8, 48132.0], [59.9, 48194.0], [60.0, 48220.0], [60.1, 48290.0], [60.2, 48291.0], [60.3, 48446.0], [60.4, 48537.0], [60.5, 48577.0], [60.6, 48589.0], [60.7, 48607.0], [60.8, 48632.0], [60.9, 48646.0], [61.0, 48723.0], [61.1, 48743.0], [61.2, 48773.0], [61.3, 48776.0], [61.4, 48793.0], [61.5, 48827.0], [61.6, 48925.0], [61.7, 48964.0], [61.8, 49167.0], [61.9, 49326.0], [62.0, 49329.0], [62.1, 49410.0], [62.2, 49445.0], [62.3, 49522.0], [62.4, 49529.0], [62.5, 49577.0], [62.6, 49614.0], [62.7, 49641.0], [62.8, 49657.0], [62.9, 49791.0], [63.0, 49813.0], [63.1, 49876.0], [63.2, 49884.0], [63.3, 49950.0], [63.4, 50009.0], [63.5, 50016.0], [63.6, 50182.0], [63.7, 50237.0], [63.8, 50269.0], [63.9, 50278.0], [64.0, 50386.0], [64.1, 50465.0], [64.2, 50499.0], [64.3, 50532.0], [64.4, 50557.0], [64.5, 50663.0], [64.6, 50701.0], [64.7, 50766.0], [64.8, 50792.0], [64.9, 50853.0], [65.0, 50865.0], [65.1, 50902.0], [65.2, 51029.0], [65.3, 51066.0], [65.4, 51088.0], [65.5, 51108.0], [65.6, 51118.0], [65.7, 51120.0], [65.8, 51199.0], [65.9, 51243.0], [66.0, 51296.0], [66.1, 51330.0], [66.2, 51346.0], [66.3, 51387.0], [66.4, 51409.0], [66.5, 51438.0], [66.6, 51480.0], [66.7, 51587.0], [66.8, 51600.0], [66.9, 51665.0], [67.0, 51774.0], [67.1, 51823.0], [67.2, 51897.0], [67.3, 51920.0], [67.4, 51953.0], [67.5, 51972.0], [67.6, 51996.0], [67.7, 52096.0], [67.8, 52127.0], [67.9, 52150.0], [68.0, 52246.0], [68.1, 52252.0], [68.2, 52333.0], [68.3, 52348.0], [68.4, 52354.0], [68.5, 52395.0], [68.6, 52465.0], [68.7, 52490.0], [68.8, 52540.0], [68.9, 52635.0], [69.0, 52654.0], [69.1, 52676.0], [69.2, 52740.0], [69.3, 52775.0], [69.4, 52785.0], [69.5, 52864.0], [69.6, 52883.0], [69.7, 52913.0], [69.8, 52923.0], [69.9, 52943.0], [70.0, 53024.0], [70.1, 53078.0], [70.2, 53096.0], [70.3, 53181.0], [70.4, 53206.0], [70.5, 53211.0], [70.6, 53225.0], [70.7, 53257.0], [70.8, 53299.0], [70.9, 53312.0], [71.0, 53381.0], [71.1, 53428.0], [71.2, 53469.0], [71.3, 53474.0], [71.4, 53513.0], [71.5, 53531.0], [71.6, 53537.0], [71.7, 53549.0], [71.8, 53595.0], [71.9, 53639.0], [72.0, 53699.0], [72.1, 53807.0], [72.2, 53841.0], [72.3, 53880.0], [72.4, 53890.0], [72.5, 53913.0], [72.6, 53975.0], [72.7, 53997.0], [72.8, 54059.0], [72.9, 54151.0], [73.0, 54175.0], [73.1, 54212.0], [73.2, 54255.0], [73.3, 54327.0], [73.4, 54351.0], [73.5, 54421.0], [73.6, 54502.0], [73.7, 54516.0], [73.8, 54553.0], [73.9, 54583.0], [74.0, 54612.0], [74.1, 54666.0], [74.2, 54689.0], [74.3, 54750.0], [74.4, 54775.0], [74.5, 54831.0], [74.6, 54847.0], [74.7, 54908.0], [74.8, 54967.0], [74.9, 55012.0], [75.0, 55024.0], [75.1, 55093.0], [75.2, 55122.0], [75.3, 55157.0], [75.4, 55171.0], [75.5, 55290.0], [75.6, 55412.0], [75.7, 55474.0], [75.8, 55496.0], [75.9, 55663.0], [76.0, 55749.0], [76.1, 55765.0], [76.2, 55842.0], [76.3, 55930.0], [76.4, 55974.0], [76.5, 56030.0], [76.6, 56044.0], [76.7, 56093.0], [76.8, 56114.0], [76.9, 56137.0], [77.0, 56180.0], [77.1, 56223.0], [77.2, 56233.0], [77.3, 56261.0], [77.4, 56338.0], [77.5, 56405.0], [77.6, 56475.0], [77.7, 56611.0], [77.8, 56667.0], [77.9, 56682.0], [78.0, 56695.0], [78.1, 56805.0], [78.2, 56817.0], [78.3, 56917.0], [78.4, 56920.0], [78.5, 57013.0], [78.6, 57067.0], [78.7, 57121.0], [78.8, 57247.0], [78.9, 57356.0], [79.0, 57401.0], [79.1, 57502.0], [79.2, 57714.0], [79.3, 57818.0], [79.4, 57852.0], [79.5, 57863.0], [79.6, 58004.0], [79.7, 58073.0], [79.8, 58137.0], [79.9, 58173.0], [80.0, 58275.0], [80.1, 58290.0], [80.2, 58407.0], [80.3, 58636.0], [80.4, 58765.0], [80.5, 58809.0], [80.6, 58968.0], [80.7, 58993.0], [80.8, 59012.0], [80.9, 59055.0], [81.0, 59123.0], [81.1, 59164.0], [81.2, 59228.0], [81.3, 59276.0], [81.4, 59328.0], [81.5, 59395.0], [81.6, 59458.0], [81.7, 59511.0], [81.8, 59558.0], [81.9, 59609.0], [82.0, 59701.0], [82.1, 59861.0], [82.2, 59954.0], [82.3, 60232.0], [82.4, 60295.0], [82.5, 60385.0], [82.6, 60545.0], [82.7, 60561.0], [82.8, 60661.0], [82.9, 60681.0], [83.0, 60851.0], [83.1, 60925.0], [83.2, 61031.0], [83.3, 61129.0], [83.4, 61134.0], [83.5, 61204.0], [83.6, 61232.0], [83.7, 61444.0], [83.8, 61457.0], [83.9, 61568.0], [84.0, 61647.0], [84.1, 61823.0], [84.2, 61830.0], [84.3, 61879.0], [84.4, 61908.0], [84.5, 62127.0], [84.6, 62188.0], [84.7, 62260.0], [84.8, 62514.0], [84.9, 62563.0], [85.0, 62709.0], [85.1, 62746.0], [85.2, 63075.0], [85.3, 63095.0], [85.4, 63285.0], [85.5, 63415.0], [85.6, 63666.0], [85.7, 63857.0], [85.8, 63955.0], [85.9, 64027.0], [86.0, 64078.0], [86.1, 64093.0], [86.2, 64147.0], [86.3, 64192.0], [86.4, 64223.0], [86.5, 64406.0], [86.6, 64513.0], [86.7, 64621.0], [86.8, 64628.0], [86.9, 64681.0], [87.0, 64911.0], [87.1, 64997.0], [87.2, 65038.0], [87.3, 65433.0], [87.4, 65641.0], [87.5, 65720.0], [87.6, 65769.0], [87.7, 65803.0], [87.8, 65830.0], [87.9, 65856.0], [88.0, 66330.0], [88.1, 66675.0], [88.2, 66689.0], [88.3, 66819.0], [88.4, 66923.0], [88.5, 66933.0], [88.6, 67088.0], [88.7, 67328.0], [88.8, 67522.0], [88.9, 67889.0], [89.0, 68024.0], [89.1, 68362.0], [89.2, 68726.0], [89.3, 68937.0], [89.4, 69276.0], [89.5, 69513.0], [89.6, 69822.0], [89.7, 69853.0], [89.8, 69921.0], [89.9, 70294.0], [90.0, 70459.0], [90.1, 70568.0], [90.2, 70757.0], [90.3, 70976.0], [90.4, 71055.0], [90.5, 71141.0], [90.6, 71348.0], [90.7, 71421.0], [90.8, 71525.0], [90.9, 71769.0], [91.0, 71870.0], [91.1, 71984.0], [91.2, 71993.0], [91.3, 72009.0], [91.4, 72153.0], [91.5, 72541.0], [91.6, 72561.0], [91.7, 72802.0], [91.8, 72926.0], [91.9, 72964.0], [92.0, 73165.0], [92.1, 73288.0], [92.2, 73539.0], [92.3, 73588.0], [92.4, 73738.0], [92.5, 73844.0], [92.6, 73910.0], [92.7, 74067.0], [92.8, 74120.0], [92.9, 74690.0], [93.0, 74715.0], [93.1, 74760.0], [93.2, 74809.0], [93.3, 74986.0], [93.4, 75248.0], [93.5, 75389.0], [93.6, 75655.0], [93.7, 75760.0], [93.8, 75967.0], [93.9, 76216.0], [94.0, 76468.0], [94.1, 76623.0], [94.2, 76736.0], [94.3, 77139.0], [94.4, 77359.0], [94.5, 77471.0], [94.6, 77626.0], [94.7, 77938.0], [94.8, 77965.0], [94.9, 77991.0], [95.0, 78147.0], [95.1, 78371.0], [95.2, 78611.0], [95.3, 78897.0], [95.4, 79043.0], [95.5, 79172.0], [95.6, 79253.0], [95.7, 79509.0], [95.8, 80225.0], [95.9, 80712.0], [96.0, 80786.0], [96.1, 81046.0], [96.2, 81202.0], [96.3, 81256.0], [96.4, 81404.0], [96.5, 81758.0], [96.6, 83371.0], [96.7, 83556.0], [96.8, 84011.0], [96.9, 84430.0], [97.0, 85681.0], [97.1, 85747.0], [97.2, 86024.0], [97.3, 86848.0], [97.4, 87894.0], [97.5, 88074.0], [97.6, 88702.0], [97.7, 88947.0], [97.8, 89002.0], [97.9, 89054.0], [98.0, 89532.0], [98.1, 90299.0], [98.2, 90347.0], [98.3, 92120.0], [98.4, 92503.0], [98.5, 92640.0], [98.6, 92800.0], [98.7, 93271.0], [98.8, 94514.0], [98.9, 98450.0], [99.0, 99928.0], [99.1, 100044.0], [99.2, 102267.0], [99.3, 107245.0], [99.4, 111306.0], [99.5, 113407.0], [99.6, 114706.0], [99.7, 115034.0], [99.8, 119201.0], [99.9, 120011.0]], "isOverall": false, "label": "HTTP\u8BF7\u6C42", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 0.0, "maxY": 43.0, "series": [{"data": [[0.0, 43.0], [68300.0, 1.0], [66700.0, 1.0], [71500.0, 2.0], [69900.0, 1.0], [73100.0, 1.0], [74700.0, 4.0], [76300.0, 1.0], [77900.0, 4.0], [79500.0, 2.0], [89100.0, 1.0], [114700.0, 1.0], [32900.0, 4.0], [33700.0, 4.0], [34500.0, 4.0], [35300.0, 5.0], [36100.0, 5.0], [36900.0, 1.0], [37700.0, 4.0], [38500.0, 6.0], [40100.0, 6.0], [39300.0, 3.0], [40900.0, 1.0], [42500.0, 6.0], [41700.0, 9.0], [44100.0, 5.0], [43300.0, 6.0], [44900.0, 7.0], [45700.0, 6.0], [46500.0, 3.0], [47300.0, 7.0], [48100.0, 6.0], [48900.0, 3.0], [50500.0, 4.0], [49700.0, 3.0], [52100.0, 3.0], [52900.0, 6.0], [51300.0, 6.0], [54500.0, 6.0], [53700.0, 1.0], [56900.0, 4.0], [56100.0, 6.0], [59300.0, 3.0], [57700.0, 2.0], [60900.0, 2.0], [62500.0, 2.0], [63300.0, 1.0], [61700.0, 1.0], [64100.0, 4.0], [64900.0, 2.0], [65800.0, 5.0], [73800.0, 2.0], [75400.0, 1.0], [78600.0, 1.0], [80200.0, 1.0], [3900.0, 1.0], [4000.0, 1.0], [66500.0, 1.0], [68100.0, 1.0], [4400.0, 1.0], [69700.0, 1.0], [71300.0, 2.0], [72900.0, 3.0], [4700.0, 1.0], [5000.0, 1.0], [5300.0, 1.0], [85700.0, 1.0], [5600.0, 1.0], [88900.0, 1.0], [92100.0, 2.0], [6100.0, 1.0], [6300.0, 1.0], [6800.0, 1.0], [7000.0, 1.0], [111300.0, 1.0], [7400.0, 1.0], [7800.0, 1.0], [8100.0, 1.0], [8800.0, 1.0], [9600.0, 1.0], [10600.0, 1.0], [11200.0, 2.0], [11000.0, 1.0], [12200.0, 1.0], [13000.0, 1.0], [13800.0, 1.0], [14000.0, 1.0], [15400.0, 1.0], [18000.0, 1.0], [18400.0, 2.0], [20000.0, 1.0], [20800.0, 2.0], [22400.0, 1.0], [21600.0, 2.0], [23600.0, 1.0], [24800.0, 1.0], [25200.0, 1.0], [26400.0, 1.0], [25600.0, 2.0], [27200.0, 3.0], [27600.0, 4.0], [26800.0, 2.0], [28400.0, 2.0], [28000.0, 3.0], [29200.0, 3.0], [28800.0, 4.0], [29600.0, 2.0], [30400.0, 2.0], [30000.0, 6.0], [31600.0, 6.0], [31200.0, 2.0], [30800.0, 2.0], [32000.0, 5.0], [32400.0, 4.0], [33600.0, 6.0], [32800.0, 6.0], [34400.0, 3.0], [36800.0, 8.0], [35200.0, 5.0], [36000.0, 5.0], [37600.0, 4.0], [38400.0, 6.0], [39200.0, 6.0], [40000.0, 9.0], [40800.0, 2.0], [41600.0, 4.0], [42400.0, 5.0], [44800.0, 7.0], [43200.0, 7.0], [44000.0, 2.0], [46400.0, 11.0], [45600.0, 5.0], [48000.0, 5.0], [48800.0, 2.0], [47200.0, 4.0], [50400.0, 4.0], [49600.0, 4.0], [51200.0, 4.0], [52800.0, 4.0], [52000.0, 2.0], [55200.0, 3.0], [53600.0, 3.0], [54400.0, 2.0], [56800.0, 3.0], [56000.0, 6.0], [58400.0, 1.0], [59200.0, 4.0], [60800.0, 2.0], [61600.0, 2.0], [63200.0, 2.0], [64000.0, 4.0], [65600.0, 2.0], [67200.0, 1.0], [70400.0, 1.0], [73600.0, 1.0], [72000.0, 1.0], [75200.0, 1.0], [81600.0, 1.0], [78400.0, 1.0], [88000.0, 1.0], [92800.0, 1.0], [110400.0, 1.0], [107200.0, 1.0], [112000.0, 1.0], [120000.0, 3.0], [68700.0, 1.0], [70300.0, 1.0], [71900.0, 4.0], [73500.0, 2.0], [76700.0, 1.0], [78300.0, 1.0], [89500.0, 1.0], [33900.0, 6.0], [33100.0, 8.0], [34700.0, 2.0], [36300.0, 1.0], [35500.0, 6.0], [37900.0, 6.0], [38700.0, 5.0], [37100.0, 3.0], [39500.0, 1.0], [40300.0, 3.0], [41900.0, 1.0], [41100.0, 4.0], [42700.0, 2.0], [43500.0, 6.0], [44300.0, 6.0], [46700.0, 6.0], [45900.0, 5.0], [45100.0, 5.0], [47500.0, 4.0], [49100.0, 2.0], [48300.0, 1.0], [49900.0, 3.0], [50700.0, 5.0], [52300.0, 7.0], [51500.0, 1.0], [53100.0, 2.0], [54700.0, 4.0], [53900.0, 4.0], [56300.0, 2.0], [57100.0, 3.0], [55500.0, 1.0], [58700.0, 1.0], [60300.0, 3.0], [59500.0, 4.0], [61100.0, 3.0], [62700.0, 4.0], [61900.0, 2.0], [65100.0, 1.0], [67800.0, 1.0], [69400.0, 1.0], [72600.0, 1.0], [71000.0, 2.0], [77400.0, 1.0], [79000.0, 1.0], [80600.0, 1.0], [90200.0, 1.0], [66900.0, 3.0], [68500.0, 1.0], [71700.0, 1.0], [74900.0, 2.0], [78100.0, 2.0], [92500.0, 2.0], [90900.0, 1.0], [18900.0, 1.0], [20500.0, 1.0], [21300.0, 1.0], [22100.0, 2.0], [21700.0, 1.0], [22900.0, 1.0], [23300.0, 1.0], [24500.0, 2.0], [24900.0, 1.0], [26500.0, 3.0], [26100.0, 3.0], [25700.0, 1.0], [27300.0, 5.0], [26900.0, 1.0], [28100.0, 4.0], [28500.0, 3.0], [27700.0, 3.0], [29300.0, 2.0], [28900.0, 4.0], [29700.0, 4.0], [30100.0, 1.0], [30500.0, 5.0], [31300.0, 4.0], [31700.0, 2.0], [30900.0, 5.0], [32500.0, 3.0], [32100.0, 5.0], [33000.0, 2.0], [33800.0, 1.0], [34600.0, 4.0], [35400.0, 1.0], [36200.0, 4.0], [37000.0, 11.0], [38600.0, 6.0], [37800.0, 1.0], [39400.0, 5.0], [40200.0, 2.0], [42600.0, 7.0], [41800.0, 2.0], [41000.0, 4.0], [44200.0, 4.0], [43400.0, 13.0], [45000.0, 7.0], [45800.0, 10.0], [46600.0, 2.0], [48200.0, 5.0], [47400.0, 3.0], [50600.0, 1.0], [49800.0, 4.0], [52200.0, 4.0], [53000.0, 4.0], [51400.0, 5.0], [53800.0, 7.0], [54600.0, 5.0], [55400.0, 4.0], [57000.0, 2.0], [56200.0, 4.0], [57800.0, 5.0], [58600.0, 3.0], [61000.0, 2.0], [60200.0, 3.0], [59400.0, 2.0], [61800.0, 5.0], [63400.0, 2.0], [65000.0, 2.0], [64200.0, 2.0], [67600.0, 1.0], [69200.0, 1.0], [75600.0, 1.0], [74000.0, 1.0], [78800.0, 1.0], [86800.0, 2.0], [93200.0, 1.0], [67500.0, 1.0], [70700.0, 2.0], [77100.0, 2.0], [73900.0, 2.0], [83500.0, 1.0], [89900.0, 1.0], [34100.0, 6.0], [33300.0, 2.0], [34900.0, 6.0], [36500.0, 4.0], [35700.0, 3.0], [37300.0, 7.0], [38900.0, 6.0], [38100.0, 7.0], [39700.0, 4.0], [40500.0, 7.0], [41300.0, 7.0], [42900.0, 3.0], [42100.0, 2.0], [43700.0, 3.0], [44500.0, 8.0], [46900.0, 3.0], [45300.0, 6.0], [46100.0, 3.0], [47700.0, 5.0], [48500.0, 5.0], [50100.0, 3.0], [49300.0, 3.0], [50900.0, 1.0], [51700.0, 2.0], [52500.0, 3.0], [53300.0, 3.0], [54100.0, 3.0], [54900.0, 4.0], [55700.0, 3.0], [57300.0, 1.0], [56500.0, 1.0], [58900.0, 3.0], [58100.0, 3.0], [59700.0, 2.0], [60500.0, 2.0], [62100.0, 2.0], [64500.0, 2.0], [66600.0, 2.0], [71400.0, 1.0], [73000.0, 1.0], [69800.0, 3.0], [76200.0, 1.0], [74600.0, 1.0], [81000.0, 2.0], [85800.0, 1.0], [89000.0, 3.0], [100200.0, 1.0], [65700.0, 4.0], [67300.0, 2.0], [68900.0, 2.0], [70500.0, 1.0], [72100.0, 2.0], [73700.0, 1.0], [75300.0, 2.0], [76900.0, 1.0], [80100.0, 1.0], [81700.0, 1.0], [83300.0, 1.0], [88100.0, 1.0], [92900.0, 1.0], [94500.0, 1.0], [113700.0, 1.0], [8300.0, 2.0], [9500.0, 1.0], [9900.0, 1.0], [10100.0, 1.0], [10500.0, 2.0], [11900.0, 1.0], [12300.0, 1.0], [12500.0, 1.0], [13100.0, 1.0], [13500.0, 1.0], [13700.0, 1.0], [14500.0, 1.0], [15700.0, 1.0], [15900.0, 1.0], [16300.0, 1.0], [17000.0, 1.0], [16600.0, 1.0], [18200.0, 2.0], [18600.0, 2.0], [19800.0, 1.0], [20600.0, 1.0], [21400.0, 1.0], [22200.0, 2.0], [23000.0, 1.0], [22600.0, 2.0], [23400.0, 1.0], [24200.0, 2.0], [23800.0, 1.0], [25400.0, 2.0], [25000.0, 1.0], [24600.0, 1.0], [26200.0, 2.0], [25800.0, 1.0], [27000.0, 4.0], [27400.0, 1.0], [28200.0, 3.0], [28600.0, 6.0], [27800.0, 3.0], [29400.0, 1.0], [30200.0, 1.0], [29800.0, 3.0], [30600.0, 2.0], [31000.0, 3.0], [31400.0, 2.0], [31800.0, 5.0], [32600.0, 1.0], [32200.0, 4.0], [34000.0, 6.0], [34800.0, 4.0], [33200.0, 5.0], [35600.0, 8.0], [36400.0, 6.0], [37200.0, 1.0], [38000.0, 2.0], [38800.0, 1.0], [39600.0, 4.0], [40400.0, 1.0], [42800.0, 1.0], [41200.0, 4.0], [42000.0, 4.0], [44400.0, 2.0], [43600.0, 3.0], [45200.0, 7.0], [46800.0, 5.0], [46000.0, 1.0], [47600.0, 6.0], [48400.0, 2.0], [50800.0, 4.0], [50000.0, 2.0], [53200.0, 9.0], [51600.0, 3.0], [52400.0, 3.0], [54000.0, 3.0], [54800.0, 4.0], [56400.0, 3.0], [57200.0, 2.0], [55600.0, 2.0], [58800.0, 2.0], [58000.0, 3.0], [61200.0, 4.0], [59600.0, 1.0], [62800.0, 1.0], [63600.0, 1.0], [64400.0, 2.0], [68000.0, 1.0], [72800.0, 1.0], [77600.0, 2.0], [74400.0, 1.0], [79200.0, 1.0], [80800.0, 1.0], [84000.0, 1.0], [85600.0, 1.0], [100000.0, 2.0], [98400.0, 1.0], [119200.0, 1.0], [66300.0, 1.0], [69500.0, 1.0], [71100.0, 2.0], [75900.0, 2.0], [77500.0, 1.0], [79100.0, 2.0], [80700.0, 2.0], [85500.0, 1.0], [88700.0, 2.0], [87100.0, 1.0], [93500.0, 1.0], [90300.0, 1.0], [99900.0, 1.0], [33500.0, 2.0], [34300.0, 4.0], [35100.0, 7.0], [35900.0, 4.0], [36700.0, 4.0], [38300.0, 5.0], [37500.0, 5.0], [39900.0, 5.0], [39100.0, 1.0], [40700.0, 4.0], [42300.0, 1.0], [41500.0, 2.0], [43100.0, 3.0], [43900.0, 4.0], [44700.0, 4.0], [47100.0, 6.0], [45500.0, 3.0], [46300.0, 2.0], [48700.0, 10.0], [47900.0, 4.0], [50300.0, 2.0], [49500.0, 6.0], [51100.0, 7.0], [52700.0, 4.0], [51900.0, 7.0], [53500.0, 9.0], [54300.0, 3.0], [55100.0, 5.0], [55900.0, 2.0], [56700.0, 1.0], [57500.0, 3.0], [59100.0, 4.0], [58300.0, 1.0], [59900.0, 1.0], [61500.0, 2.0], [63900.0, 3.0], [67000.0, 1.0], [70200.0, 1.0], [71800.0, 2.0], [73400.0, 1.0], [76600.0, 2.0], [81400.0, 1.0], [83000.0, 1.0], [87800.0, 1.0], [92600.0, 1.0], [99000.0, 1.0], [102200.0, 1.0], [113400.0, 1.0], [116600.0, 1.0], [115000.0, 1.0], [72500.0, 3.0], [70900.0, 2.0], [74100.0, 2.0], [75700.0, 2.0], [77300.0, 1.0], [78900.0, 1.0], [83700.0, 1.0], [17100.0, 1.0], [16700.0, 1.0], [17500.0, 2.0], [18700.0, 1.0], [19100.0, 3.0], [19500.0, 1.0], [19900.0, 1.0], [20300.0, 1.0], [21100.0, 1.0], [21500.0, 1.0], [21900.0, 3.0], [22300.0, 1.0], [23500.0, 2.0], [23100.0, 1.0], [23900.0, 1.0], [24300.0, 1.0], [25500.0, 2.0], [24700.0, 1.0], [25900.0, 1.0], [26300.0, 1.0], [27100.0, 2.0], [27900.0, 3.0], [28300.0, 1.0], [29500.0, 5.0], [29100.0, 2.0], [28700.0, 4.0], [30700.0, 3.0], [29900.0, 3.0], [30300.0, 5.0], [31100.0, 2.0], [31500.0, 3.0], [32300.0, 5.0], [31900.0, 4.0], [32700.0, 3.0], [33400.0, 3.0], [34200.0, 1.0], [35000.0, 7.0], [36600.0, 7.0], [35800.0, 2.0], [38200.0, 5.0], [37400.0, 2.0], [40600.0, 6.0], [39800.0, 1.0], [39000.0, 1.0], [41400.0, 4.0], [42200.0, 3.0], [43000.0, 3.0], [43800.0, 6.0], [44600.0, 3.0], [46200.0, 4.0], [47000.0, 3.0], [45400.0, 6.0], [47800.0, 4.0], [48600.0, 4.0], [50200.0, 4.0], [51000.0, 5.0], [49400.0, 3.0], [51800.0, 3.0], [52600.0, 5.0], [53400.0, 5.0], [55000.0, 4.0], [54200.0, 4.0], [56600.0, 6.0], [55800.0, 2.0], [59000.0, 3.0], [58200.0, 3.0], [57400.0, 1.0], [60600.0, 4.0], [59800.0, 2.0], [61400.0, 2.0], [62200.0, 3.0], [63000.0, 2.0], [64600.0, 5.0], [65400.0, 1.0], [63800.0, 1.0], [66800.0, 2.0], [70000.0, 1.0], [73200.0, 2.0], [76400.0, 1.0], [74800.0, 1.0], [81200.0, 3.0], [78000.0, 1.0], [84400.0, 2.0], [86000.0, 1.0]], "isOverall": false, "label": "HTTP\u8BF7\u6C42", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 120000.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 3.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 1683.0, "series": [{"data": [[0.0, 43.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 1683.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [[3.0, 3.0]], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 3.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 62.67415730337077, "minX": 1.6360908E12, "maxY": 150.0, "series": [{"data": [[1.63609086E12, 103.50322580645155], [1.63609116E12, 133.56862745098033], [1.63609134E12, 150.0], [1.63609098E12, 120.0], [1.63609128E12, 143.34437086092714], [1.6360908E12, 62.67415730337077], [1.63609146E12, 70.77272727272727], [1.6360914E12, 147.39610389610388], [1.63609092E12, 113.57051282051282], [1.6360911E12, 130.0], [1.63609104E12, 123.5723684210526], [1.63609122E12, 140.0]], "isOverall": false, "label": "jp@gc - Ultimate Thread Group", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.63609146E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 14.0, "minX": 2.0, "maxY": 80824.0, "series": [{"data": [[2.0, 19.75], [3.0, 18.25], [4.0, 17.5], [7.0, 15.4], [8.0, 19.75], [11.0, 19.0], [12.0, 18.0], [16.0, 14.0], [17.0, 55157.0], [18.0, 56805.0], [19.0, 47480.0], [20.0, 47664.0], [21.0, 48758.0], [22.0, 55024.0], [23.0, 53460.0], [24.0, 53549.0], [25.0, 26765.0], [26.0, 54831.0], [27.0, 27547.5], [28.0, 45041.0], [29.0, 54847.0], [30.0, 27844.5], [31.0, 57013.0], [33.0, 18314.666666666668], [32.0, 55767.0], [35.0, 73402.0], [34.0, 53639.0], [37.0, 68726.0], [36.0, 73818.0], [38.0, 37227.5], [39.0, 73165.0], [41.0, 23681.0], [40.0, 74067.0], [43.0, 38061.0], [42.0, 41238.0], [45.0, 59120.0], [44.0, 43058.0], [47.0, 41986.333333333336], [46.0, 62188.0], [49.0, 28004.5], [48.0, 41670.0], [51.0, 21328.666666666668], [50.0, 59246.0], [53.0, 56044.0], [52.0, 76691.0], [55.0, 25014.0], [54.0, 40020.0], [57.0, 57863.0], [56.0, 56044.0], [59.0, 19238.0], [58.0, 56920.0], [60.0, 17047.333333333332], [61.0, 18399.0], [63.0, 51370.0], [62.0, 51346.0], [64.0, 28998.5], [65.0, 22502.0], [67.0, 55122.0], [66.0, 45739.0], [69.0, 21920.666666666668], [71.0, 56693.0], [70.0, 43484.0], [68.0, 58635.0], [73.0, 26075.0], [75.0, 52913.0], [74.0, 52252.0], [72.0, 45678.0], [77.0, 22864.0], [79.0, 39476.0], [78.0, 38146.0], [76.0, 58073.0], [81.0, 19888.333333333336], [83.0, 54212.0], [82.0, 71055.0], [80.0, 38519.0], [87.0, 28643.0], [86.0, 71923.0], [85.0, 44957.0], [84.0, 53469.0], [90.0, 28026.0], [91.0, 18486.0], [89.0, 76736.0], [88.0, 76623.0], [95.0, 24093.333333333332], [94.0, 72926.0], [93.0, 46318.0], [92.0, 54255.0], [96.0, 36780.5], [98.0, 27554.5], [99.0, 51920.0], [97.0, 72009.0], [100.0, 26179.05970149254], [103.0, 32161.0], [102.0, 71995.0], [101.0, 51774.0], [105.0, 39831.0], [107.0, 30975.0], [106.0, 42739.0], [104.0, 64621.0], [108.0, 59577.5], [110.0, 39900.686274509804], [111.0, 63285.0], [109.0, 61457.0], [112.0, 52531.5], [115.0, 34667.0], [114.0, 59123.0], [113.0, 29342.0], [119.0, 53096.0], [118.0, 55876.0], [117.0, 80824.0], [116.0, 26133.0], [120.0, 45769.30819672127], [123.0, 53565.0], [122.0, 59276.0], [121.0, 60241.0], [127.0, 75655.0], [126.0, 73288.0], [125.0, 74120.0], [124.0, 60780.0], [130.0, 47278.99346405227], [132.0, 37900.5], [135.0, 37027.5], [134.0, 42679.0], [133.0, 49657.0], [131.0, 40089.0], [129.0, 61760.0], [128.0, 74715.0], [139.0, 59880.0], [140.0, 51304.726666666655], [142.0, 42016.5], [143.0, 43219.0], [141.0, 46203.0], [138.0, 37968.0], [137.0, 40563.0], [136.0, 44577.0], [145.0, 45574.5], [148.0, 49242.71428571429], [150.0, 54764.082278481], [149.0, 42625.5], [147.0, 47931.85714285714], [146.0, 35045.0], [144.0, 35113.0]], "isOverall": false, "label": "HTTP\u8BF7\u6C42", "isController": false}, {"data": [[123.14979757085018, 45786.901098901064]], "isOverall": false, "label": "HTTP\u8BF7\u6C42-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 150.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 354.51666666666665, "minX": 1.6360908E12, "maxY": 76097.78333333334, "series": [{"data": [[1.63609086E12, 75300.75], [1.63609116E12, 74403.86666666667], [1.63609134E12, 75892.66666666667], [1.63609098E12, 74201.96666666666], [1.63609128E12, 72917.76666666666], [1.6360908E12, 22733.55], [1.63609146E12, 53608.2], [1.6360914E12, 74945.03333333334], [1.63609092E12, 76097.78333333334], [1.6360911E12, 75131.9], [1.63609104E12, 74027.71666666666], [1.63609122E12, 70538.68333333333]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.63609086E12, 617.4166666666666], [1.63609116E12, 609.45], [1.63609134E12, 621.4], [1.63609098E12, 605.4666666666667], [1.63609128E12, 601.4833333333333], [1.6360908E12, 354.51666666666665], [1.63609146E12, 438.1666666666667], [1.6360914E12, 613.4333333333333], [1.63609092E12, 621.4], [1.6360911E12, 613.4333333333333], [1.63609104E12, 605.4666666666667], [1.63609122E12, 585.55]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.63609146E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 5525.258426966291, "minX": 1.6360908E12, "maxY": 55841.63636363637, "series": [{"data": [[1.63609086E12, 33000.23225806451], [1.63609116E12, 45664.20915032678], [1.63609134E12, 50771.333333333365], [1.63609098E12, 43636.37500000001], [1.63609128E12, 54533.08609271522], [1.6360908E12, 5525.258426966291], [1.63609146E12, 55491.972727272725], [1.6360914E12, 55841.63636363637], [1.63609092E12, 40697.10256410256], [1.6360911E12, 48480.2207792208], [1.63609104E12, 49854.25657894737], [1.63609122E12, 52301.44897959185]], "isOverall": false, "label": "HTTP\u8BF7\u6C42", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.63609146E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 5518.606741573033, "minX": 1.6360908E12, "maxY": 55829.13636363635, "series": [{"data": [[1.63609086E12, 32988.593548387085], [1.63609116E12, 45650.758169934656], [1.63609134E12, 50758.57051282053], [1.63609098E12, 43623.19736842106], [1.63609128E12, 54520.66887417217], [1.6360908E12, 5518.606741573033], [1.63609146E12, 55476.11818181819], [1.6360914E12, 55829.13636363635], [1.63609092E12, 40684.794871794875], [1.6360911E12, 48460.662337662325], [1.63609104E12, 49835.98684210524], [1.63609122E12, 52288.89115646261]], "isOverall": false, "label": "HTTP\u8BF7\u6C42", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.63609146E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 6.662337662337665, "minX": 1.6360908E12, "maxY": 10.753246753246758, "series": [{"data": [[1.63609086E12, 6.93548387096774], [1.63609116E12, 8.55555555555555], [1.63609134E12, 7.275641025641025], [1.63609098E12, 7.532894736842105], [1.63609128E12, 7.5761589403973515], [1.6360908E12, 8.067415730337075], [1.63609146E12, 6.836363636363636], [1.6360914E12, 6.662337662337665], [1.63609092E12, 6.666666666666669], [1.6360911E12, 10.753246753246758], [1.63609104E12, 7.861842105263164], [1.63609122E12, 7.734693877551021]], "isOverall": false, "label": "HTTP\u8BF7\u6C42", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.63609146E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 14.0, "minX": 1.6360908E12, "maxY": 119201.0, "series": [{"data": [[1.63609086E12, 56667.0], [1.63609116E12, 93271.0], [1.63609134E12, 115034.0], [1.63609098E12, 84430.0], [1.63609128E12, 113756.0], [1.6360908E12, 18009.0], [1.63609146E12, 83722.0], [1.6360914E12, 107245.0], [1.63609092E12, 78147.0], [1.6360911E12, 76468.0], [1.63609104E12, 119201.0], [1.63609122E12, 102267.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.63609086E12, 16385.0], [1.63609116E12, 20805.0], [1.63609134E12, 21998.0], [1.63609098E12, 17553.0], [1.63609128E12, 19145.0], [1.6360908E12, 14.0], [1.63609146E12, 26133.0], [1.6360914E12, 24576.0], [1.63609092E12, 20616.0], [1.6360911E12, 26378.0], [1.63609104E12, 19188.0], [1.63609122E12, 18269.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.63609086E12, 43768.0], [1.63609116E12, 63090.99999999999], [1.63609134E12, 74179.00000000001], [1.63609098E12, 61120.3], [1.63609128E12, 79483.4], [1.6360908E12, 14506.0], [1.63609146E12, 73525.3], [1.6360914E12, 78649.5], [1.63609092E12, 54584.8], [1.6360911E12, 64137.0], [1.63609104E12, 71337.0], [1.63609122E12, 77511.6]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.63609086E12, 56643.48], [1.63609116E12, 93016.66], [1.63609134E12, 114106.61000000002], [1.63609098E12, 84423.11], [1.63609128E12, 112893.08000000002], [1.6360908E12, 18009.0], [1.63609146E12, 83403.22], [1.6360914E12, 99699.54999999984], [1.63609092E12, 73670.79000000005], [1.6360911E12, 76204.54999999999], [1.63609104E12, 117846.31999999999], [1.63609122E12, 101244.41999999998]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.63609086E12, 50193.0], [1.63609116E12, 77849.49999999999], [1.63609134E12, 81457.1], [1.63609098E12, 68505.09999999998], [1.63609128E12, 88976.24999999997], [1.6360908E12, 16688.5], [1.63609146E12, 76711.25], [1.6360914E12, 88960.75], [1.63609092E12, 62700.000000000015], [1.6360911E12, 65823.75], [1.63609104E12, 87509.49999999999], [1.63609122E12, 89050.1]], "isOverall": false, "label": "95th percentile", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.63609146E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 16.0, "minX": 1.0, "maxY": 120012.5, "series": [{"data": [[4.0, 39131.5], [2.0, 43664.0], [1.0, 42143.0], [18.0, 18.0], [5.0, 10658.0], [3.0, 45855.0], [6.0, 17909.5], [7.0, 16.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[4.0, 120012.5], [3.0, 120010.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 18.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 16.0, "minX": 1.0, "maxY": 120012.0, "series": [{"data": [[4.0, 39121.5], [2.0, 43652.5], [1.0, 42123.0], [18.0, 18.0], [5.0, 10645.0], [3.0, 45841.0], [6.0, 17898.5], [7.0, 16.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[4.0, 120012.0], [3.0, 120010.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 18.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 2.1, "minX": 1.6360908E12, "maxY": 3.15, "series": [{"data": [[1.63609086E12, 2.75], [1.63609116E12, 2.683333333333333], [1.63609134E12, 2.566666666666667], [1.63609098E12, 2.533333333333333], [1.63609128E12, 2.65], [1.6360908E12, 3.15], [1.6360914E12, 2.1], [1.63609092E12, 2.7666666666666666], [1.6360911E12, 2.533333333333333], [1.63609104E12, 2.6666666666666665], [1.63609122E12, 2.4166666666666665]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.6360914E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 0.016666666666666666, "minX": 1.6360908E12, "maxY": 2.6, "series": [{"data": [[1.63609086E12, 2.5833333333333335], [1.63609116E12, 2.55], [1.63609134E12, 2.6], [1.63609098E12, 2.533333333333333], [1.63609128E12, 2.5], [1.6360908E12, 1.4833333333333334], [1.63609146E12, 1.8333333333333333], [1.6360914E12, 2.566666666666667], [1.63609092E12, 2.6], [1.6360911E12, 2.566666666666667], [1.63609104E12, 2.533333333333333], [1.63609122E12, 2.4166666666666665]], "isOverall": false, "label": "200", "isController": false}, {"data": [[1.63609128E12, 0.016666666666666666], [1.63609122E12, 0.03333333333333333]], "isOverall": false, "label": "404", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.63609146E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.016666666666666666, "minX": 1.6360908E12, "maxY": 2.6, "series": [{"data": [[1.63609128E12, 0.016666666666666666], [1.63609122E12, 0.03333333333333333]], "isOverall": false, "label": "HTTP\u8BF7\u6C42-failure", "isController": false}, {"data": [[1.63609086E12, 2.5833333333333335], [1.63609116E12, 2.55], [1.63609134E12, 2.6], [1.63609098E12, 2.533333333333333], [1.63609128E12, 2.5], [1.6360908E12, 1.4833333333333334], [1.63609146E12, 1.8333333333333333], [1.6360914E12, 2.566666666666667], [1.63609092E12, 2.6], [1.6360911E12, 2.566666666666667], [1.63609104E12, 2.533333333333333], [1.63609122E12, 2.4166666666666665]], "isOverall": false, "label": "HTTP\u8BF7\u6C42-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.63609146E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 0.016666666666666666, "minX": 1.6360908E12, "maxY": 2.6, "series": [{"data": [[1.63609086E12, 2.5833333333333335], [1.63609116E12, 2.55], [1.63609134E12, 2.6], [1.63609098E12, 2.533333333333333], [1.63609128E12, 2.5], [1.6360908E12, 1.4833333333333334], [1.63609146E12, 1.8333333333333333], [1.6360914E12, 2.566666666666667], [1.63609092E12, 2.6], [1.6360911E12, 2.566666666666667], [1.63609104E12, 2.533333333333333], [1.63609122E12, 2.4166666666666665]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [[1.63609128E12, 0.016666666666666666], [1.63609122E12, 0.03333333333333333]], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.63609146E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

