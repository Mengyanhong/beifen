/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 23.0, "minX": 0.0, "maxY": 70257.0, "series": [{"data": [[0.0, 23.0], [0.1, 26.0], [0.2, 39.0], [0.3, 47.0], [0.4, 82.0], [0.5, 85.0], [0.6, 175.0], [0.7, 3635.0], [0.8, 4166.0], [0.9, 4950.0], [1.0, 5263.0], [1.1, 5534.0], [1.2, 5874.0], [1.3, 6321.0], [1.4, 6325.0], [1.5, 6395.0], [1.6, 6475.0], [1.7, 6583.0], [1.8, 6762.0], [1.9, 6855.0], [2.0, 7019.0], [2.1, 7148.0], [2.2, 7251.0], [2.3, 7313.0], [2.4, 7336.0], [2.5, 7336.0], [2.6, 7371.0], [2.7, 7465.0], [2.8, 7476.0], [2.9, 7494.0], [3.0, 7500.0], [3.1, 7525.0], [3.2, 7531.0], [3.3, 7578.0], [3.4, 7590.0], [3.5, 7651.0], [3.6, 7673.0], [3.7, 7675.0], [3.8, 7731.0], [3.9, 7760.0], [4.0, 7775.0], [4.1, 7778.0], [4.2, 7795.0], [4.3, 7811.0], [4.4, 7813.0], [4.5, 7870.0], [4.6, 7872.0], [4.7, 7890.0], [4.8, 7893.0], [4.9, 7928.0], [5.0, 7931.0], [5.1, 7939.0], [5.2, 7939.0], [5.3, 7951.0], [5.4, 7957.0], [5.5, 7978.0], [5.6, 7991.0], [5.7, 8005.0], [5.8, 8018.0], [5.9, 8022.0], [6.0, 8032.0], [6.1, 8044.0], [6.2, 8044.0], [6.3, 8062.0], [6.4, 8064.0], [6.5, 8074.0], [6.6, 8080.0], [6.7, 8103.0], [6.8, 8132.0], [6.9, 8150.0], [7.0, 8172.0], [7.1, 8175.0], [7.2, 8184.0], [7.3, 8186.0], [7.4, 8189.0], [7.5, 8193.0], [7.6, 8203.0], [7.7, 8216.0], [7.8, 8226.0], [7.9, 8228.0], [8.0, 8237.0], [8.1, 8247.0], [8.2, 8254.0], [8.3, 8261.0], [8.4, 8262.0], [8.5, 8275.0], [8.6, 8288.0], [8.7, 8293.0], [8.8, 8312.0], [8.9, 8312.0], [9.0, 8327.0], [9.1, 8332.0], [9.2, 8341.0], [9.3, 8342.0], [9.4, 8352.0], [9.5, 8357.0], [9.6, 8358.0], [9.7, 8367.0], [9.8, 8375.0], [9.9, 8378.0], [10.0, 8385.0], [10.1, 8389.0], [10.2, 8404.0], [10.3, 8408.0], [10.4, 8420.0], [10.5, 8422.0], [10.6, 8435.0], [10.7, 8436.0], [10.8, 8445.0], [10.9, 8450.0], [11.0, 8469.0], [11.1, 8474.0], [11.2, 8478.0], [11.3, 8483.0], [11.4, 8485.0], [11.5, 8494.0], [11.6, 8503.0], [11.7, 8504.0], [11.8, 8512.0], [11.9, 8538.0], [12.0, 8544.0], [12.1, 8551.0], [12.2, 8555.0], [12.3, 8570.0], [12.4, 8597.0], [12.5, 8601.0], [12.6, 8602.0], [12.7, 8604.0], [12.8, 8608.0], [12.9, 8613.0], [13.0, 8623.0], [13.1, 8640.0], [13.2, 8661.0], [13.3, 8686.0], [13.4, 8699.0], [13.5, 8728.0], [13.6, 8735.0], [13.7, 8737.0], [13.8, 8774.0], [13.9, 8779.0], [14.0, 8786.0], [14.1, 8792.0], [14.2, 8801.0], [14.3, 8804.0], [14.4, 8821.0], [14.5, 8825.0], [14.6, 8828.0], [14.7, 8845.0], [14.8, 8846.0], [14.9, 8849.0], [15.0, 8863.0], [15.1, 8901.0], [15.2, 8906.0], [15.3, 8939.0], [15.4, 8984.0], [15.5, 8988.0], [15.6, 9002.0], [15.7, 9002.0], [15.8, 9026.0], [15.9, 9057.0], [16.0, 9065.0], [16.1, 9084.0], [16.2, 9086.0], [16.3, 9098.0], [16.4, 9101.0], [16.5, 9110.0], [16.6, 9137.0], [16.7, 9162.0], [16.8, 9173.0], [16.9, 9180.0], [17.0, 9225.0], [17.1, 9251.0], [17.2, 9314.0], [17.3, 9324.0], [17.4, 9348.0], [17.5, 9355.0], [17.6, 9421.0], [17.7, 9425.0], [17.8, 9484.0], [17.9, 9520.0], [18.0, 9526.0], [18.1, 9566.0], [18.2, 9622.0], [18.3, 9662.0], [18.4, 9667.0], [18.5, 9702.0], [18.6, 9778.0], [18.7, 9801.0], [18.8, 9898.0], [18.9, 9907.0], [19.0, 10004.0], [19.1, 10024.0], [19.2, 10088.0], [19.3, 10099.0], [19.4, 10149.0], [19.5, 10369.0], [19.6, 10494.0], [19.7, 10583.0], [19.8, 10813.0], [19.9, 10890.0], [20.0, 10901.0], [20.1, 11078.0], [20.2, 11456.0], [20.3, 11963.0], [20.4, 12164.0], [20.5, 12187.0], [20.6, 12494.0], [20.7, 12591.0], [20.8, 12771.0], [20.9, 12834.0], [21.0, 13124.0], [21.1, 13176.0], [21.2, 13435.0], [21.3, 13483.0], [21.4, 13512.0], [21.5, 13532.0], [21.6, 13577.0], [21.7, 13664.0], [21.8, 13693.0], [21.9, 13809.0], [22.0, 13820.0], [22.1, 13849.0], [22.2, 13968.0], [22.3, 14129.0], [22.4, 14292.0], [22.5, 14394.0], [22.6, 14605.0], [22.7, 14614.0], [22.8, 14667.0], [22.9, 14677.0], [23.0, 14677.0], [23.1, 14733.0], [23.2, 14819.0], [23.3, 14891.0], [23.4, 14898.0], [23.5, 14936.0], [23.6, 14936.0], [23.7, 15035.0], [23.8, 15045.0], [23.9, 15075.0], [24.0, 15114.0], [24.1, 15122.0], [24.2, 15138.0], [24.3, 15174.0], [24.4, 15303.0], [24.5, 15319.0], [24.6, 15326.0], [24.7, 15342.0], [24.8, 15358.0], [24.9, 15385.0], [25.0, 15387.0], [25.1, 15423.0], [25.2, 15435.0], [25.3, 15449.0], [25.4, 15470.0], [25.5, 15508.0], [25.6, 15547.0], [25.7, 15552.0], [25.8, 15561.0], [25.9, 15565.0], [26.0, 15583.0], [26.1, 15590.0], [26.2, 15610.0], [26.3, 15655.0], [26.4, 15665.0], [26.5, 15677.0], [26.6, 15686.0], [26.7, 15715.0], [26.8, 15723.0], [26.9, 15749.0], [27.0, 15752.0], [27.1, 15760.0], [27.2, 15790.0], [27.3, 15793.0], [27.4, 15811.0], [27.5, 15828.0], [27.6, 15833.0], [27.7, 15841.0], [27.8, 15848.0], [27.9, 15853.0], [28.0, 15881.0], [28.1, 15898.0], [28.2, 15902.0], [28.3, 15939.0], [28.4, 15949.0], [28.5, 15960.0], [28.6, 15966.0], [28.7, 15985.0], [28.8, 15999.0], [28.9, 16004.0], [29.0, 16030.0], [29.1, 16056.0], [29.2, 16057.0], [29.3, 16064.0], [29.4, 16091.0], [29.5, 16097.0], [29.6, 16123.0], [29.7, 16129.0], [29.8, 16146.0], [29.9, 16153.0], [30.0, 16158.0], [30.1, 16170.0], [30.2, 16173.0], [30.3, 16177.0], [30.4, 16188.0], [30.5, 16190.0], [30.6, 16199.0], [30.7, 16266.0], [30.8, 16298.0], [30.9, 16312.0], [31.0, 16330.0], [31.1, 16332.0], [31.2, 16347.0], [31.3, 16349.0], [31.4, 16350.0], [31.5, 16356.0], [31.6, 16366.0], [31.7, 16372.0], [31.8, 16379.0], [31.9, 16411.0], [32.0, 16415.0], [32.1, 16428.0], [32.2, 16449.0], [32.3, 16458.0], [32.4, 16462.0], [32.5, 16479.0], [32.6, 16517.0], [32.7, 16520.0], [32.8, 16541.0], [32.9, 16550.0], [33.0, 16561.0], [33.1, 16584.0], [33.2, 16594.0], [33.3, 16601.0], [33.4, 16602.0], [33.5, 16608.0], [33.6, 16617.0], [33.7, 16636.0], [33.8, 16658.0], [33.9, 16674.0], [34.0, 16696.0], [34.1, 16700.0], [34.2, 16729.0], [34.3, 16744.0], [34.4, 16758.0], [34.5, 16761.0], [34.6, 16790.0], [34.7, 16791.0], [34.8, 16800.0], [34.9, 16834.0], [35.0, 16844.0], [35.1, 16917.0], [35.2, 16918.0], [35.3, 16939.0], [35.4, 16954.0], [35.5, 16992.0], [35.6, 16998.0], [35.7, 17026.0], [35.8, 17044.0], [35.9, 17074.0], [36.0, 17126.0], [36.1, 17213.0], [36.2, 17261.0], [36.3, 17262.0], [36.4, 17335.0], [36.5, 17365.0], [36.6, 17374.0], [36.7, 17399.0], [36.8, 17408.0], [36.9, 17498.0], [37.0, 17511.0], [37.1, 17555.0], [37.2, 17582.0], [37.3, 17658.0], [37.4, 17708.0], [37.5, 17730.0], [37.6, 17812.0], [37.7, 17888.0], [37.8, 17936.0], [37.9, 17985.0], [38.0, 18053.0], [38.1, 18084.0], [38.2, 18179.0], [38.3, 18251.0], [38.4, 18284.0], [38.5, 18362.0], [38.6, 18366.0], [38.7, 18417.0], [38.8, 18461.0], [38.9, 18512.0], [39.0, 18665.0], [39.1, 18754.0], [39.2, 18870.0], [39.3, 18890.0], [39.4, 19192.0], [39.5, 19218.0], [39.6, 19331.0], [39.7, 19429.0], [39.8, 19602.0], [39.9, 19645.0], [40.0, 19655.0], [40.1, 19736.0], [40.2, 19765.0], [40.3, 19842.0], [40.4, 19924.0], [40.5, 20037.0], [40.6, 20285.0], [40.7, 20418.0], [40.8, 20518.0], [40.9, 20565.0], [41.0, 20572.0], [41.1, 20595.0], [41.2, 20662.0], [41.3, 20795.0], [41.4, 20960.0], [41.5, 21188.0], [41.6, 21273.0], [41.7, 21423.0], [41.8, 21435.0], [41.9, 21547.0], [42.0, 21609.0], [42.1, 21694.0], [42.2, 21705.0], [42.3, 21834.0], [42.4, 21894.0], [42.5, 21925.0], [42.6, 22064.0], [42.7, 22094.0], [42.8, 22120.0], [42.9, 22121.0], [43.0, 22152.0], [43.1, 22185.0], [43.2, 22196.0], [43.3, 22230.0], [43.4, 22233.0], [43.5, 22291.0], [43.6, 22298.0], [43.7, 22459.0], [43.8, 22467.0], [43.9, 22526.0], [44.0, 22555.0], [44.1, 22603.0], [44.2, 22677.0], [44.3, 22697.0], [44.4, 22713.0], [44.5, 22731.0], [44.6, 22799.0], [44.7, 22805.0], [44.8, 22846.0], [44.9, 22868.0], [45.0, 22894.0], [45.1, 22906.0], [45.2, 22934.0], [45.3, 23012.0], [45.4, 23024.0], [45.5, 23065.0], [45.6, 23073.0], [45.7, 23089.0], [45.8, 23140.0], [45.9, 23147.0], [46.0, 23189.0], [46.1, 23191.0], [46.2, 23216.0], [46.3, 23235.0], [46.4, 23243.0], [46.5, 23259.0], [46.6, 23301.0], [46.7, 23368.0], [46.8, 23391.0], [46.9, 23418.0], [47.0, 23444.0], [47.1, 23490.0], [47.2, 23515.0], [47.3, 23522.0], [47.4, 23528.0], [47.5, 23561.0], [47.6, 23566.0], [47.7, 23567.0], [47.8, 23597.0], [47.9, 23604.0], [48.0, 23645.0], [48.1, 23678.0], [48.2, 23716.0], [48.3, 23735.0], [48.4, 23745.0], [48.5, 23749.0], [48.6, 23749.0], [48.7, 23777.0], [48.8, 23791.0], [48.9, 23826.0], [49.0, 23833.0], [49.1, 23865.0], [49.2, 23867.0], [49.3, 23870.0], [49.4, 23884.0], [49.5, 23885.0], [49.6, 23902.0], [49.7, 23906.0], [49.8, 23931.0], [49.9, 23948.0], [50.0, 23985.0], [50.1, 23998.0], [50.2, 24024.0], [50.3, 24030.0], [50.4, 24033.0], [50.5, 24041.0], [50.6, 24048.0], [50.7, 24057.0], [50.8, 24061.0], [50.9, 24063.0], [51.0, 24066.0], [51.1, 24078.0], [51.2, 24117.0], [51.3, 24122.0], [51.4, 24145.0], [51.5, 24151.0], [51.6, 24208.0], [51.7, 24239.0], [51.8, 24242.0], [51.9, 24260.0], [52.0, 24263.0], [52.1, 24274.0], [52.2, 24331.0], [52.3, 24351.0], [52.4, 24354.0], [52.5, 24359.0], [52.6, 24405.0], [52.7, 24405.0], [52.8, 24415.0], [52.9, 24457.0], [53.0, 24487.0], [53.1, 24514.0], [53.2, 24529.0], [53.3, 24533.0], [53.4, 24559.0], [53.5, 24588.0], [53.6, 24596.0], [53.7, 24634.0], [53.8, 24638.0], [53.9, 24641.0], [54.0, 24656.0], [54.1, 24678.0], [54.2, 24679.0], [54.3, 24712.0], [54.4, 24726.0], [54.5, 24734.0], [54.6, 24739.0], [54.7, 24756.0], [54.8, 24773.0], [54.9, 24789.0], [55.0, 24801.0], [55.1, 24854.0], [55.2, 24869.0], [55.3, 24876.0], [55.4, 24883.0], [55.5, 24928.0], [55.6, 24932.0], [55.7, 24936.0], [55.8, 24947.0], [55.9, 24968.0], [56.0, 25003.0], [56.1, 25005.0], [56.2, 25102.0], [56.3, 25120.0], [56.4, 25147.0], [56.5, 25169.0], [56.6, 25180.0], [56.7, 25190.0], [56.8, 25203.0], [56.9, 25234.0], [57.0, 25263.0], [57.1, 25269.0], [57.2, 25276.0], [57.3, 25301.0], [57.4, 25330.0], [57.5, 25430.0], [57.6, 25435.0], [57.7, 25586.0], [57.8, 25642.0], [57.9, 25673.0], [58.0, 25734.0], [58.1, 25735.0], [58.2, 25747.0], [58.3, 25750.0], [58.4, 25793.0], [58.5, 25824.0], [58.6, 25855.0], [58.7, 25882.0], [58.8, 25910.0], [58.9, 25943.0], [59.0, 25969.0], [59.1, 26036.0], [59.2, 26057.0], [59.3, 26119.0], [59.4, 26174.0], [59.5, 26193.0], [59.6, 26231.0], [59.7, 26306.0], [59.8, 26367.0], [59.9, 26413.0], [60.0, 26421.0], [60.1, 26433.0], [60.2, 26521.0], [60.3, 26631.0], [60.4, 26634.0], [60.5, 26724.0], [60.6, 26762.0], [60.7, 26810.0], [60.8, 26837.0], [60.9, 26917.0], [61.0, 26924.0], [61.1, 27034.0], [61.2, 27227.0], [61.3, 27316.0], [61.4, 27362.0], [61.5, 27419.0], [61.6, 27571.0], [61.7, 27576.0], [61.8, 27757.0], [61.9, 27822.0], [62.0, 27883.0], [62.1, 28298.0], [62.2, 28333.0], [62.3, 28472.0], [62.4, 28561.0], [62.5, 28699.0], [62.6, 28726.0], [62.7, 28877.0], [62.8, 28963.0], [62.9, 29124.0], [63.0, 29190.0], [63.1, 29259.0], [63.2, 29447.0], [63.3, 29454.0], [63.4, 29559.0], [63.5, 29568.0], [63.6, 29761.0], [63.7, 29861.0], [63.8, 29916.0], [63.9, 30040.0], [64.0, 30178.0], [64.1, 30459.0], [64.2, 30463.0], [64.3, 30531.0], [64.4, 30577.0], [64.5, 30681.0], [64.6, 30731.0], [64.7, 30739.0], [64.8, 30970.0], [64.9, 30986.0], [65.0, 31069.0], [65.1, 31128.0], [65.2, 31188.0], [65.3, 31271.0], [65.4, 31397.0], [65.5, 31432.0], [65.6, 31496.0], [65.7, 31583.0], [65.8, 31637.0], [65.9, 31720.0], [66.0, 31803.0], [66.1, 31883.0], [66.2, 31959.0], [66.3, 32080.0], [66.4, 32129.0], [66.5, 32149.0], [66.6, 32180.0], [66.7, 32187.0], [66.8, 32218.0], [66.9, 32248.0], [67.0, 32271.0], [67.1, 32400.0], [67.2, 32416.0], [67.3, 32483.0], [67.4, 32593.0], [67.5, 32628.0], [67.6, 32684.0], [67.7, 32813.0], [67.8, 32853.0], [67.9, 32877.0], [68.0, 32931.0], [68.1, 32944.0], [68.2, 32964.0], [68.3, 32969.0], [68.4, 32990.0], [68.5, 32998.0], [68.6, 33023.0], [68.7, 33087.0], [68.8, 33090.0], [68.9, 33175.0], [69.0, 33177.0], [69.1, 33190.0], [69.2, 33193.0], [69.3, 33234.0], [69.4, 33267.0], [69.5, 33283.0], [69.6, 33337.0], [69.7, 33380.0], [69.8, 33415.0], [69.9, 33419.0], [70.0, 33563.0], [70.1, 33575.0], [70.2, 33606.0], [70.3, 33618.0], [70.4, 33641.0], [70.5, 33651.0], [70.6, 33657.0], [70.7, 33738.0], [70.8, 33752.0], [70.9, 33763.0], [71.0, 33768.0], [71.1, 33802.0], [71.2, 33836.0], [71.3, 33856.0], [71.4, 33881.0], [71.5, 33934.0], [71.6, 33955.0], [71.7, 33961.0], [71.8, 33975.0], [71.9, 33978.0], [72.0, 34008.0], [72.1, 34111.0], [72.2, 34117.0], [72.3, 34125.0], [72.4, 34161.0], [72.5, 34188.0], [72.6, 34206.0], [72.7, 34249.0], [72.8, 34269.0], [72.9, 34296.0], [73.0, 34298.0], [73.1, 34303.0], [73.2, 34348.0], [73.3, 34370.0], [73.4, 34394.0], [73.5, 34421.0], [73.6, 34430.0], [73.7, 34470.0], [73.8, 34542.0], [73.9, 34598.0], [74.0, 34599.0], [74.1, 34661.0], [74.2, 34676.0], [74.3, 34693.0], [74.4, 34725.0], [74.5, 34767.0], [74.6, 34777.0], [74.7, 34798.0], [74.8, 34906.0], [74.9, 34930.0], [75.0, 34960.0], [75.1, 34996.0], [75.2, 35088.0], [75.3, 35090.0], [75.4, 35157.0], [75.5, 35162.0], [75.6, 35169.0], [75.7, 35174.0], [75.8, 35175.0], [75.9, 35237.0], [76.0, 35237.0], [76.1, 35256.0], [76.2, 35287.0], [76.3, 35386.0], [76.4, 35394.0], [76.5, 35427.0], [76.6, 35452.0], [76.7, 35455.0], [76.8, 35480.0], [76.9, 35493.0], [77.0, 35574.0], [77.1, 35579.0], [77.2, 35608.0], [77.3, 35652.0], [77.4, 35661.0], [77.5, 35727.0], [77.6, 35748.0], [77.7, 35766.0], [77.8, 35781.0], [77.9, 35785.0], [78.0, 35868.0], [78.1, 35910.0], [78.2, 35943.0], [78.3, 35957.0], [78.4, 36041.0], [78.5, 36062.0], [78.6, 36104.0], [78.7, 36106.0], [78.8, 36137.0], [78.9, 36178.0], [79.0, 36196.0], [79.1, 36257.0], [79.2, 36269.0], [79.3, 36308.0], [79.4, 36312.0], [79.5, 36356.0], [79.6, 36392.0], [79.7, 36447.0], [79.8, 36487.0], [79.9, 36511.0], [80.0, 36527.0], [80.1, 36544.0], [80.2, 36566.0], [80.3, 36569.0], [80.4, 36602.0], [80.5, 36631.0], [80.6, 36723.0], [80.7, 36748.0], [80.8, 36828.0], [80.9, 36874.0], [81.0, 36889.0], [81.1, 36978.0], [81.2, 36981.0], [81.3, 36992.0], [81.4, 37044.0], [81.5, 37150.0], [81.6, 37266.0], [81.7, 37297.0], [81.8, 37400.0], [81.9, 37470.0], [82.0, 37561.0], [82.1, 37591.0], [82.2, 37609.0], [82.3, 37631.0], [82.4, 37678.0], [82.5, 37710.0], [82.6, 37761.0], [82.7, 37814.0], [82.8, 37859.0], [82.9, 37895.0], [83.0, 37902.0], [83.1, 38071.0], [83.2, 38078.0], [83.3, 38110.0], [83.4, 38180.0], [83.5, 38181.0], [83.6, 38268.0], [83.7, 38313.0], [83.8, 38401.0], [83.9, 38479.0], [84.0, 38528.0], [84.1, 38588.0], [84.2, 38616.0], [84.3, 38873.0], [84.4, 38874.0], [84.5, 39001.0], [84.6, 39014.0], [84.7, 39021.0], [84.8, 39086.0], [84.9, 39088.0], [85.0, 39260.0], [85.1, 39369.0], [85.2, 39378.0], [85.3, 39437.0], [85.4, 39488.0], [85.5, 39532.0], [85.6, 39631.0], [85.7, 39699.0], [85.8, 39727.0], [85.9, 39736.0], [86.0, 39756.0], [86.1, 39789.0], [86.2, 39955.0], [86.3, 40085.0], [86.4, 40142.0], [86.5, 40186.0], [86.6, 40248.0], [86.7, 40340.0], [86.8, 40370.0], [86.9, 40380.0], [87.0, 40447.0], [87.1, 40489.0], [87.2, 40538.0], [87.3, 40582.0], [87.4, 40636.0], [87.5, 40709.0], [87.6, 40713.0], [87.7, 40735.0], [87.8, 40740.0], [87.9, 40838.0], [88.0, 40863.0], [88.1, 40941.0], [88.2, 41069.0], [88.3, 41075.0], [88.4, 41142.0], [88.5, 41147.0], [88.6, 41302.0], [88.7, 41401.0], [88.8, 41517.0], [88.9, 41531.0], [89.0, 41669.0], [89.1, 41731.0], [89.2, 41765.0], [89.3, 41974.0], [89.4, 41981.0], [89.5, 42038.0], [89.6, 42090.0], [89.7, 42173.0], [89.8, 42184.0], [89.9, 42307.0], [90.0, 42438.0], [90.1, 42526.0], [90.2, 42592.0], [90.3, 42631.0], [90.4, 42714.0], [90.5, 42721.0], [90.6, 42802.0], [90.7, 42925.0], [90.8, 42972.0], [90.9, 42987.0], [91.0, 43004.0], [91.1, 43028.0], [91.2, 43058.0], [91.3, 43092.0], [91.4, 43131.0], [91.5, 43157.0], [91.6, 43227.0], [91.7, 43256.0], [91.8, 43268.0], [91.9, 43313.0], [92.0, 43482.0], [92.1, 43508.0], [92.2, 43592.0], [92.3, 43615.0], [92.4, 43848.0], [92.5, 43879.0], [92.6, 43929.0], [92.7, 44136.0], [92.8, 44250.0], [92.9, 44324.0], [93.0, 44460.0], [93.1, 44534.0], [93.2, 44763.0], [93.3, 45121.0], [93.4, 45139.0], [93.5, 45265.0], [93.6, 45421.0], [93.7, 45521.0], [93.8, 45538.0], [93.9, 45540.0], [94.0, 45662.0], [94.1, 45714.0], [94.2, 45851.0], [94.3, 45922.0], [94.4, 45937.0], [94.5, 45981.0], [94.6, 46011.0], [94.7, 46214.0], [94.8, 46280.0], [94.9, 46458.0], [95.0, 46661.0], [95.1, 46756.0], [95.2, 46975.0], [95.3, 47004.0], [95.4, 47144.0], [95.5, 47190.0], [95.6, 47402.0], [95.7, 47494.0], [95.8, 47511.0], [95.9, 47719.0], [96.0, 47962.0], [96.1, 48168.0], [96.2, 48317.0], [96.3, 48370.0], [96.4, 48425.0], [96.5, 48528.0], [96.6, 48551.0], [96.7, 48700.0], [96.8, 48909.0], [96.9, 48935.0], [97.0, 49118.0], [97.1, 49197.0], [97.2, 49731.0], [97.3, 49746.0], [97.4, 50077.0], [97.5, 50295.0], [97.6, 50673.0], [97.7, 51132.0], [97.8, 51175.0], [97.9, 51528.0], [98.0, 51690.0], [98.1, 51742.0], [98.2, 52145.0], [98.3, 53461.0], [98.4, 53975.0], [98.5, 54023.0], [98.6, 54860.0], [98.7, 54910.0], [98.8, 55260.0], [98.9, 55266.0], [99.0, 55369.0], [99.1, 55388.0], [99.2, 55714.0], [99.3, 55754.0], [99.4, 55797.0], [99.5, 55975.0], [99.6, 56272.0], [99.7, 56668.0], [99.8, 57640.0], [99.9, 58940.0], [100.0, 70257.0]], "isOverall": false, "label": "HTTP\u8BF7\u6C42", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 0.0, "maxY": 22.0, "series": [{"data": [[0.0, 8.0], [100.0, 2.0], [32900.0, 8.0], [34500.0, 5.0], [33700.0, 6.0], [36100.0, 7.0], [35300.0, 4.0], [36900.0, 5.0], [37700.0, 3.0], [38500.0, 3.0], [40100.0, 4.0], [39300.0, 3.0], [40900.0, 1.0], [42500.0, 3.0], [41700.0, 3.0], [44100.0, 1.0], [43300.0, 1.0], [45700.0, 1.0], [47300.0, 1.0], [48900.0, 2.0], [48100.0, 1.0], [49700.0, 2.0], [52100.0, 1.0], [51300.0, 1.0], [53700.0, 1.0], [55300.0, 3.0], [3600.0, 1.0], [3900.0, 1.0], [4100.0, 1.0], [4500.0, 1.0], [4900.0, 1.0], [5200.0, 1.0], [5500.0, 2.0], [5800.0, 1.0], [6100.0, 1.0], [6300.0, 4.0], [6500.0, 2.0], [6600.0, 1.0], [6400.0, 1.0], [6900.0, 1.0], [6700.0, 1.0], [6800.0, 1.0], [7000.0, 1.0], [7100.0, 1.0], [7300.0, 6.0], [7400.0, 5.0], [7200.0, 2.0], [7500.0, 8.0], [7600.0, 5.0], [7800.0, 10.0], [7900.0, 12.0], [7700.0, 7.0], [8100.0, 14.0], [8000.0, 16.0], [8400.0, 21.0], [8200.0, 19.0], [8600.0, 15.0], [9000.0, 12.0], [8800.0, 14.0], [9200.0, 3.0], [9600.0, 5.0], [9400.0, 5.0], [10000.0, 5.0], [9800.0, 4.0], [10200.0, 1.0], [10400.0, 1.0], [10800.0, 3.0], [11000.0, 2.0], [11400.0, 1.0], [12000.0, 1.0], [12600.0, 1.0], [12400.0, 1.0], [12800.0, 1.0], [13600.0, 3.0], [13800.0, 4.0], [13400.0, 3.0], [14200.0, 1.0], [14600.0, 8.0], [14800.0, 4.0], [15000.0, 4.0], [15200.0, 1.0], [15800.0, 12.0], [15600.0, 9.0], [15400.0, 6.0], [16000.0, 11.0], [16200.0, 3.0], [17200.0, 5.0], [16400.0, 11.0], [16800.0, 5.0], [17600.0, 2.0], [18000.0, 3.0], [18400.0, 4.0], [19200.0, 2.0], [18800.0, 2.0], [19600.0, 4.0], [20400.0, 2.0], [20000.0, 1.0], [21200.0, 2.0], [20800.0, 1.0], [22000.0, 3.0], [21600.0, 3.0], [22400.0, 4.0], [23200.0, 7.0], [22800.0, 6.0], [24400.0, 7.0], [24000.0, 16.0], [23600.0, 5.0], [24800.0, 7.0], [25200.0, 9.0], [26000.0, 3.0], [26400.0, 4.0], [25600.0, 4.0], [26800.0, 3.0], [27200.0, 1.0], [27600.0, 1.0], [28400.0, 2.0], [29200.0, 1.0], [28800.0, 1.0], [30400.0, 4.0], [30000.0, 1.0], [31600.0, 2.0], [31200.0, 2.0], [32400.0, 4.0], [32000.0, 1.0], [32800.0, 5.0], [33600.0, 8.0], [34400.0, 4.0], [36000.0, 4.0], [35200.0, 5.0], [36800.0, 4.0], [37600.0, 5.0], [38400.0, 3.0], [40800.0, 3.0], [39200.0, 1.0], [40000.0, 1.0], [41600.0, 1.0], [42400.0, 1.0], [43200.0, 4.0], [46400.0, 3.0], [45600.0, 2.0], [48000.0, 1.0], [49600.0, 1.0], [55200.0, 2.0], [54400.0, 1.0], [57600.0, 1.0], [34700.0, 6.0], [33900.0, 7.0], [33100.0, 7.0], [36300.0, 6.0], [35500.0, 4.0], [37100.0, 1.0], [37900.0, 1.0], [40300.0, 4.0], [39500.0, 2.0], [41900.0, 2.0], [41100.0, 2.0], [42700.0, 2.0], [43500.0, 3.0], [44300.0, 1.0], [45900.0, 4.0], [45100.0, 3.0], [46700.0, 1.0], [48300.0, 3.0], [47500.0, 2.0], [49100.0, 2.0], [51500.0, 1.0], [53900.0, 1.0], [56300.0, 1.0], [16500.0, 11.0], [16900.0, 9.0], [17300.0, 6.0], [17700.0, 3.0], [18100.0, 2.0], [19300.0, 1.0], [18500.0, 2.0], [19700.0, 3.0], [20900.0, 1.0], [20500.0, 5.0], [22100.0, 8.0], [22500.0, 3.0], [21700.0, 1.0], [23300.0, 4.0], [22900.0, 4.0], [24500.0, 9.0], [23700.0, 10.0], [24100.0, 5.0], [24900.0, 9.0], [25300.0, 3.0], [25700.0, 7.0], [26100.0, 6.0], [26500.0, 3.0], [27300.0, 3.0], [26900.0, 2.0], [28100.0, 1.0], [27700.0, 2.0], [28500.0, 1.0], [28900.0, 2.0], [29300.0, 1.0], [30500.0, 2.0], [29700.0, 2.0], [30100.0, 1.0], [31700.0, 1.0], [30900.0, 2.0], [31300.0, 1.0], [32100.0, 7.0], [32500.0, 2.0], [34600.0, 5.0], [33000.0, 5.0], [33800.0, 6.0], [35400.0, 7.0], [36200.0, 3.0], [38600.0, 2.0], [37800.0, 5.0], [37000.0, 2.0], [40200.0, 1.0], [39400.0, 3.0], [41000.0, 4.0], [42600.0, 2.0], [41800.0, 1.0], [45000.0, 1.0], [44200.0, 2.0], [43400.0, 2.0], [45800.0, 2.0], [46600.0, 1.0], [47400.0, 2.0], [49000.0, 1.0], [50600.0, 1.0], [56200.0, 1.0], [33300.0, 3.0], [34100.0, 7.0], [34900.0, 5.0], [35700.0, 7.0], [36500.0, 8.0], [38900.0, 1.0], [38100.0, 4.0], [37300.0, 1.0], [40500.0, 4.0], [39700.0, 6.0], [42900.0, 4.0], [41300.0, 1.0], [42100.0, 3.0], [44500.0, 1.0], [46900.0, 1.0], [48500.0, 4.0], [47700.0, 1.0], [50100.0, 1.0], [50900.0, 1.0], [51700.0, 1.0], [54900.0, 1.0], [55700.0, 4.0], [58900.0, 1.0], [8300.0, 22.0], [8700.0, 12.0], [8500.0, 14.0], [9100.0, 10.0], [8900.0, 8.0], [9500.0, 5.0], [9300.0, 5.0], [9700.0, 2.0], [10100.0, 2.0], [9900.0, 2.0], [10500.0, 2.0], [10300.0, 1.0], [10900.0, 1.0], [11700.0, 1.0], [12100.0, 3.0], [11900.0, 1.0], [12700.0, 1.0], [12500.0, 1.0], [13100.0, 2.0], [12900.0, 1.0], [13300.0, 1.0], [13500.0, 4.0], [13700.0, 1.0], [13900.0, 2.0], [14100.0, 2.0], [14300.0, 1.0], [14700.0, 1.0], [14500.0, 1.0], [15300.0, 11.0], [15100.0, 6.0], [14900.0, 4.0], [15700.0, 11.0], [15500.0, 10.0], [16300.0, 16.0], [16100.0, 18.0], [15900.0, 10.0], [17400.0, 3.0], [17000.0, 4.0], [16600.0, 12.0], [18200.0, 3.0], [17800.0, 3.0], [18600.0, 1.0], [19000.0, 1.0], [19400.0, 1.0], [19800.0, 2.0], [20200.0, 2.0], [20600.0, 2.0], [21400.0, 4.0], [22200.0, 6.0], [21800.0, 4.0], [22600.0, 5.0], [23400.0, 5.0], [23000.0, 7.0], [24200.0, 10.0], [23800.0, 12.0], [24600.0, 9.0], [25400.0, 3.0], [25000.0, 3.0], [25800.0, 5.0], [26600.0, 3.0], [26200.0, 1.0], [27000.0, 2.0], [27400.0, 2.0], [27800.0, 2.0], [28200.0, 1.0], [28600.0, 2.0], [29400.0, 3.0], [30600.0, 3.0], [29800.0, 2.0], [31000.0, 2.0], [31400.0, 3.0], [32200.0, 4.0], [32600.0, 3.0], [31800.0, 3.0], [33200.0, 4.0], [34000.0, 3.0], [34800.0, 1.0], [35600.0, 5.0], [36400.0, 4.0], [38000.0, 4.0], [37200.0, 3.0], [38800.0, 2.0], [39600.0, 3.0], [40400.0, 3.0], [42000.0, 3.0], [42800.0, 3.0], [41200.0, 1.0], [43600.0, 2.0], [44400.0, 2.0], [45200.0, 2.0], [46000.0, 2.0], [46800.0, 1.0], [47600.0, 1.0], [48400.0, 1.0], [50000.0, 2.0], [51600.0, 2.0], [54000.0, 1.0], [54800.0, 1.0], [55600.0, 1.0], [33500.0, 4.0], [34300.0, 6.0], [35100.0, 9.0], [35900.0, 4.0], [36700.0, 3.0], [37500.0, 3.0], [38300.0, 2.0], [39100.0, 1.0], [40700.0, 7.0], [39900.0, 2.0], [41500.0, 3.0], [42300.0, 2.0], [43900.0, 2.0], [43100.0, 4.0], [44700.0, 1.0], [45500.0, 5.0], [47100.0, 3.0], [48700.0, 2.0], [47900.0, 1.0], [51100.0, 2.0], [55100.0, 1.0], [55900.0, 1.0], [70200.0, 1.0], [16700.0, 11.0], [17100.0, 2.0], [17500.0, 5.0], [17900.0, 2.0], [18300.0, 3.0], [18700.0, 2.0], [19100.0, 1.0], [19900.0, 2.0], [19500.0, 1.0], [21500.0, 1.0], [20700.0, 1.0], [21100.0, 1.0], [21900.0, 1.0], [23500.0, 11.0], [23100.0, 6.0], [22700.0, 4.0], [23900.0, 9.0], [24300.0, 7.0], [24700.0, 12.0], [25100.0, 8.0], [25500.0, 1.0], [26300.0, 3.0], [25900.0, 4.0], [26700.0, 3.0], [27100.0, 1.0], [27500.0, 2.0], [28300.0, 1.0], [29100.0, 3.0], [28700.0, 2.0], [29500.0, 2.0], [29900.0, 2.0], [30700.0, 3.0], [31500.0, 2.0], [31100.0, 3.0], [32300.0, 1.0], [31900.0, 2.0], [34200.0, 8.0], [33400.0, 3.0], [36600.0, 3.0], [35800.0, 2.0], [35000.0, 3.0], [37400.0, 2.0], [38200.0, 2.0], [39000.0, 7.0], [40600.0, 1.0], [43000.0, 6.0], [41400.0, 2.0], [42200.0, 1.0], [43800.0, 3.0], [46200.0, 2.0], [47000.0, 1.0], [45400.0, 1.0], [50200.0, 1.0], [52600.0, 1.0], [53400.0, 1.0], [56600.0, 1.0], [55800.0, 1.0], [58200.0, 1.0]], "isOverall": false, "label": "HTTP\u8BF7\u6C42", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 70200.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 10.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 1549.0, "series": [{"data": [[0.0, 10.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 1549.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 2.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 18.968992248062015, "minX": 1.63608804E12, "maxY": 100.0, "series": [{"data": [[1.63608816E12, 37.564625850340136], [1.63608864E12, 62.41666666666667], [1.63608834E12, 60.0], [1.63608804E12, 18.968992248062015], [1.63608852E12, 97.54285714285712], [1.63608822E12, 40.0], [1.6360884E12, 77.35374149659864], [1.6360881E12, 20.0], [1.63608858E12, 100.0], [1.63608828E12, 57.55782312925169], [1.63608846E12, 80.0]], "isOverall": false, "label": "jp@gc - Ultimate Thread Group", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.63608864E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 8470.481884057966, "minX": 1.0, "maxY": 58940.0, "series": [{"data": [[2.0, 42721.0], [3.0, 20558.0], [4.0, 41974.0], [5.0, 10483.25], [6.0, 14408.0], [7.0, 20792.5], [8.0, 21610.5], [9.0, 42592.0], [10.0, 43227.0], [11.0, 14246.0], [12.0, 43092.0], [13.0, 39439.0], [14.0, 57640.0], [15.0, 42348.0], [16.0, 56332.0], [17.0, 44268.0], [18.0, 45273.0], [19.0, 55975.0], [20.0, 8470.481884057966], [21.0, 43028.0], [22.0, 24268.0], [23.0, 38268.0], [24.0, 42660.0], [25.0, 41723.0], [26.0, 30937.5], [27.0, 42714.0], [28.0, 43157.0], [29.0, 42184.0], [30.0, 44324.0], [31.0, 45121.0], [33.0, 42090.0], [32.0, 42972.0], [34.0, 26274.5], [35.0, 35727.0], [37.0, 45858.0], [36.0, 42038.0], [39.0, 41201.0], [38.0, 39699.0], [40.0, 15542.82653061225], [41.0, 43313.0], [43.0, 40489.0], [42.0, 41765.0], [45.0, 47962.0], [44.0, 46469.0], [47.0, 23569.0], [46.0, 45662.0], [49.0, 45421.0], [48.0, 45540.0], [51.0, 45981.0], [50.0, 45538.0], [53.0, 45521.0], [52.0, 46756.0], [54.0, 25042.5], [55.0, 36269.0], [57.0, 26036.0], [56.0, 25910.0], [59.0, 36985.0], [58.0, 36511.0], [60.0, 22914.424242424247], [61.0, 38874.0], [63.0, 39475.5], [62.0, 54441.0], [67.0, 40191.0], [66.0, 45137.0], [65.0, 46450.0], [64.0, 52627.0], [70.0, 30683.0], [71.0, 58940.0], [69.0, 41832.0], [68.0, 44763.0], [75.0, 40085.0], [74.0, 38528.0], [73.0, 39437.0], [72.0, 40740.0], [78.0, 40149.5], [79.0, 43592.0], [77.0, 39736.0], [76.0, 39488.0], [80.0, 31362.890459363938], [83.0, 39760.0], [82.0, 41401.0], [81.0, 43508.0], [84.0, 39615.0], [87.0, 39086.0], [86.0, 41097.0], [85.0, 39369.0], [91.0, 40713.0], [90.0, 36203.0], [89.0, 51690.0], [88.0, 39260.0], [92.0, 39366.5], [95.0, 43649.0], [94.0, 54860.0], [93.0, 49688.0], [99.0, 52735.5], [98.0, 55302.5], [97.0, 55260.0], [96.0, 49079.5], [100.0, 39874.82229965156], [1.0, 40863.0]], "isOverall": false, "label": "HTTP\u8BF7\u6C42", "isController": false}, {"data": [[59.34316869788327, 24850.286722257868]], "isOverall": false, "label": "HTTP\u8BF7\u6C42-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 513.85, "minX": 1.63608804E12, "maxY": 73072.25, "series": [{"data": [[1.63608816E12, 71643.86666666667], [1.63608864E12, 64302.433333333334], [1.63608834E12, 73072.25], [1.63608804E12, 58110.433333333334], [1.63608852E12, 68028.75], [1.63608822E12, 71911.53333333334], [1.6360884E12, 71627.21666666666], [1.6360881E12, 68068.58333333333], [1.63608858E12, 67808.71666666666], [1.63608828E12, 71449.06666666667], [1.63608846E12, 68119.36666666667]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.63608816E12, 585.55], [1.63608864E12, 525.8], [1.63608834E12, 597.5], [1.63608804E12, 513.85], [1.63608852E12, 557.6666666666666], [1.63608822E12, 589.5333333333333], [1.6360884E12, 585.55], [1.6360881E12, 557.6666666666666], [1.63608858E12, 553.6833333333333], [1.63608828E12, 585.55], [1.63608846E12, 557.6666666666666]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.63608864E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 7528.06976744186, "minX": 1.63608804E12, "maxY": 43268.719696969725, "series": [{"data": [[1.63608816E12, 13687.380952380956], [1.63608864E12, 43268.719696969725], [1.63608834E12, 23991.97333333331], [1.63608804E12, 7528.06976744186], [1.63608852E12, 35834.07857142858], [1.63608822E12, 16277.12162162162], [1.6360884E12, 27534.952380952378], [1.6360881E12, 8505.607142857147], [1.63608858E12, 43042.23741007193], [1.63608828E12, 20640.78911564627], [1.63608846E12, 34049.20714285715]], "isOverall": false, "label": "HTTP\u8BF7\u6C42", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.63608864E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 7520.558139534883, "minX": 1.63608804E12, "maxY": 43261.63636363634, "series": [{"data": [[1.63608816E12, 13679.360544217685], [1.63608864E12, 43261.63636363634], [1.63608834E12, 23984.88666666667], [1.63608804E12, 7520.558139534883], [1.63608852E12, 35824.7142857143], [1.63608822E12, 16268.966216216217], [1.6360884E12, 27526.57823129251], [1.6360881E12, 8495.814285714285], [1.63608858E12, 43034.58992805757], [1.63608828E12, 20633.176870748306], [1.63608846E12, 34037.12857142859]], "isOverall": false, "label": "HTTP\u8BF7\u6C42", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.63608864E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 7.526666666666667, "minX": 1.63608804E12, "maxY": 29.720930232558143, "series": [{"data": [[1.63608816E12, 8.231292517006803], [1.63608864E12, 7.931818181818179], [1.63608834E12, 7.526666666666667], [1.63608804E12, 29.720930232558143], [1.63608852E12, 11.071428571428571], [1.63608822E12, 8.290540540540539], [1.6360884E12, 7.639455782312928], [1.6360881E12, 9.707142857142857], [1.63608858E12, 7.769784172661873], [1.63608828E12, 8.523809523809524], [1.63608846E12, 9.535714285714286]], "isOverall": false, "label": "HTTP\u8BF7\u6C42", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.63608864E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 23.0, "minX": 1.63608804E12, "maxY": 70257.0, "series": [{"data": [[1.63608816E12, 19959.0], [1.63608864E12, 70257.0], [1.63608834E12, 28726.0], [1.63608804E12, 10901.0], [1.63608852E12, 48714.0], [1.63608822E12, 20960.0], [1.6360884E12, 39001.0], [1.6360881E12, 11052.0], [1.63608858E12, 58262.0], [1.63608828E12, 29190.0], [1.63608846E12, 43879.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.63608816E12, 6555.0], [1.63608864E12, 25910.0], [1.63608834E12, 19611.0], [1.63608804E12, 23.0], [1.63608852E12, 23528.0], [1.63608822E12, 11456.0], [1.6360884E12, 18870.0], [1.6360881E12, 6186.0], [1.63608858E12, 25147.0], [1.63608828E12, 11963.0], [1.63608846E12, 22221.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.63608816E12, 17503.600000000002], [1.63608864E12, 55235.7], [1.63608834E12, 26188.8], [1.63608804E12, 9348.0], [1.63608852E12, 42471.5], [1.63608822E12, 18257.5], [1.6360884E12, 33688.0], [1.6360881E12, 9649.5], [1.63608858E12, 51132.0], [1.63608828E12, 25230.000000000004], [1.63608846E12, 37854.5]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.63608816E12, 19883.16], [1.63608864E12, 66522.38999999985], [1.63608834E12, 28507.720000000005], [1.63608804E12, 10897.7], [1.63608852E12, 48456.93], [1.63608822E12, 20809.569999999996], [1.6360884E12, 38820.04], [1.6360881E12, 10980.66], [1.63608858E12, 57624.399999999994], [1.63608828E12, 28697.04000000001], [1.63608846E12, 43623.57]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.63608816E12, 18128.399999999998], [1.63608864E12, 55769.05], [1.63608834E12, 26762.9], [1.63608804E12, 9902.5], [1.63608852E12, 45503.45], [1.63608822E12, 19206.3], [1.6360884E12, 35337.6], [1.6360881E12, 10021.3], [1.63608858E12, 53771.0], [1.63608828E12, 26083.399999999998], [1.63608846E12, 39018.0]], "isOverall": false, "label": "95th percentile", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.63608864E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 47.0, "minX": 1.0, "maxY": 26172.5, "series": [{"data": [[2.0, 24787.0], [1.0, 23595.5], [4.0, 26172.5], [10.0, 47.0], [3.0, 23566.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 10.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 46.0, "minX": 1.0, "maxY": 26166.0, "series": [{"data": [[2.0, 24780.0], [1.0, 23560.0], [4.0, 26166.0], [10.0, 46.0], [3.0, 23559.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 10.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 0.5333333333333333, "minX": 1.63608804E12, "maxY": 2.783333333333333, "series": [{"data": [[1.63608816E12, 2.783333333333333], [1.63608864E12, 0.5333333333333333], [1.63608834E12, 2.5], [1.63608804E12, 2.4833333333333334], [1.63608852E12, 2.6666666666666665], [1.63608822E12, 2.466666666666667], [1.6360884E12, 2.783333333333333], [1.6360881E12, 2.3333333333333335], [1.63608858E12, 2.316666666666667], [1.63608828E12, 2.783333333333333], [1.63608846E12, 2.3333333333333335]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.63608864E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 2.15, "minX": 1.63608804E12, "maxY": 2.5, "series": [{"data": [[1.63608816E12, 2.45], [1.63608864E12, 2.2], [1.63608834E12, 2.5], [1.63608804E12, 2.15], [1.63608852E12, 2.3333333333333335], [1.63608822E12, 2.466666666666667], [1.6360884E12, 2.45], [1.6360881E12, 2.3333333333333335], [1.63608858E12, 2.316666666666667], [1.63608828E12, 2.45], [1.63608846E12, 2.3333333333333335]], "isOverall": false, "label": "200", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.63608864E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 2.15, "minX": 1.63608804E12, "maxY": 2.5, "series": [{"data": [[1.63608816E12, 2.45], [1.63608864E12, 2.2], [1.63608834E12, 2.5], [1.63608804E12, 2.15], [1.63608852E12, 2.3333333333333335], [1.63608822E12, 2.466666666666667], [1.6360884E12, 2.45], [1.6360881E12, 2.3333333333333335], [1.63608858E12, 2.316666666666667], [1.63608828E12, 2.45], [1.63608846E12, 2.3333333333333335]], "isOverall": false, "label": "HTTP\u8BF7\u6C42-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.63608864E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 2.15, "minX": 1.63608804E12, "maxY": 2.5, "series": [{"data": [[1.63608816E12, 2.45], [1.63608864E12, 2.2], [1.63608834E12, 2.5], [1.63608804E12, 2.15], [1.63608852E12, 2.3333333333333335], [1.63608822E12, 2.466666666666667], [1.6360884E12, 2.45], [1.6360881E12, 2.3333333333333335], [1.63608858E12, 2.316666666666667], [1.63608828E12, 2.45], [1.63608846E12, 2.3333333333333335]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.63608864E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

