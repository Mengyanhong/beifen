/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 13.0, "minX": 0.0, "maxY": 120018.0, "series": [{"data": [[0.0, 13.0], [0.1, 15.0], [0.2, 17.0], [0.3, 20.0], [0.4, 21.0], [0.5, 3587.0], [0.6, 4193.0], [0.7, 4729.0], [0.8, 5363.0], [0.9, 6106.0], [1.0, 6698.0], [1.1, 7276.0], [1.2, 7965.0], [1.3, 8309.0], [1.4, 8371.0], [1.5, 9449.0], [1.6, 9815.0], [1.7, 10064.0], [1.8, 10592.0], [1.9, 11232.0], [2.0, 11863.0], [2.1, 11897.0], [2.2, 12645.0], [2.3, 13024.0], [2.4, 13675.0], [2.5, 14092.0], [2.6, 14333.0], [2.7, 15131.0], [2.8, 15289.0], [2.9, 15536.0], [3.0, 16057.0], [3.1, 16236.0], [3.2, 16426.0], [3.3, 16546.0], [3.4, 16610.0], [3.5, 16677.0], [3.6, 16863.0], [3.7, 17092.0], [3.8, 17152.0], [3.9, 17416.0], [4.0, 17623.0], [4.1, 17848.0], [4.2, 17870.0], [4.3, 18180.0], [4.4, 18241.0], [4.5, 18289.0], [4.6, 18309.0], [4.7, 18425.0], [4.8, 18517.0], [4.9, 18587.0], [5.0, 18625.0], [5.1, 18703.0], [5.2, 18794.0], [5.3, 18802.0], [5.4, 18831.0], [5.5, 18932.0], [5.6, 18940.0], [5.7, 19016.0], [5.8, 19026.0], [5.9, 19074.0], [6.0, 19077.0], [6.1, 19095.0], [6.2, 19217.0], [6.3, 19231.0], [6.4, 19235.0], [6.5, 19272.0], [6.6, 19342.0], [6.7, 19410.0], [6.8, 19473.0], [6.9, 19514.0], [7.0, 19542.0], [7.1, 19603.0], [7.2, 19624.0], [7.3, 19656.0], [7.4, 19679.0], [7.5, 19694.0], [7.6, 19801.0], [7.7, 19810.0], [7.8, 19839.0], [7.9, 19853.0], [8.0, 19868.0], [8.1, 19893.0], [8.2, 19946.0], [8.3, 20012.0], [8.4, 20023.0], [8.5, 20080.0], [8.6, 20086.0], [8.7, 20090.0], [8.8, 20113.0], [8.9, 20138.0], [9.0, 20145.0], [9.1, 20156.0], [9.2, 20163.0], [9.3, 20194.0], [9.4, 20215.0], [9.5, 20224.0], [9.6, 20247.0], [9.7, 20257.0], [9.8, 20259.0], [9.9, 20268.0], [10.0, 20284.0], [10.1, 20286.0], [10.2, 20299.0], [10.3, 20321.0], [10.4, 20333.0], [10.5, 20337.0], [10.6, 20344.0], [10.7, 20353.0], [10.8, 20354.0], [10.9, 20360.0], [11.0, 20369.0], [11.1, 20379.0], [11.2, 20383.0], [11.3, 20405.0], [11.4, 20426.0], [11.5, 20427.0], [11.6, 20440.0], [11.7, 20443.0], [11.8, 20453.0], [11.9, 20456.0], [12.0, 20480.0], [12.1, 20484.0], [12.2, 20486.0], [12.3, 20505.0], [12.4, 20517.0], [12.5, 20556.0], [12.6, 20560.0], [12.7, 20570.0], [12.8, 20586.0], [12.9, 20589.0], [13.0, 20595.0], [13.1, 20604.0], [13.2, 20622.0], [13.3, 20639.0], [13.4, 20651.0], [13.5, 20678.0], [13.6, 20682.0], [13.7, 20718.0], [13.8, 20734.0], [13.9, 20738.0], [14.0, 20742.0], [14.1, 20759.0], [14.2, 20778.0], [14.3, 20782.0], [14.4, 20802.0], [14.5, 20812.0], [14.6, 20816.0], [14.7, 20834.0], [14.8, 20842.0], [14.9, 20880.0], [15.0, 20888.0], [15.1, 20889.0], [15.2, 20928.0], [15.3, 20950.0], [15.4, 20961.0], [15.5, 20964.0], [15.6, 20967.0], [15.7, 20973.0], [15.8, 20983.0], [15.9, 20994.0], [16.0, 20996.0], [16.1, 21011.0], [16.2, 21032.0], [16.3, 21037.0], [16.4, 21042.0], [16.5, 21076.0], [16.6, 21088.0], [16.7, 21118.0], [16.8, 21137.0], [16.9, 21139.0], [17.0, 21151.0], [17.1, 21171.0], [17.2, 21202.0], [17.3, 21286.0], [17.4, 21306.0], [17.5, 21348.0], [17.6, 21517.0], [17.7, 21568.0], [17.8, 21593.0], [17.9, 21613.0], [18.0, 21712.0], [18.1, 21716.0], [18.2, 21767.0], [18.3, 21867.0], [18.4, 21892.0], [18.5, 21936.0], [18.6, 21993.0], [18.7, 22122.0], [18.8, 22126.0], [18.9, 22188.0], [19.0, 22217.0], [19.1, 22221.0], [19.2, 22345.0], [19.3, 22362.0], [19.4, 22399.0], [19.5, 22501.0], [19.6, 22691.0], [19.7, 22729.0], [19.8, 22765.0], [19.9, 22840.0], [20.0, 22876.0], [20.1, 22995.0], [20.2, 23047.0], [20.3, 23217.0], [20.4, 23360.0], [20.5, 23361.0], [20.6, 23487.0], [20.7, 23509.0], [20.8, 23629.0], [20.9, 23698.0], [21.0, 23749.0], [21.1, 23792.0], [21.2, 23818.0], [21.3, 23992.0], [21.4, 24137.0], [21.5, 24190.0], [21.6, 24211.0], [21.7, 24260.0], [21.8, 24399.0], [21.9, 24476.0], [22.0, 24602.0], [22.1, 24720.0], [22.2, 24857.0], [22.3, 24968.0], [22.4, 25076.0], [22.5, 25115.0], [22.6, 25200.0], [22.7, 25398.0], [22.8, 25631.0], [22.9, 25782.0], [23.0, 25797.0], [23.1, 25979.0], [23.2, 26149.0], [23.3, 26178.0], [23.4, 26312.0], [23.5, 26361.0], [23.6, 26705.0], [23.7, 26715.0], [23.8, 26925.0], [23.9, 26974.0], [24.0, 27002.0], [24.1, 27051.0], [24.2, 27185.0], [24.3, 27315.0], [24.4, 27391.0], [24.5, 27461.0], [24.6, 27581.0], [24.7, 27654.0], [24.8, 27792.0], [24.9, 27913.0], [25.0, 27930.0], [25.1, 27968.0], [25.2, 28048.0], [25.3, 28254.0], [25.4, 28352.0], [25.5, 28460.0], [25.6, 28566.0], [25.7, 28569.0], [25.8, 28741.0], [25.9, 28779.0], [26.0, 28808.0], [26.1, 28870.0], [26.2, 28906.0], [26.3, 29080.0], [26.4, 29107.0], [26.5, 29155.0], [26.6, 29210.0], [26.7, 29313.0], [26.8, 29383.0], [26.9, 29416.0], [27.0, 29440.0], [27.1, 29490.0], [27.2, 29519.0], [27.3, 29549.0], [27.4, 29647.0], [27.5, 29658.0], [27.6, 29732.0], [27.7, 29798.0], [27.8, 29807.0], [27.9, 29923.0], [28.0, 30022.0], [28.1, 30076.0], [28.2, 30080.0], [28.3, 30140.0], [28.4, 30205.0], [28.5, 30224.0], [28.6, 30281.0], [28.7, 30376.0], [28.8, 30425.0], [28.9, 30426.0], [29.0, 30494.0], [29.1, 30577.0], [29.2, 30601.0], [29.3, 30734.0], [29.4, 30772.0], [29.5, 30921.0], [29.6, 30986.0], [29.7, 31039.0], [29.8, 31131.0], [29.9, 31184.0], [30.0, 31247.0], [30.1, 31344.0], [30.2, 31358.0], [30.3, 31494.0], [30.4, 31519.0], [30.5, 31708.0], [30.6, 31746.0], [30.7, 31783.0], [30.8, 31786.0], [30.9, 31799.0], [31.0, 31804.0], [31.1, 31913.0], [31.2, 31937.0], [31.3, 31993.0], [31.4, 32001.0], [31.5, 32160.0], [31.6, 32163.0], [31.7, 32165.0], [31.8, 32238.0], [31.9, 32300.0], [32.0, 32315.0], [32.1, 32331.0], [32.2, 32346.0], [32.3, 32387.0], [32.4, 32421.0], [32.5, 32469.0], [32.6, 32499.0], [32.7, 32512.0], [32.8, 32747.0], [32.9, 32797.0], [33.0, 32916.0], [33.1, 32936.0], [33.2, 32996.0], [33.3, 33018.0], [33.4, 33019.0], [33.5, 33026.0], [33.6, 33108.0], [33.7, 33140.0], [33.8, 33197.0], [33.9, 33245.0], [34.0, 33272.0], [34.1, 33278.0], [34.2, 33321.0], [34.3, 33382.0], [34.4, 33494.0], [34.5, 33636.0], [34.6, 33653.0], [34.7, 33691.0], [34.8, 33698.0], [34.9, 33778.0], [35.0, 33795.0], [35.1, 33825.0], [35.2, 33902.0], [35.3, 33975.0], [35.4, 33986.0], [35.5, 33995.0], [35.6, 34065.0], [35.7, 34110.0], [35.8, 34119.0], [35.9, 34192.0], [36.0, 34196.0], [36.1, 34230.0], [36.2, 34238.0], [36.3, 34272.0], [36.4, 34307.0], [36.5, 34344.0], [36.6, 34418.0], [36.7, 34441.0], [36.8, 34447.0], [36.9, 34479.0], [37.0, 34595.0], [37.1, 34644.0], [37.2, 34686.0], [37.3, 34744.0], [37.4, 34859.0], [37.5, 34906.0], [37.6, 34953.0], [37.7, 35008.0], [37.8, 35020.0], [37.9, 35020.0], [38.0, 35070.0], [38.1, 35092.0], [38.2, 35196.0], [38.3, 35198.0], [38.4, 35362.0], [38.5, 35368.0], [38.6, 35391.0], [38.7, 35454.0], [38.8, 35461.0], [38.9, 35475.0], [39.0, 35558.0], [39.1, 35572.0], [39.2, 35601.0], [39.3, 35626.0], [39.4, 35631.0], [39.5, 35652.0], [39.6, 35662.0], [39.7, 35689.0], [39.8, 35722.0], [39.9, 35753.0], [40.0, 35754.0], [40.1, 35771.0], [40.2, 35778.0], [40.3, 35783.0], [40.4, 35821.0], [40.5, 35895.0], [40.6, 35947.0], [40.7, 35977.0], [40.8, 36029.0], [40.9, 36031.0], [41.0, 36043.0], [41.1, 36072.0], [41.2, 36121.0], [41.3, 36123.0], [41.4, 36139.0], [41.5, 36164.0], [41.6, 36230.0], [41.7, 36294.0], [41.8, 36374.0], [41.9, 36459.0], [42.0, 36480.0], [42.1, 36495.0], [42.2, 36540.0], [42.3, 36566.0], [42.4, 36591.0], [42.5, 36629.0], [42.6, 36682.0], [42.7, 36724.0], [42.8, 36770.0], [42.9, 36841.0], [43.0, 36877.0], [43.1, 36885.0], [43.2, 36964.0], [43.3, 37004.0], [43.4, 37055.0], [43.5, 37077.0], [43.6, 37106.0], [43.7, 37156.0], [43.8, 37183.0], [43.9, 37237.0], [44.0, 37288.0], [44.1, 37292.0], [44.2, 37320.0], [44.3, 37372.0], [44.4, 37457.0], [44.5, 37541.0], [44.6, 37602.0], [44.7, 37622.0], [44.8, 37628.0], [44.9, 37704.0], [45.0, 37808.0], [45.1, 37843.0], [45.2, 37846.0], [45.3, 37872.0], [45.4, 37970.0], [45.5, 37998.0], [45.6, 38155.0], [45.7, 38224.0], [45.8, 38433.0], [45.9, 38469.0], [46.0, 38522.0], [46.1, 38587.0], [46.2, 38596.0], [46.3, 38699.0], [46.4, 38777.0], [46.5, 38818.0], [46.6, 38859.0], [46.7, 38946.0], [46.8, 39005.0], [46.9, 39044.0], [47.0, 39126.0], [47.1, 39207.0], [47.2, 39356.0], [47.3, 39376.0], [47.4, 39474.0], [47.5, 39478.0], [47.6, 39485.0], [47.7, 39527.0], [47.8, 39555.0], [47.9, 39579.0], [48.0, 39628.0], [48.1, 39684.0], [48.2, 39715.0], [48.3, 39740.0], [48.4, 39753.0], [48.5, 39781.0], [48.6, 39901.0], [48.7, 39922.0], [48.8, 39940.0], [48.9, 39997.0], [49.0, 40010.0], [49.1, 40028.0], [49.2, 40045.0], [49.3, 40084.0], [49.4, 40090.0], [49.5, 40280.0], [49.6, 40306.0], [49.7, 40319.0], [49.8, 40366.0], [49.9, 40437.0], [50.0, 40454.0], [50.1, 40491.0], [50.2, 40530.0], [50.3, 40599.0], [50.4, 40618.0], [50.5, 40622.0], [50.6, 40658.0], [50.7, 40676.0], [50.8, 40716.0], [50.9, 40737.0], [51.0, 40784.0], [51.1, 40809.0], [51.2, 40904.0], [51.3, 41033.0], [51.4, 41056.0], [51.5, 41111.0], [51.6, 41133.0], [51.7, 41153.0], [51.8, 41162.0], [51.9, 41179.0], [52.0, 41243.0], [52.1, 41286.0], [52.2, 41344.0], [52.3, 41435.0], [52.4, 41459.0], [52.5, 41470.0], [52.6, 41510.0], [52.7, 41554.0], [52.8, 41570.0], [52.9, 41630.0], [53.0, 41658.0], [53.1, 41682.0], [53.2, 41700.0], [53.3, 41701.0], [53.4, 41706.0], [53.5, 41719.0], [53.6, 41789.0], [53.7, 41805.0], [53.8, 41860.0], [53.9, 41878.0], [54.0, 41917.0], [54.1, 41930.0], [54.2, 41951.0], [54.3, 41959.0], [54.4, 42153.0], [54.5, 42192.0], [54.6, 42211.0], [54.7, 42231.0], [54.8, 42242.0], [54.9, 42302.0], [55.0, 42323.0], [55.1, 42404.0], [55.2, 42428.0], [55.3, 42431.0], [55.4, 42456.0], [55.5, 42517.0], [55.6, 42522.0], [55.7, 42572.0], [55.8, 42589.0], [55.9, 42646.0], [56.0, 42679.0], [56.1, 42727.0], [56.2, 42818.0], [56.3, 42822.0], [56.4, 42883.0], [56.5, 42903.0], [56.6, 42913.0], [56.7, 42933.0], [56.8, 42994.0], [56.9, 43043.0], [57.0, 43067.0], [57.1, 43112.0], [57.2, 43167.0], [57.3, 43178.0], [57.4, 43180.0], [57.5, 43257.0], [57.6, 43284.0], [57.7, 43287.0], [57.8, 43304.0], [57.9, 43343.0], [58.0, 43353.0], [58.1, 43375.0], [58.2, 43467.0], [58.3, 43504.0], [58.4, 43518.0], [58.5, 43562.0], [58.6, 43616.0], [58.7, 43624.0], [58.8, 43679.0], [58.9, 43702.0], [59.0, 43793.0], [59.1, 43818.0], [59.2, 43828.0], [59.3, 43922.0], [59.4, 43932.0], [59.5, 43954.0], [59.6, 43971.0], [59.7, 44031.0], [59.8, 44055.0], [59.9, 44126.0], [60.0, 44142.0], [60.1, 44170.0], [60.2, 44202.0], [60.3, 44315.0], [60.4, 44401.0], [60.5, 44454.0], [60.6, 44482.0], [60.7, 44500.0], [60.8, 44577.0], [60.9, 44614.0], [61.0, 44654.0], [61.1, 44684.0], [61.2, 44703.0], [61.3, 44763.0], [61.4, 44835.0], [61.5, 44878.0], [61.6, 44883.0], [61.7, 44898.0], [61.8, 45012.0], [61.9, 45056.0], [62.0, 45087.0], [62.1, 45150.0], [62.2, 45156.0], [62.3, 45180.0], [62.4, 45275.0], [62.5, 45283.0], [62.6, 45299.0], [62.7, 45429.0], [62.8, 45599.0], [62.9, 45601.0], [63.0, 45718.0], [63.1, 45770.0], [63.2, 45806.0], [63.3, 45828.0], [63.4, 45888.0], [63.5, 45954.0], [63.6, 45958.0], [63.7, 45976.0], [63.8, 46020.0], [63.9, 46068.0], [64.0, 46227.0], [64.1, 46255.0], [64.2, 46318.0], [64.3, 46328.0], [64.4, 46388.0], [64.5, 46607.0], [64.6, 46620.0], [64.7, 46668.0], [64.8, 46763.0], [64.9, 46786.0], [65.0, 46847.0], [65.1, 46929.0], [65.2, 47011.0], [65.3, 47015.0], [65.4, 47347.0], [65.5, 47427.0], [65.6, 47460.0], [65.7, 47613.0], [65.8, 47667.0], [65.9, 47732.0], [66.0, 47829.0], [66.1, 47837.0], [66.2, 47857.0], [66.3, 47919.0], [66.4, 47946.0], [66.5, 47963.0], [66.6, 48115.0], [66.7, 48192.0], [66.8, 48305.0], [66.9, 48341.0], [67.0, 48368.0], [67.1, 48421.0], [67.2, 48499.0], [67.3, 48638.0], [67.4, 48643.0], [67.5, 48680.0], [67.6, 48716.0], [67.7, 48782.0], [67.8, 48877.0], [67.9, 48986.0], [68.0, 49163.0], [68.1, 49240.0], [68.2, 49317.0], [68.3, 49384.0], [68.4, 49444.0], [68.5, 49450.0], [68.6, 49589.0], [68.7, 49607.0], [68.8, 49650.0], [68.9, 49703.0], [69.0, 49731.0], [69.1, 49748.0], [69.2, 49840.0], [69.3, 49922.0], [69.4, 49980.0], [69.5, 50048.0], [69.6, 50204.0], [69.7, 50276.0], [69.8, 50358.0], [69.9, 50423.0], [70.0, 50459.0], [70.1, 50660.0], [70.2, 50706.0], [70.3, 50825.0], [70.4, 50891.0], [70.5, 50902.0], [70.6, 50967.0], [70.7, 51007.0], [70.8, 51127.0], [70.9, 51158.0], [71.0, 51300.0], [71.1, 51411.0], [71.2, 51414.0], [71.3, 51487.0], [71.4, 51510.0], [71.5, 51582.0], [71.6, 51685.0], [71.7, 51881.0], [71.8, 51939.0], [71.9, 51971.0], [72.0, 52004.0], [72.1, 52155.0], [72.2, 52182.0], [72.3, 52186.0], [72.4, 52273.0], [72.5, 52330.0], [72.6, 52331.0], [72.7, 52414.0], [72.8, 52428.0], [72.9, 52459.0], [73.0, 52493.0], [73.1, 52522.0], [73.2, 52578.0], [73.3, 52585.0], [73.4, 52689.0], [73.5, 52765.0], [73.6, 52849.0], [73.7, 52939.0], [73.8, 52993.0], [73.9, 53006.0], [74.0, 53047.0], [74.1, 53074.0], [74.2, 53207.0], [74.3, 53321.0], [74.4, 53328.0], [74.5, 53432.0], [74.6, 53439.0], [74.7, 53513.0], [74.8, 53562.0], [74.9, 53670.0], [75.0, 53722.0], [75.1, 53739.0], [75.2, 53808.0], [75.3, 53826.0], [75.4, 53846.0], [75.5, 53865.0], [75.6, 53918.0], [75.7, 53965.0], [75.8, 54031.0], [75.9, 54110.0], [76.0, 54191.0], [76.1, 54303.0], [76.2, 54364.0], [76.3, 54435.0], [76.4, 54477.0], [76.5, 54595.0], [76.6, 54650.0], [76.7, 54851.0], [76.8, 54882.0], [76.9, 54964.0], [77.0, 55036.0], [77.1, 55038.0], [77.2, 55079.0], [77.3, 55197.0], [77.4, 55461.0], [77.5, 55476.0], [77.6, 55522.0], [77.7, 55688.0], [77.8, 55699.0], [77.9, 55776.0], [78.0, 55810.0], [78.1, 55823.0], [78.2, 55886.0], [78.3, 55970.0], [78.4, 56088.0], [78.5, 56167.0], [78.6, 56277.0], [78.7, 56297.0], [78.8, 56522.0], [78.9, 56592.0], [79.0, 56660.0], [79.1, 56703.0], [79.2, 56723.0], [79.3, 56800.0], [79.4, 56969.0], [79.5, 57106.0], [79.6, 57156.0], [79.7, 57306.0], [79.8, 57372.0], [79.9, 57377.0], [80.0, 57479.0], [80.1, 57488.0], [80.2, 57553.0], [80.3, 57558.0], [80.4, 57585.0], [80.5, 57776.0], [80.6, 57799.0], [80.7, 57946.0], [80.8, 58194.0], [80.9, 58230.0], [81.0, 58371.0], [81.1, 58412.0], [81.2, 58603.0], [81.3, 58644.0], [81.4, 58717.0], [81.5, 58741.0], [81.6, 58827.0], [81.7, 58923.0], [81.8, 59009.0], [81.9, 59049.0], [82.0, 59191.0], [82.1, 59379.0], [82.2, 59521.0], [82.3, 59553.0], [82.4, 59588.0], [82.5, 59620.0], [82.6, 59811.0], [82.7, 59860.0], [82.8, 60095.0], [82.9, 60268.0], [83.0, 60280.0], [83.1, 60349.0], [83.2, 60522.0], [83.3, 60565.0], [83.4, 60582.0], [83.5, 60768.0], [83.6, 60910.0], [83.7, 60969.0], [83.8, 61178.0], [83.9, 61302.0], [84.0, 61395.0], [84.1, 61427.0], [84.2, 61471.0], [84.3, 61480.0], [84.4, 61481.0], [84.5, 61755.0], [84.6, 61880.0], [84.7, 62138.0], [84.8, 62160.0], [84.9, 62210.0], [85.0, 62378.0], [85.1, 62484.0], [85.2, 62570.0], [85.3, 62785.0], [85.4, 62826.0], [85.5, 62903.0], [85.6, 63113.0], [85.7, 63287.0], [85.8, 63634.0], [85.9, 63727.0], [86.0, 63819.0], [86.1, 63937.0], [86.2, 64070.0], [86.3, 64487.0], [86.4, 64641.0], [86.5, 64679.0], [86.6, 64769.0], [86.7, 64786.0], [86.8, 64798.0], [86.9, 64809.0], [87.0, 64844.0], [87.1, 65002.0], [87.2, 65023.0], [87.3, 65297.0], [87.4, 65488.0], [87.5, 65537.0], [87.6, 65550.0], [87.7, 65702.0], [87.8, 65862.0], [87.9, 66079.0], [88.0, 66353.0], [88.1, 66468.0], [88.2, 66614.0], [88.3, 66705.0], [88.4, 66912.0], [88.5, 67051.0], [88.6, 67281.0], [88.7, 67568.0], [88.8, 67879.0], [88.9, 67897.0], [89.0, 68339.0], [89.1, 68616.0], [89.2, 68795.0], [89.3, 68828.0], [89.4, 69563.0], [89.5, 69762.0], [89.6, 69892.0], [89.7, 70014.0], [89.8, 70093.0], [89.9, 70450.0], [90.0, 70489.0], [90.1, 70635.0], [90.2, 71191.0], [90.3, 71391.0], [90.4, 71712.0], [90.5, 71857.0], [90.6, 72391.0], [90.7, 72619.0], [90.8, 72796.0], [90.9, 72973.0], [91.0, 73035.0], [91.1, 73417.0], [91.2, 73574.0], [91.3, 74307.0], [91.4, 74574.0], [91.5, 75318.0], [91.6, 75938.0], [91.7, 76108.0], [91.8, 76872.0], [91.9, 77058.0], [92.0, 78110.0], [92.1, 78225.0], [92.2, 78257.0], [92.3, 78915.0], [92.4, 78952.0], [92.5, 79127.0], [92.6, 79345.0], [92.7, 79389.0], [92.8, 79554.0], [92.9, 80105.0], [93.0, 80608.0], [93.1, 80678.0], [93.2, 81101.0], [93.3, 81267.0], [93.4, 81519.0], [93.5, 81705.0], [93.6, 82054.0], [93.7, 82382.0], [93.8, 82643.0], [93.9, 82900.0], [94.0, 83274.0], [94.1, 83308.0], [94.2, 83682.0], [94.3, 84103.0], [94.4, 84363.0], [94.5, 84565.0], [94.6, 84690.0], [94.7, 84942.0], [94.8, 85107.0], [94.9, 85554.0], [95.0, 85795.0], [95.1, 85861.0], [95.2, 86149.0], [95.3, 86904.0], [95.4, 87302.0], [95.5, 87586.0], [95.6, 87816.0], [95.7, 88315.0], [95.8, 88850.0], [95.9, 89645.0], [96.0, 91481.0], [96.1, 92519.0], [96.2, 92698.0], [96.3, 93751.0], [96.4, 93772.0], [96.5, 94530.0], [96.6, 94978.0], [96.7, 95692.0], [96.8, 96716.0], [96.9, 96984.0], [97.0, 97629.0], [97.1, 97938.0], [97.2, 98291.0], [97.3, 98425.0], [97.4, 99354.0], [97.5, 100063.0], [97.6, 100170.0], [97.7, 100579.0], [97.8, 100844.0], [97.9, 101655.0], [98.0, 101813.0], [98.1, 103653.0], [98.2, 105992.0], [98.3, 106295.0], [98.4, 106786.0], [98.5, 111092.0], [98.6, 116432.0], [98.7, 116545.0], [98.8, 116861.0], [98.9, 119893.0], [99.0, 120009.0], [99.1, 120011.0], [99.2, 120012.0], [99.3, 120012.0], [99.4, 120012.0], [99.5, 120013.0], [99.6, 120013.0], [99.7, 120014.0], [99.8, 120014.0], [99.9, 120017.0]], "isOverall": false, "label": "HTTP\u8BF7\u6C42", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 0.0, "maxY": 18.0, "series": [{"data": [[0.0, 7.0], [68300.0, 2.0], [66700.0, 2.0], [69900.0, 1.0], [73100.0, 1.0], [81100.0, 2.0], [79500.0, 1.0], [84300.0, 2.0], [87500.0, 1.0], [90700.0, 1.0], [95500.0, 1.0], [106700.0, 1.0], [33700.0, 4.0], [34500.0, 2.0], [32900.0, 6.0], [35300.0, 5.0], [36100.0, 6.0], [36900.0, 2.0], [38500.0, 4.0], [37700.0, 3.0], [39300.0, 2.0], [40900.0, 2.0], [41700.0, 9.0], [42500.0, 6.0], [43300.0, 7.0], [44100.0, 5.0], [44900.0, 1.0], [46500.0, 1.0], [45700.0, 3.0], [47300.0, 1.0], [48900.0, 2.0], [48100.0, 2.0], [49700.0, 5.0], [52100.0, 5.0], [51300.0, 2.0], [52900.0, 4.0], [53700.0, 4.0], [54500.0, 2.0], [56900.0, 1.0], [56100.0, 1.0], [59300.0, 2.0], [57700.0, 2.0], [58500.0, 1.0], [60100.0, 1.0], [60900.0, 2.0], [62500.0, 1.0], [61700.0, 1.0], [64900.0, 1.0], [67400.0, 1.0], [65800.0, 1.0], [69000.0, 1.0], [70600.0, 1.0], [77000.0, 2.0], [91400.0, 1.0], [97800.0, 1.0], [3100.0, 1.0], [3500.0, 1.0], [3800.0, 1.0], [4100.0, 1.0], [71300.0, 1.0], [72900.0, 2.0], [69700.0, 1.0], [4700.0, 1.0], [76100.0, 1.0], [74500.0, 1.0], [5000.0, 1.0], [79300.0, 3.0], [80900.0, 1.0], [5300.0, 1.0], [85700.0, 1.0], [84100.0, 1.0], [87300.0, 1.0], [5800.0, 1.0], [93700.0, 3.0], [6100.0, 1.0], [96900.0, 1.0], [100100.0, 1.0], [6400.0, 1.0], [6600.0, 1.0], [7200.0, 1.0], [7700.0, 1.0], [7900.0, 1.0], [8200.0, 1.0], [9000.0, 1.0], [9400.0, 1.0], [9800.0, 1.0], [10000.0, 1.0], [11200.0, 1.0], [10800.0, 1.0], [11600.0, 1.0], [11800.0, 2.0], [12000.0, 1.0], [12600.0, 1.0], [13000.0, 1.0], [13600.0, 1.0], [14000.0, 1.0], [14200.0, 1.0], [15000.0, 1.0], [15200.0, 1.0], [15400.0, 1.0], [15800.0, 1.0], [16000.0, 1.0], [16200.0, 1.0], [16400.0, 1.0], [16800.0, 1.0], [17600.0, 2.0], [18400.0, 2.0], [19200.0, 6.0], [18800.0, 3.0], [19600.0, 8.0], [20400.0, 18.0], [20000.0, 8.0], [20800.0, 13.0], [21200.0, 3.0], [21600.0, 1.0], [23200.0, 2.0], [22800.0, 5.0], [24400.0, 2.0], [23600.0, 2.0], [24800.0, 1.0], [25200.0, 2.0], [25600.0, 1.0], [26400.0, 1.0], [27600.0, 2.0], [26800.0, 1.0], [27200.0, 1.0], [28400.0, 3.0], [28000.0, 1.0], [28800.0, 4.0], [29600.0, 3.0], [29200.0, 2.0], [30400.0, 4.0], [30000.0, 4.0], [31200.0, 3.0], [31600.0, 1.0], [32400.0, 5.0], [32000.0, 2.0], [33600.0, 6.0], [34400.0, 6.0], [36800.0, 4.0], [35200.0, 1.0], [36000.0, 8.0], [38400.0, 3.0], [37600.0, 4.0], [40000.0, 9.0], [40800.0, 2.0], [39200.0, 2.0], [42400.0, 7.0], [41600.0, 6.0], [43200.0, 5.0], [44800.0, 7.0], [44000.0, 3.0], [45600.0, 2.0], [48800.0, 1.0], [48000.0, 1.0], [50400.0, 4.0], [49600.0, 3.0], [52800.0, 2.0], [52000.0, 1.0], [54400.0, 2.0], [55200.0, 1.0], [53600.0, 1.0], [56000.0, 2.0], [56800.0, 2.0], [57600.0, 1.0], [58400.0, 1.0], [60800.0, 1.0], [60000.0, 2.0], [63200.0, 1.0], [62400.0, 2.0], [64000.0, 1.0], [64800.0, 3.0], [67200.0, 1.0], [68800.0, 1.0], [70400.0, 2.0], [76800.0, 1.0], [83200.0, 1.0], [89600.0, 1.0], [97600.0, 1.0], [94400.0, 1.0], [100800.0, 1.0], [104000.0, 1.0], [116800.0, 1.0], [120000.0, 18.0], [68700.0, 2.0], [73500.0, 2.0], [70300.0, 1.0], [78300.0, 1.0], [81500.0, 1.0], [84700.0, 1.0], [97500.0, 1.0], [99100.0, 1.0], [33900.0, 6.0], [33100.0, 4.0], [34700.0, 2.0], [35500.0, 4.0], [36300.0, 2.0], [37900.0, 3.0], [38700.0, 3.0], [37100.0, 4.0], [39500.0, 5.0], [40300.0, 6.0], [41100.0, 8.0], [41900.0, 7.0], [42700.0, 3.0], [43500.0, 5.0], [44300.0, 2.0], [45900.0, 6.0], [45100.0, 5.0], [46700.0, 4.0], [49100.0, 1.0], [48300.0, 5.0], [49900.0, 3.0], [50700.0, 1.0], [51500.0, 3.0], [53100.0, 1.0], [52300.0, 2.0], [53900.0, 4.0], [55500.0, 1.0], [57100.0, 3.0], [56300.0, 1.0], [58700.0, 3.0], [57900.0, 2.0], [59500.0, 4.0], [61100.0, 1.0], [60300.0, 2.0], [62700.0, 3.0], [65100.0, 1.0], [66200.0, 1.0], [67800.0, 2.0], [72600.0, 1.0], [75800.0, 1.0], [80600.0, 2.0], [83800.0, 1.0], [85400.0, 1.0], [88600.0, 1.0], [98200.0, 2.0], [106200.0, 1.0], [111000.0, 1.0], [66900.0, 2.0], [71700.0, 1.0], [79700.0, 1.0], [81300.0, 1.0], [78100.0, 1.0], [84500.0, 2.0], [82900.0, 2.0], [86100.0, 1.0], [92500.0, 1.0], [102100.0, 1.0], [100500.0, 1.0], [113300.0, 1.0], [116500.0, 2.0], [16500.0, 3.0], [18100.0, 1.0], [18900.0, 4.0], [19300.0, 2.0], [18500.0, 2.0], [20100.0, 10.0], [19700.0, 1.0], [21300.0, 4.0], [20900.0, 15.0], [20500.0, 14.0], [22100.0, 6.0], [21700.0, 6.0], [22500.0, 1.0], [23300.0, 2.0], [22900.0, 1.0], [24100.0, 4.0], [23700.0, 4.0], [24900.0, 2.0], [25300.0, 1.0], [25700.0, 3.0], [26100.0, 4.0], [26900.0, 3.0], [27300.0, 2.0], [27700.0, 2.0], [28500.0, 2.0], [28100.0, 1.0], [29300.0, 2.0], [28900.0, 2.0], [29700.0, 3.0], [30500.0, 2.0], [30100.0, 3.0], [31700.0, 8.0], [31300.0, 3.0], [30900.0, 2.0], [32500.0, 2.0], [32100.0, 5.0], [33000.0, 5.0], [34600.0, 3.0], [33800.0, 2.0], [35400.0, 5.0], [36200.0, 3.0], [37000.0, 6.0], [38600.0, 2.0], [37800.0, 6.0], [39400.0, 6.0], [40200.0, 1.0], [42600.0, 3.0], [41000.0, 3.0], [41800.0, 5.0], [45000.0, 4.0], [44200.0, 3.0], [43400.0, 3.0], [46600.0, 4.0], [45800.0, 5.0], [47400.0, 4.0], [48200.0, 1.0], [49000.0, 1.0], [50600.0, 1.0], [49800.0, 2.0], [51400.0, 5.0], [53000.0, 4.0], [52200.0, 3.0], [53800.0, 6.0], [54600.0, 3.0], [57000.0, 1.0], [56200.0, 4.0], [55400.0, 3.0], [58600.0, 3.0], [57800.0, 1.0], [59400.0, 1.0], [61000.0, 1.0], [60200.0, 2.0], [61800.0, 2.0], [65000.0, 2.0], [66000.0, 1.0], [70800.0, 1.0], [82000.0, 1.0], [83600.0, 1.0], [101200.0, 1.0], [67500.0, 1.0], [72300.0, 2.0], [80300.0, 1.0], [85100.0, 1.0], [83500.0, 1.0], [86700.0, 1.0], [88300.0, 1.0], [97900.0, 1.0], [105900.0, 1.0], [33300.0, 4.0], [34100.0, 6.0], [36500.0, 5.0], [35700.0, 11.0], [34900.0, 4.0], [37300.0, 5.0], [38900.0, 3.0], [38100.0, 2.0], [39700.0, 7.0], [40500.0, 3.0], [42100.0, 3.0], [41300.0, 3.0], [42900.0, 6.0], [43700.0, 4.0], [44500.0, 2.0], [46900.0, 3.0], [45300.0, 1.0], [47700.0, 2.0], [49300.0, 5.0], [50900.0, 3.0], [52500.0, 4.0], [51700.0, 1.0], [54100.0, 3.0], [54900.0, 3.0], [53300.0, 3.0], [56500.0, 2.0], [55700.0, 3.0], [57300.0, 5.0], [58900.0, 3.0], [58100.0, 1.0], [60500.0, 4.0], [59700.0, 1.0], [61300.0, 3.0], [62100.0, 3.0], [62900.0, 2.0], [63700.0, 3.0], [64500.0, 1.0], [66600.0, 2.0], [68200.0, 1.0], [69800.0, 1.0], [73000.0, 1.0], [85800.0, 2.0], [82600.0, 2.0], [101800.0, 1.0], [100200.0, 1.0], [65700.0, 2.0], [70500.0, 1.0], [75300.0, 1.0], [76900.0, 1.0], [81700.0, 2.0], [80100.0, 1.0], [83300.0, 1.0], [84900.0, 1.0], [94500.0, 1.0], [99300.0, 1.0], [8300.0, 2.0], [9500.0, 1.0], [9900.0, 1.0], [10500.0, 1.0], [12700.0, 1.0], [13300.0, 1.0], [14300.0, 1.0], [15100.0, 1.0], [15500.0, 1.0], [16100.0, 1.0], [17000.0, 3.0], [17400.0, 2.0], [16600.0, 2.0], [18200.0, 4.0], [17800.0, 3.0], [19400.0, 4.0], [19000.0, 8.0], [18600.0, 3.0], [19800.0, 10.0], [20200.0, 15.0], [21000.0, 11.0], [20600.0, 9.0], [21800.0, 3.0], [22200.0, 2.0], [23000.0, 2.0], [22600.0, 2.0], [23400.0, 3.0], [24200.0, 3.0], [23800.0, 1.0], [24600.0, 2.0], [25000.0, 2.0], [25800.0, 1.0], [27000.0, 3.0], [27400.0, 2.0], [28600.0, 1.0], [28200.0, 1.0], [29400.0, 6.0], [29000.0, 1.0], [30600.0, 1.0], [30200.0, 4.0], [29800.0, 2.0], [31000.0, 2.0], [31400.0, 1.0], [31800.0, 2.0], [32200.0, 3.0], [34000.0, 3.0], [33200.0, 5.0], [34800.0, 2.0], [35600.0, 9.0], [36400.0, 5.0], [38000.0, 1.0], [38800.0, 2.0], [37200.0, 5.0], [39600.0, 4.0], [40400.0, 5.0], [42800.0, 5.0], [41200.0, 3.0], [43600.0, 4.0], [44400.0, 5.0], [45200.0, 5.0], [46800.0, 1.0], [46000.0, 2.0], [48400.0, 3.0], [47600.0, 3.0], [50800.0, 4.0], [50000.0, 2.0], [49200.0, 1.0], [52400.0, 8.0], [53200.0, 1.0], [51600.0, 1.0], [54800.0, 2.0], [54000.0, 2.0], [55600.0, 3.0], [58800.0, 1.0], [59600.0, 2.0], [61200.0, 1.0], [60400.0, 1.0], [62800.0, 1.0], [62000.0, 1.0], [65200.0, 1.0], [63600.0, 1.0], [64400.0, 2.0], [66400.0, 2.0], [79200.0, 1.0], [85600.0, 1.0], [88800.0, 1.0], [92000.0, 1.0], [100000.0, 1.0], [98400.0, 1.0], [101600.0, 1.0], [66300.0, 1.0], [69500.0, 2.0], [71100.0, 1.0], [72700.0, 2.0], [74300.0, 1.0], [75900.0, 1.0], [79100.0, 1.0], [85500.0, 1.0], [82300.0, 2.0], [96700.0, 1.0], [99900.0, 1.0], [106300.0, 1.0], [33500.0, 1.0], [34300.0, 3.0], [35900.0, 3.0], [35100.0, 3.0], [36700.0, 4.0], [37500.0, 2.0], [40700.0, 5.0], [39900.0, 6.0], [39100.0, 2.0], [41500.0, 4.0], [42300.0, 4.0], [43900.0, 6.0], [44700.0, 3.0], [43100.0, 6.0], [46300.0, 5.0], [45500.0, 2.0], [47900.0, 5.0], [48700.0, 3.0], [50300.0, 2.0], [49500.0, 3.0], [51100.0, 3.0], [51900.0, 4.0], [52700.0, 2.0], [55100.0, 2.0], [54300.0, 4.0], [53500.0, 4.0], [55900.0, 2.0], [56700.0, 3.0], [57500.0, 5.0], [58300.0, 2.0], [59100.0, 1.0], [60700.0, 2.0], [62300.0, 2.0], [63100.0, 2.0], [61500.0, 1.0], [64700.0, 6.0], [65500.0, 4.0], [63900.0, 1.0], [68600.0, 1.0], [67000.0, 1.0], [73400.0, 1.0], [71800.0, 2.0], [78200.0, 3.0], [84600.0, 1.0], [87800.0, 2.0], [92600.0, 1.0], [100600.0, 1.0], [118200.0, 1.0], [119800.0, 1.0], [67700.0, 1.0], [74100.0, 1.0], [78900.0, 3.0], [86900.0, 2.0], [93300.0, 1.0], [94900.0, 1.0], [96500.0, 1.0], [16700.0, 1.0], [17100.0, 1.0], [18300.0, 2.0], [18700.0, 3.0], [19100.0, 1.0], [19900.0, 2.0], [19500.0, 3.0], [20300.0, 17.0], [20700.0, 13.0], [21100.0, 9.0], [21500.0, 5.0], [22300.0, 6.0], [21900.0, 3.0], [22700.0, 3.0], [23500.0, 2.0], [24300.0, 2.0], [23900.0, 2.0], [24700.0, 2.0], [25500.0, 1.0], [25100.0, 1.0], [25900.0, 1.0], [26300.0, 3.0], [26700.0, 2.0], [27500.0, 2.0], [27100.0, 2.0], [27900.0, 5.0], [28300.0, 1.0], [28700.0, 3.0], [29500.0, 4.0], [29100.0, 4.0], [30300.0, 3.0], [30700.0, 5.0], [29900.0, 2.0], [31100.0, 3.0], [31500.0, 2.0], [31900.0, 4.0], [32700.0, 3.0], [32300.0, 8.0], [34200.0, 6.0], [33400.0, 1.0], [35000.0, 8.0], [36600.0, 4.0], [35800.0, 3.0], [38200.0, 2.0], [37400.0, 1.0], [40600.0, 7.0], [39000.0, 3.0], [42200.0, 5.0], [43000.0, 4.0], [41400.0, 5.0], [44600.0, 6.0], [43800.0, 4.0], [46200.0, 4.0], [47000.0, 3.0], [45400.0, 1.0], [48600.0, 6.0], [47800.0, 5.0], [49400.0, 2.0], [50200.0, 3.0], [51000.0, 3.0], [52600.0, 2.0], [51800.0, 1.0], [55000.0, 4.0], [53400.0, 4.0], [56600.0, 3.0], [55800.0, 4.0], [59000.0, 3.0], [58200.0, 2.0], [57400.0, 3.0], [61400.0, 6.0], [59800.0, 2.0], [62200.0, 1.0], [63800.0, 2.0], [65400.0, 2.0], [64600.0, 2.0], [70000.0, 3.0], [71600.0, 1.0], [74800.0, 1.0], [76400.0, 1.0], [81200.0, 1.0], [87600.0, 1.0], [95600.0, 1.0], [103600.0, 1.0], [110000.0, 1.0], [116400.0, 1.0]], "isOverall": false, "label": "HTTP\u8BF7\u6C42", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 120000.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 7.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 1687.0, "series": [{"data": [[0.0, 7.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 1687.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [[3.0, 18.0]], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 3.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 14.862068965517246, "minX": 1.63608912E12, "maxY": 150.0, "series": [{"data": [[1.63608924E12, 54.369863013698634], [1.63608954E12, 128.28125000000003], [1.63608984E12, 14.862068965517246], [1.63608918E12, 50.0], [1.63608948E12, 125.0], [1.63608978E12, 91.80132450331129], [1.63608912E12, 29.333333333333332], [1.63608942E12, 125.0], [1.63608972E12, 149.8888888888889], [1.63608936E12, 103.25342465753424], [1.63608966E12, 150.0], [1.6360893E12, 100.0], [1.6360896E12, 150.0]], "isOverall": false, "label": "jp@gc - Ultimate Thread Group", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.63608984E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 1612.1666666666665, "minX": 1.0, "maxY": 120012.0, "series": [{"data": [[2.0, 1612.1666666666665], [3.0, 5435.0], [4.0, 19833.0], [5.0, 9135.0], [6.0, 24157.0], [7.0, 15131.0], [8.0, 28569.0], [9.0, 34110.0], [10.0, 30376.0], [11.0, 33778.0], [12.0, 39997.0], [13.0, 33825.0], [14.0, 37394.0], [15.0, 70093.0], [16.0, 95551.0], [17.0, 87623.0], [18.0, 68243.0], [19.0, 87831.0], [20.0, 28808.0], [21.0, 66677.0], [22.0, 55688.0], [23.0, 67897.0], [24.0, 43167.0], [25.0, 66328.5], [26.0, 43746.0], [27.0, 52498.0], [28.0, 47365.0], [29.0, 66614.0], [30.0, 66705.0], [31.0, 67798.0], [33.0, 62795.0], [32.0, 69563.0], [34.0, 35998.0], [35.0, 74155.0], [37.0, 38280.0], [36.0, 73035.0], [39.0, 72342.0], [38.0, 67879.0], [41.0, 48611.5], [40.0, 67051.0], [42.0, 50194.5], [43.0, 55520.0], [45.0, 58923.0], [44.0, 47946.0], [47.0, 44440.333333333336], [46.0, 64679.0], [49.0, 48916.0], [48.0, 47847.0], [50.0, 19273.62499999999], [51.0, 34097.0], [53.0, 45180.0], [52.0, 78227.0], [55.0, 45174.0], [54.0, 96984.0], [57.0, 43281.0], [56.0, 71857.0], [59.0, 69000.0], [58.0, 70544.0], [61.0, 36197.5], [60.0, 54031.0], [63.0, 51768.0], [62.0, 54110.0], [65.0, 29548.5], [67.0, 120009.0], [66.0, 51570.0], [64.0, 45770.0], [68.0, 30458.0], [71.0, 39683.5], [70.0, 42192.0], [69.0, 62356.0], [75.0, 73568.0], [74.0, 69781.0], [73.0, 54435.0], [72.0, 41083.0], [76.0, 38658.5], [79.0, 36604.5], [78.0, 33257.0], [77.0, 116432.0], [83.0, 51685.0], [82.0, 85840.0], [81.0, 70489.0], [80.0, 63476.5], [85.0, 36305.0], [87.0, 53542.5], [86.0, 60074.0], [84.0, 84470.0], [88.0, 35397.0], [91.0, 53321.0], [90.0, 70350.0], [89.0, 53074.0], [92.0, 36830.0], [95.0, 43616.0], [94.0, 47913.0], [93.0, 48768.0], [96.0, 45053.0], [99.0, 38772.333333333336], [98.0, 58230.0], [97.0, 64809.0], [100.0, 36061.43165467625], [103.0, 64967.0], [102.0, 56781.0], [101.0, 57525.0], [107.0, 100579.0], [106.0, 99354.0], [105.0, 97544.0], [104.0, 42579.0], [111.0, 47857.0], [110.0, 120012.0], [109.0, 69762.0], [108.0, 33902.0], [115.0, 68701.0], [114.0, 32389.0], [113.0, 78559.0], [112.0, 37141.0], [119.0, 53782.0], [118.0, 70960.33333333333], [117.0, 32329.0], [116.0, 110018.0], [123.0, 51127.0], [122.0, 92519.0], [121.0, 37674.0], [120.0, 57377.0], [125.0, 46449.92324561405], [127.0, 41167.0], [126.0, 43769.5], [124.0, 43833.0], [135.0, 67773.5], [134.0, 83274.0], [133.0, 43284.0], [132.0, 100275.0], [131.0, 111092.0], [130.0, 48698.0], [129.0, 61302.0], [128.0, 41701.0], [143.0, 50902.0], [142.0, 80608.0], [141.0, 66211.0], [140.0, 55106.5], [139.0, 73614.0], [138.0, 46328.0], [137.0, 83682.0], [136.0, 60324.0], [150.0, 53943.03711340208], [149.0, 56346.75000000001], [148.0, 53185.0], [147.0, 53212.0], [146.0, 64844.0], [145.0, 37372.0], [144.0, 57305.200000000004], [1.0, 16546.0]], "isOverall": false, "label": "HTTP\u8BF7\u6C42", "isController": false}, {"data": [[110.11448598130848, 43287.0181074766]], "isOverall": false, "label": "HTTP\u8BF7\u6C42-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 150.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 71.7, "minX": 1.63608912E12, "maxY": 78107.23333333334, "series": [{"data": [[1.63608924E12, 71122.55], [1.63608954E12, 78107.23333333334], [1.63608984E12, 14066.166666666666], [1.63608918E12, 70763.63333333333], [1.63608948E12, 72951.28333333334], [1.63608978E12, 71974.43333333333], [1.63608912E12, 5452.416666666667], [1.63608942E12, 71578.41666666667], [1.63608972E12, 74757.4], [1.63608936E12, 71163.9], [1.63608966E12, 73954.85], [1.6360893E12, 70076.33333333333], [1.6360896E12, 76034.38333333333]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.63608924E12, 581.5666666666667], [1.63608954E12, 637.3333333333334], [1.63608984E12, 115.51666666666667], [1.63608918E12, 577.5833333333334], [1.63608948E12, 597.5], [1.63608978E12, 601.4833333333333], [1.63608912E12, 71.7], [1.63608942E12, 585.55], [1.63608972E12, 645.3], [1.63608936E12, 581.5666666666667], [1.63608966E12, 621.4], [1.6360893E12, 573.6], [1.6360896E12, 629.3666666666667]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.63608984E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 3061.8333333333335, "minX": 1.63608912E12, "maxY": 61344.77483443706, "series": [{"data": [[1.63608924E12, 20521.554794520547], [1.63608954E12, 46511.212499999994], [1.63608984E12, 44748.06896551725], [1.63608918E12, 18633.71034482758], [1.63608948E12, 51231.799999999974], [1.63608978E12, 61344.77483443706], [1.63608912E12, 3061.8333333333335], [1.63608942E12, 42712.21768707486], [1.63608972E12, 56201.055555555584], [1.63608936E12, 40438.43150684931], [1.63608966E12, 59423.57692307691], [1.6360893E12, 32179.090277777777], [1.6360896E12, 47314.955696202516]], "isOverall": false, "label": "HTTP\u8BF7\u6C42", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.63608984E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 3054.7777777777774, "minX": 1.63608912E12, "maxY": 61332.50993377483, "series": [{"data": [[1.63608924E12, 20507.64383561644], [1.63608954E12, 46498.46249999999], [1.63608984E12, 44731.0], [1.63608918E12, 18619.44827586207], [1.63608948E12, 51218.08666666666], [1.63608978E12, 61332.50993377483], [1.63608912E12, 3054.7777777777774], [1.63608942E12, 42699.56462585037], [1.63608972E12, 56188.462962962985], [1.63608936E12, 40424.431506849294], [1.63608966E12, 59409.275641025655], [1.6360893E12, 32166.166666666682], [1.6360896E12, 47302.13924050631]], "isOverall": false, "label": "HTTP\u8BF7\u6C42", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.63608984E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 7.019230769230767, "minX": 1.63608912E12, "maxY": 8.420689655172415, "series": [{"data": [[1.63608924E12, 7.602739726027398], [1.63608954E12, 7.100000000000002], [1.63608984E12, 7.586206896551723], [1.63608918E12, 8.420689655172415], [1.63608948E12, 7.153333333333335], [1.63608978E12, 7.112582781456954], [1.63608912E12, 7.666666666666668], [1.63608942E12, 7.564625850340138], [1.63608972E12, 7.2037037037037015], [1.63608936E12, 7.17808219178082], [1.63608966E12, 7.019230769230767], [1.6360893E12, 7.402777777777773], [1.6360896E12, 7.810126582278477]], "isOverall": false, "label": "HTTP\u8BF7\u6C42", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.63608984E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 13.0, "minX": 1.63608912E12, "maxY": 119893.0, "series": [{"data": [[1.63608924E12, 25979.0], [1.63608954E12, 100063.0], [1.63608984E12, 95551.0], [1.63608918E12, 24968.0], [1.63608948E12, 116545.0], [1.63608978E12, 116432.0], [1.63608912E12, 6698.0], [1.63608942E12, 68366.0], [1.63608972E12, 119893.0], [1.63608936E12, 58723.0], [1.63608966E12, 118234.0], [1.6360893E12, 50967.0], [1.6360896E12, 98291.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.63608924E12, 15289.0], [1.63608954E12, 22614.0], [1.63608984E12, 9587.0], [1.63608918E12, 7276.0], [1.63608948E12, 22221.0], [1.63608978E12, 31246.0], [1.63608912E12, 13.0], [1.63608942E12, 19233.0], [1.63608972E12, 18289.0], [1.63608936E12, 24211.0], [1.63608966E12, 18613.0], [1.6360893E12, 16507.0], [1.6360896E12, 17870.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.63608924E12, 22558.000000000004], [1.63608954E12, 80333.6], [1.63608984E12, 87623.0], [1.63608918E12, 22039.4], [1.63608948E12, 84542.0], [1.63608978E12, 84384.4], [1.63608912E12, 6457.700000000001], [1.63608942E12, 61989.20000000001], [1.63608972E12, 81495.59999999998], [1.63608936E12, 48542.200000000004], [1.63608966E12, 91016.00000000006], [1.6360893E12, 46623.5], [1.6360896E12, 62563.90000000002]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.63608924E12, 25705.93], [1.63608954E12, 99479.83999999998], [1.63608984E12, 95551.0], [1.63608918E12, 24741.679999999997], [1.63608948E12, 114940.54000000002], [1.63608978E12, 113815.39999999995], [1.63608912E12, 6698.0], [1.63608942E12, 68353.04], [1.63608972E12, 112386.46000000011], [1.63608936E12, 57218.530000000006], [1.63608966E12, 117506.31], [1.6360893E12, 50903.1], [1.6360896E12, 98089.79000000001]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.63608924E12, 23552.55], [1.63608954E12, 85386.64999999998], [1.63608984E12, 91691.0], [1.63608918E12, 23214.299999999996], [1.63608948E12, 91498.99999999996], [1.63608978E12, 98539.49999999997], [1.63608912E12, 6698.0], [1.63608942E12, 65187.4], [1.63608972E12, 93013.89999999998], [1.63608936E12, 50739.8], [1.63608966E12, 101915.9], [1.6360893E12, 49743.75], [1.6360896E12, 79274.35]], "isOverall": false, "label": "95th percentile", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.63608984E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 17.0, "minX": 1.0, "maxY": 120014.0, "series": [{"data": [[2.0, 37344.0], [1.0, 51936.5], [4.0, 41957.0], [5.0, 34612.0], [3.0, 41408.5], [6.0, 72796.0], [7.0, 17.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[4.0, 120012.0], [5.0, 120013.0], [3.0, 120012.5], [6.0, 120014.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 7.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 16.0, "minX": 1.0, "maxY": 120014.0, "series": [{"data": [[2.0, 37328.5], [1.0, 51924.0], [4.0, 41943.0], [5.0, 34600.0], [3.0, 41360.0], [6.0, 72786.0], [7.0, 16.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[4.0, 120012.0], [5.0, 120013.0], [3.0, 120012.5], [6.0, 120014.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 7.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 0.016666666666666666, "minX": 1.63608912E12, "maxY": 3.2666666666666666, "series": [{"data": [[1.63608924E12, 3.2666666666666666], [1.63608954E12, 3.0833333333333335], [1.63608984E12, 0.016666666666666666], [1.63608918E12, 2.4166666666666665], [1.63608948E12, 2.5], [1.63608978E12, 0.5333333333333333], [1.63608912E12, 1.1333333333333333], [1.63608942E12, 2.45], [1.63608972E12, 2.65], [1.63608936E12, 2.85], [1.63608966E12, 2.6], [1.6360893E12, 2.4], [1.6360896E12, 2.6333333333333333]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.63608984E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 0.03333333333333333, "minX": 1.63608912E12, "maxY": 2.6666666666666665, "series": [{"data": [[1.63608924E12, 2.433333333333333], [1.63608954E12, 2.6666666666666665], [1.63608984E12, 0.48333333333333334], [1.63608918E12, 2.4166666666666665], [1.63608948E12, 2.5], [1.63608978E12, 2.466666666666667], [1.63608912E12, 0.3], [1.63608942E12, 2.45], [1.63608972E12, 2.55], [1.63608936E12, 2.433333333333333], [1.63608966E12, 2.533333333333333], [1.6360893E12, 2.4], [1.6360896E12, 2.6]], "isOverall": false, "label": "200", "isController": false}, {"data": [[1.63608972E12, 0.15], [1.63608966E12, 0.06666666666666667], [1.63608978E12, 0.05], [1.6360896E12, 0.03333333333333333]], "isOverall": false, "label": "404", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.63608984E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.03333333333333333, "minX": 1.63608912E12, "maxY": 2.6666666666666665, "series": [{"data": [[1.63608972E12, 0.15], [1.63608966E12, 0.06666666666666667], [1.63608978E12, 0.05], [1.6360896E12, 0.03333333333333333]], "isOverall": false, "label": "HTTP\u8BF7\u6C42-failure", "isController": false}, {"data": [[1.63608924E12, 2.433333333333333], [1.63608954E12, 2.6666666666666665], [1.63608984E12, 0.48333333333333334], [1.63608918E12, 2.4166666666666665], [1.63608948E12, 2.5], [1.63608978E12, 2.466666666666667], [1.63608912E12, 0.3], [1.63608942E12, 2.45], [1.63608972E12, 2.55], [1.63608936E12, 2.433333333333333], [1.63608966E12, 2.533333333333333], [1.6360893E12, 2.4], [1.6360896E12, 2.6]], "isOverall": false, "label": "HTTP\u8BF7\u6C42-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.63608984E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 0.03333333333333333, "minX": 1.63608912E12, "maxY": 2.6666666666666665, "series": [{"data": [[1.63608924E12, 2.433333333333333], [1.63608954E12, 2.6666666666666665], [1.63608984E12, 0.48333333333333334], [1.63608918E12, 2.4166666666666665], [1.63608948E12, 2.5], [1.63608978E12, 2.466666666666667], [1.63608912E12, 0.3], [1.63608942E12, 2.45], [1.63608972E12, 2.55], [1.63608936E12, 2.433333333333333], [1.63608966E12, 2.533333333333333], [1.6360893E12, 2.4], [1.6360896E12, 2.6]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [[1.63608972E12, 0.15], [1.63608966E12, 0.06666666666666667], [1.63608978E12, 0.05], [1.6360896E12, 0.03333333333333333]], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.63608984E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

