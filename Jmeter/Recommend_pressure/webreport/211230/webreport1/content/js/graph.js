/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 45.0, "minX": 0.0, "maxY": 120079.0, "series": [{"data": [[0.0, 45.0], [0.1, 585.0], [0.2, 628.0], [0.3, 647.0], [0.4, 1194.0], [0.5, 1353.0], [0.6, 1362.0], [0.7, 1371.0], [0.8, 1434.0], [0.9, 1543.0], [1.0, 1676.0], [1.1, 1752.0], [1.2, 1782.0], [1.3, 1806.0], [1.4, 1831.0], [1.5, 1886.0], [1.6, 1895.0], [1.7, 1908.0], [1.8, 1925.0], [1.9, 1951.0], [2.0, 1960.0], [2.1, 1974.0], [2.2, 2018.0], [2.3, 2045.0], [2.4, 2062.0], [2.5, 2090.0], [2.6, 2123.0], [2.7, 2145.0], [2.8, 2151.0], [2.9, 2156.0], [3.0, 2162.0], [3.1, 2171.0], [3.2, 2204.0], [3.3, 2218.0], [3.4, 2221.0], [3.5, 2254.0], [3.6, 2261.0], [3.7, 2263.0], [3.8, 2265.0], [3.9, 2270.0], [4.0, 2286.0], [4.1, 2291.0], [4.2, 2295.0], [4.3, 2298.0], [4.4, 2329.0], [4.5, 2346.0], [4.6, 2365.0], [4.7, 2414.0], [4.8, 2417.0], [4.9, 2442.0], [5.0, 2461.0], [5.1, 2486.0], [5.2, 2502.0], [5.3, 2513.0], [5.4, 2580.0], [5.5, 2640.0], [5.6, 2666.0], [5.7, 2718.0], [5.8, 2743.0], [5.9, 2763.0], [6.0, 2778.0], [6.1, 2782.0], [6.2, 2790.0], [6.3, 2817.0], [6.4, 2825.0], [6.5, 2831.0], [6.6, 2848.0], [6.7, 2882.0], [6.8, 2904.0], [6.9, 2913.0], [7.0, 2923.0], [7.1, 2958.0], [7.2, 2976.0], [7.3, 2996.0], [7.4, 3021.0], [7.5, 3051.0], [7.6, 3061.0], [7.7, 3089.0], [7.8, 3104.0], [7.9, 3112.0], [8.0, 3125.0], [8.1, 3166.0], [8.2, 3202.0], [8.3, 3214.0], [8.4, 3229.0], [8.5, 3237.0], [8.6, 3244.0], [8.7, 3255.0], [8.8, 3262.0], [8.9, 3268.0], [9.0, 3279.0], [9.1, 3290.0], [9.2, 3305.0], [9.3, 3314.0], [9.4, 3331.0], [9.5, 3361.0], [9.6, 3394.0], [9.7, 3450.0], [9.8, 3477.0], [9.9, 3483.0], [10.0, 3517.0], [10.1, 3526.0], [10.2, 3535.0], [10.3, 3545.0], [10.4, 3553.0], [10.5, 3563.0], [10.6, 3575.0], [10.7, 3605.0], [10.8, 3624.0], [10.9, 3633.0], [11.0, 3712.0], [11.1, 3737.0], [11.2, 3741.0], [11.3, 3762.0], [11.4, 3787.0], [11.5, 3804.0], [11.6, 3825.0], [11.7, 3830.0], [11.8, 3836.0], [11.9, 3845.0], [12.0, 3865.0], [12.1, 3870.0], [12.2, 3877.0], [12.3, 3883.0], [12.4, 3891.0], [12.5, 3912.0], [12.6, 3927.0], [12.7, 3931.0], [12.8, 3940.0], [12.9, 3944.0], [13.0, 3968.0], [13.1, 3975.0], [13.2, 3980.0], [13.3, 4000.0], [13.4, 4020.0], [13.5, 4065.0], [13.6, 4084.0], [13.7, 4092.0], [13.8, 4103.0], [13.9, 4114.0], [14.0, 4127.0], [14.1, 4132.0], [14.2, 4142.0], [14.3, 4151.0], [14.4, 4158.0], [14.5, 4166.0], [14.6, 4171.0], [14.7, 4178.0], [14.8, 4194.0], [14.9, 4203.0], [15.0, 4213.0], [15.1, 4257.0], [15.2, 4270.0], [15.3, 4277.0], [15.4, 4284.0], [15.5, 4290.0], [15.6, 4297.0], [15.7, 4309.0], [15.8, 4320.0], [15.9, 4324.0], [16.0, 4339.0], [16.1, 4356.0], [16.2, 4360.0], [16.3, 4363.0], [16.4, 4369.0], [16.5, 4374.0], [16.6, 4387.0], [16.7, 4405.0], [16.8, 4424.0], [16.9, 4450.0], [17.0, 4464.0], [17.1, 4474.0], [17.2, 4495.0], [17.3, 4512.0], [17.4, 4522.0], [17.5, 4557.0], [17.6, 4571.0], [17.7, 4576.0], [17.8, 4582.0], [17.9, 4585.0], [18.0, 4590.0], [18.1, 4600.0], [18.2, 4602.0], [18.3, 4605.0], [18.4, 4650.0], [18.5, 4666.0], [18.6, 4674.0], [18.7, 4688.0], [18.8, 4694.0], [18.9, 4707.0], [19.0, 4723.0], [19.1, 4735.0], [19.2, 4765.0], [19.3, 4781.0], [19.4, 4787.0], [19.5, 4793.0], [19.6, 4797.0], [19.7, 4813.0], [19.8, 4818.0], [19.9, 4826.0], [20.0, 4856.0], [20.1, 4868.0], [20.2, 4883.0], [20.3, 4906.0], [20.4, 4931.0], [20.5, 4948.0], [20.6, 4956.0], [20.7, 4961.0], [20.8, 4965.0], [20.9, 4982.0], [21.0, 4987.0], [21.1, 5009.0], [21.2, 5020.0], [21.3, 5024.0], [21.4, 5028.0], [21.5, 5031.0], [21.6, 5035.0], [21.7, 5037.0], [21.8, 5039.0], [21.9, 5041.0], [22.0, 5044.0], [22.1, 5047.0], [22.2, 5050.0], [22.3, 5054.0], [22.4, 5056.0], [22.5, 5082.0], [22.6, 5092.0], [22.7, 5099.0], [22.8, 5105.0], [22.9, 5111.0], [23.0, 5117.0], [23.1, 5126.0], [23.2, 5137.0], [23.3, 5151.0], [23.4, 5167.0], [23.5, 5171.0], [23.6, 5174.0], [23.7, 5179.0], [23.8, 5183.0], [23.9, 5193.0], [24.0, 5202.0], [24.1, 5216.0], [24.2, 5233.0], [24.3, 5240.0], [24.4, 5243.0], [24.5, 5247.0], [24.6, 5250.0], [24.7, 5258.0], [24.8, 5264.0], [24.9, 5273.0], [25.0, 5277.0], [25.1, 5280.0], [25.2, 5282.0], [25.3, 5287.0], [25.4, 5291.0], [25.5, 5294.0], [25.6, 5298.0], [25.7, 5301.0], [25.8, 5311.0], [25.9, 5317.0], [26.0, 5325.0], [26.1, 5337.0], [26.2, 5350.0], [26.3, 5368.0], [26.4, 5379.0], [26.5, 5383.0], [26.6, 5387.0], [26.7, 5390.0], [26.8, 5397.0], [26.9, 5403.0], [27.0, 5409.0], [27.1, 5412.0], [27.2, 5423.0], [27.3, 5437.0], [27.4, 5443.0], [27.5, 5444.0], [27.6, 5448.0], [27.7, 5455.0], [27.8, 5464.0], [27.9, 5484.0], [28.0, 5494.0], [28.1, 5518.0], [28.2, 5530.0], [28.3, 5543.0], [28.4, 5548.0], [28.5, 5555.0], [28.6, 5565.0], [28.7, 5578.0], [28.8, 5591.0], [28.9, 5611.0], [29.0, 5616.0], [29.1, 5622.0], [29.2, 5633.0], [29.3, 5646.0], [29.4, 5655.0], [29.5, 5666.0], [29.6, 5673.0], [29.7, 5682.0], [29.8, 5701.0], [29.9, 5715.0], [30.0, 5728.0], [30.1, 5747.0], [30.2, 5781.0], [30.3, 5793.0], [30.4, 5802.0], [30.5, 5817.0], [30.6, 5857.0], [30.7, 5871.0], [30.8, 5892.0], [30.9, 5923.0], [31.0, 5945.0], [31.1, 5997.0], [31.2, 6021.0], [31.3, 6039.0], [31.4, 6059.0], [31.5, 6093.0], [31.6, 6110.0], [31.7, 6154.0], [31.8, 6216.0], [31.9, 6258.0], [32.0, 6313.0], [32.1, 6356.0], [32.2, 6379.0], [32.3, 6426.0], [32.4, 6438.0], [32.5, 6455.0], [32.6, 6500.0], [32.7, 6511.0], [32.8, 6540.0], [32.9, 6632.0], [33.0, 6689.0], [33.1, 6725.0], [33.2, 6741.0], [33.3, 6759.0], [33.4, 6773.0], [33.5, 6791.0], [33.6, 6827.0], [33.7, 6839.0], [33.8, 6895.0], [33.9, 6958.0], [34.0, 7017.0], [34.1, 7055.0], [34.2, 7098.0], [34.3, 7132.0], [34.4, 7187.0], [34.5, 7249.0], [34.6, 7285.0], [34.7, 7360.0], [34.8, 7416.0], [34.9, 7449.0], [35.0, 7455.0], [35.1, 7463.0], [35.2, 7487.0], [35.3, 7501.0], [35.4, 7517.0], [35.5, 7528.0], [35.6, 7538.0], [35.7, 7548.0], [35.8, 7560.0], [35.9, 7599.0], [36.0, 7640.0], [36.1, 7713.0], [36.2, 7754.0], [36.3, 7801.0], [36.4, 7849.0], [36.5, 7870.0], [36.6, 7889.0], [36.7, 7925.0], [36.8, 8014.0], [36.9, 8042.0], [37.0, 8064.0], [37.1, 8082.0], [37.2, 8105.0], [37.3, 8209.0], [37.4, 8271.0], [37.5, 8319.0], [37.6, 8421.0], [37.7, 8493.0], [37.8, 8628.0], [37.9, 8676.0], [38.0, 8715.0], [38.1, 8732.0], [38.2, 8774.0], [38.3, 8818.0], [38.4, 8874.0], [38.5, 8955.0], [38.6, 8992.0], [38.7, 9073.0], [38.8, 9105.0], [38.9, 9141.0], [39.0, 9176.0], [39.1, 9212.0], [39.2, 9231.0], [39.3, 9278.0], [39.4, 9304.0], [39.5, 9321.0], [39.6, 9341.0], [39.7, 9385.0], [39.8, 9417.0], [39.9, 9442.0], [40.0, 9459.0], [40.1, 9465.0], [40.2, 9472.0], [40.3, 9478.0], [40.4, 9484.0], [40.5, 9488.0], [40.6, 9496.0], [40.7, 9505.0], [40.8, 9527.0], [40.9, 9556.0], [41.0, 9604.0], [41.1, 9707.0], [41.2, 9751.0], [41.3, 9768.0], [41.4, 9802.0], [41.5, 9872.0], [41.6, 9985.0], [41.7, 10129.0], [41.8, 10178.0], [41.9, 10253.0], [42.0, 10304.0], [42.1, 10382.0], [42.2, 10426.0], [42.3, 10461.0], [42.4, 10542.0], [42.5, 10613.0], [42.6, 10683.0], [42.7, 10721.0], [42.8, 10780.0], [42.9, 10815.0], [43.0, 10839.0], [43.1, 10861.0], [43.2, 10939.0], [43.3, 11015.0], [43.4, 11175.0], [43.5, 11210.0], [43.6, 11288.0], [43.7, 11414.0], [43.8, 11518.0], [43.9, 11580.0], [44.0, 11654.0], [44.1, 11713.0], [44.2, 11768.0], [44.3, 11807.0], [44.4, 11874.0], [44.5, 11989.0], [44.6, 12040.0], [44.7, 12102.0], [44.8, 12199.0], [44.9, 12296.0], [45.0, 12351.0], [45.1, 12432.0], [45.2, 12504.0], [45.3, 12602.0], [45.4, 12683.0], [45.5, 12757.0], [45.6, 12840.0], [45.7, 12926.0], [45.8, 13050.0], [45.9, 13101.0], [46.0, 13182.0], [46.1, 13247.0], [46.2, 13337.0], [46.3, 13440.0], [46.4, 13509.0], [46.5, 13644.0], [46.6, 13762.0], [46.7, 13885.0], [46.8, 13917.0], [46.9, 14041.0], [47.0, 14151.0], [47.1, 14243.0], [47.2, 14332.0], [47.3, 14463.0], [47.4, 14574.0], [47.5, 14673.0], [47.6, 14730.0], [47.7, 14844.0], [47.8, 14956.0], [47.9, 15053.0], [48.0, 15180.0], [48.1, 15289.0], [48.2, 15374.0], [48.3, 15518.0], [48.4, 15578.0], [48.5, 15678.0], [48.6, 15758.0], [48.7, 15863.0], [48.8, 16003.0], [48.9, 16119.0], [49.0, 16238.0], [49.1, 16295.0], [49.2, 16367.0], [49.3, 16503.0], [49.4, 16612.0], [49.5, 16784.0], [49.6, 16909.0], [49.7, 17144.0], [49.8, 17252.0], [49.9, 17383.0], [50.0, 17503.0], [50.1, 17683.0], [50.2, 17812.0], [50.3, 17903.0], [50.4, 18011.0], [50.5, 18174.0], [50.6, 18290.0], [50.7, 18335.0], [50.8, 18508.0], [50.9, 18662.0], [51.0, 18760.0], [51.1, 18969.0], [51.2, 19102.0], [51.3, 19208.0], [51.4, 19389.0], [51.5, 19520.0], [51.6, 19705.0], [51.7, 19848.0], [51.8, 20069.0], [51.9, 20188.0], [52.0, 20363.0], [52.1, 20551.0], [52.2, 20619.0], [52.3, 20746.0], [52.4, 20805.0], [52.5, 20907.0], [52.6, 21009.0], [52.7, 21098.0], [52.8, 21188.0], [52.9, 21308.0], [53.0, 21489.0], [53.1, 21601.0], [53.2, 21735.0], [53.3, 21881.0], [53.4, 22095.0], [53.5, 22238.0], [53.6, 22404.0], [53.7, 22502.0], [53.8, 22638.0], [53.9, 22816.0], [54.0, 22925.0], [54.1, 23113.0], [54.2, 23291.0], [54.3, 23391.0], [54.4, 23481.0], [54.5, 23619.0], [54.6, 23738.0], [54.7, 23896.0], [54.8, 24001.0], [54.9, 24107.0], [55.0, 24299.0], [55.1, 24402.0], [55.2, 24600.0], [55.3, 24752.0], [55.4, 24861.0], [55.5, 24965.0], [55.6, 25060.0], [55.7, 25195.0], [55.8, 25388.0], [55.9, 25610.0], [56.0, 25738.0], [56.1, 25851.0], [56.2, 26016.0], [56.3, 26202.0], [56.4, 26344.0], [56.5, 26508.0], [56.6, 26650.0], [56.7, 26871.0], [56.8, 26998.0], [56.9, 27190.0], [57.0, 27446.0], [57.1, 27606.0], [57.2, 27847.0], [57.3, 28089.0], [57.4, 28266.0], [57.5, 28394.0], [57.6, 28435.0], [57.7, 28545.0], [57.8, 28782.0], [57.9, 28875.0], [58.0, 29026.0], [58.1, 29211.0], [58.2, 29365.0], [58.3, 29559.0], [58.4, 29802.0], [58.5, 29909.0], [58.6, 30009.0], [58.7, 30196.0], [58.8, 30385.0], [58.9, 30554.0], [59.0, 30643.0], [59.1, 30787.0], [59.2, 30924.0], [59.3, 31046.0], [59.4, 31265.0], [59.5, 31509.0], [59.6, 31803.0], [59.7, 31997.0], [59.8, 32099.0], [59.9, 32209.0], [60.0, 32416.0], [60.1, 32586.0], [60.2, 32784.0], [60.3, 32999.0], [60.4, 33189.0], [60.5, 33331.0], [60.6, 33499.0], [60.7, 33695.0], [60.8, 33907.0], [60.9, 34065.0], [61.0, 34177.0], [61.1, 34350.0], [61.2, 34539.0], [61.3, 34677.0], [61.4, 34840.0], [61.5, 34996.0], [61.6, 35208.0], [61.7, 35392.0], [61.8, 35504.0], [61.9, 35734.0], [62.0, 35979.0], [62.1, 36155.0], [62.2, 36259.0], [62.3, 36407.0], [62.4, 36507.0], [62.5, 36644.0], [62.6, 36710.0], [62.7, 36796.0], [62.8, 36884.0], [62.9, 37091.0], [63.0, 37213.0], [63.1, 37376.0], [63.2, 37511.0], [63.3, 37701.0], [63.4, 37894.0], [63.5, 38067.0], [63.6, 38211.0], [63.7, 38307.0], [63.8, 38405.0], [63.9, 38584.0], [64.0, 38701.0], [64.1, 38807.0], [64.2, 38936.0], [64.3, 39045.0], [64.4, 39133.0], [64.5, 39251.0], [64.6, 39395.0], [64.7, 39582.0], [64.8, 39688.0], [64.9, 39922.0], [65.0, 40007.0], [65.1, 40107.0], [65.2, 40196.0], [65.3, 40384.0], [65.4, 40488.0], [65.5, 40593.0], [65.6, 40735.0], [65.7, 40900.0], [65.8, 41063.0], [65.9, 41217.0], [66.0, 41409.0], [66.1, 41605.0], [66.2, 41886.0], [66.3, 42088.0], [66.4, 42292.0], [66.5, 42501.0], [66.6, 42784.0], [66.7, 43006.0], [66.8, 43159.0], [66.9, 43356.0], [67.0, 43637.0], [67.1, 43855.0], [67.2, 43944.0], [67.3, 44093.0], [67.4, 44245.0], [67.5, 44394.0], [67.6, 44529.0], [67.7, 44733.0], [67.8, 44959.0], [67.9, 45073.0], [68.0, 45183.0], [68.1, 45392.0], [68.2, 45599.0], [68.3, 45831.0], [68.4, 45983.0], [68.5, 46219.0], [68.6, 46337.0], [68.7, 46515.0], [68.8, 46698.0], [68.9, 46852.0], [69.0, 47049.0], [69.1, 47297.0], [69.2, 47655.0], [69.3, 47804.0], [69.4, 47935.0], [69.5, 48237.0], [69.6, 48494.0], [69.7, 48770.0], [69.8, 48950.0], [69.9, 49096.0], [70.0, 49376.0], [70.1, 49571.0], [70.2, 49898.0], [70.3, 50133.0], [70.4, 50283.0], [70.5, 50513.0], [70.6, 50779.0], [70.7, 50913.0], [70.8, 51081.0], [70.9, 51330.0], [71.0, 51494.0], [71.1, 51656.0], [71.2, 51927.0], [71.3, 52175.0], [71.4, 52555.0], [71.5, 52750.0], [71.6, 52950.0], [71.7, 53084.0], [71.8, 53213.0], [71.9, 53485.0], [72.0, 53654.0], [72.1, 53846.0], [72.2, 54146.0], [72.3, 54473.0], [72.4, 54605.0], [72.5, 54820.0], [72.6, 55024.0], [72.7, 55271.0], [72.8, 55588.0], [72.9, 55918.0], [73.0, 56042.0], [73.1, 56296.0], [73.2, 56428.0], [73.3, 56700.0], [73.4, 56964.0], [73.5, 57239.0], [73.6, 57445.0], [73.7, 57621.0], [73.8, 57833.0], [73.9, 58100.0], [74.0, 58307.0], [74.1, 58421.0], [74.2, 58688.0], [74.3, 58900.0], [74.4, 59054.0], [74.5, 59304.0], [74.6, 59691.0], [74.7, 59851.0], [74.8, 60172.0], [74.9, 60372.0], [75.0, 60575.0], [75.1, 60808.0], [75.2, 61059.0], [75.3, 61238.0], [75.4, 61514.0], [75.5, 61739.0], [75.6, 61898.0], [75.7, 62045.0], [75.8, 62259.0], [75.9, 62356.0], [76.0, 62690.0], [76.1, 62908.0], [76.2, 63199.0], [76.3, 63361.0], [76.4, 63696.0], [76.5, 63897.0], [76.6, 64112.0], [76.7, 64195.0], [76.8, 64445.0], [76.9, 64694.0], [77.0, 64872.0], [77.1, 65019.0], [77.2, 65306.0], [77.3, 65530.0], [77.4, 65717.0], [77.5, 66000.0], [77.6, 66152.0], [77.7, 66226.0], [77.8, 66429.0], [77.9, 66782.0], [78.0, 66989.0], [78.1, 67315.0], [78.2, 67654.0], [78.3, 67787.0], [78.4, 68102.0], [78.5, 68368.0], [78.6, 68604.0], [78.7, 68844.0], [78.8, 69008.0], [78.9, 69306.0], [79.0, 69415.0], [79.1, 69599.0], [79.2, 69787.0], [79.3, 70068.0], [79.4, 70203.0], [79.5, 70543.0], [79.6, 70880.0], [79.7, 70992.0], [79.8, 71238.0], [79.9, 71445.0], [80.0, 71553.0], [80.1, 71890.0], [80.2, 72069.0], [80.3, 72313.0], [80.4, 72575.0], [80.5, 72802.0], [80.6, 72934.0], [80.7, 73142.0], [80.8, 73377.0], [80.9, 73602.0], [81.0, 73799.0], [81.1, 73978.0], [81.2, 74173.0], [81.3, 74322.0], [81.4, 74649.0], [81.5, 74842.0], [81.6, 74996.0], [81.7, 75240.0], [81.8, 75537.0], [81.9, 75799.0], [82.0, 75985.0], [82.1, 76340.0], [82.2, 76542.0], [82.3, 76703.0], [82.4, 76934.0], [82.5, 77231.0], [82.6, 77349.0], [82.7, 77501.0], [82.8, 77937.0], [82.9, 78194.0], [83.0, 78405.0], [83.1, 78601.0], [83.2, 78782.0], [83.3, 79036.0], [83.4, 79321.0], [83.5, 79897.0], [83.6, 80010.0], [83.7, 80264.0], [83.8, 80567.0], [83.9, 80712.0], [84.0, 80982.0], [84.1, 81176.0], [84.2, 81428.0], [84.3, 81784.0], [84.4, 82061.0], [84.5, 82222.0], [84.6, 82676.0], [84.7, 82925.0], [84.8, 83056.0], [84.9, 83302.0], [85.0, 83561.0], [85.1, 83878.0], [85.2, 84104.0], [85.3, 84308.0], [85.4, 84447.0], [85.5, 84644.0], [85.6, 85119.0], [85.7, 85250.0], [85.8, 85513.0], [85.9, 85799.0], [86.0, 86251.0], [86.1, 86575.0], [86.2, 86737.0], [86.3, 86974.0], [86.4, 87202.0], [86.5, 87478.0], [86.6, 87718.0], [86.7, 87995.0], [86.8, 88202.0], [86.9, 88645.0], [87.0, 88995.0], [87.1, 89298.0], [87.2, 89695.0], [87.3, 90088.0], [87.4, 90424.0], [87.5, 90794.0], [87.6, 90999.0], [87.7, 91347.0], [87.8, 91598.0], [87.9, 91874.0], [88.0, 92093.0], [88.1, 92258.0], [88.2, 92614.0], [88.3, 92807.0], [88.4, 93108.0], [88.5, 93344.0], [88.6, 93704.0], [88.7, 93999.0], [88.8, 94302.0], [88.9, 94586.0], [89.0, 95022.0], [89.1, 95307.0], [89.2, 95512.0], [89.3, 95783.0], [89.4, 95989.0], [89.5, 96208.0], [89.6, 96526.0], [89.7, 96832.0], [89.8, 97254.0], [89.9, 97907.0], [90.0, 98310.0], [90.1, 98634.0], [90.2, 99101.0], [90.3, 99341.0], [90.4, 99817.0], [90.5, 100162.0], [90.6, 100458.0], [90.7, 100801.0], [90.8, 101088.0], [90.9, 101350.0], [91.0, 101757.0], [91.1, 102174.0], [91.2, 102451.0], [91.3, 102684.0], [91.4, 103317.0], [91.5, 103809.0], [91.6, 104221.0], [91.7, 104513.0], [91.8, 104980.0], [91.9, 105384.0], [92.0, 105810.0], [92.1, 106595.0], [92.2, 106987.0], [92.3, 107790.0], [92.4, 108200.0], [92.5, 108862.0], [92.6, 109374.0], [92.7, 109720.0], [92.8, 110139.0], [92.9, 110693.0], [93.0, 111000.0], [93.1, 111790.0], [93.2, 112238.0], [93.3, 112874.0], [93.4, 113377.0], [93.5, 113709.0], [93.6, 114597.0], [93.7, 115504.0], [93.8, 116153.0], [93.9, 116427.0], [94.0, 116836.0], [94.1, 117194.0], [94.2, 117668.0], [94.3, 118319.0], [94.4, 119007.0], [94.5, 119428.0], [94.6, 120008.0], [94.7, 120009.0], [94.8, 120009.0], [94.9, 120010.0], [95.0, 120010.0], [95.1, 120010.0], [95.2, 120010.0], [95.3, 120010.0], [95.4, 120011.0], [95.5, 120011.0], [95.6, 120011.0], [95.7, 120011.0], [95.8, 120011.0], [95.9, 120012.0], [96.0, 120012.0], [96.1, 120012.0], [96.2, 120012.0], [96.3, 120012.0], [96.4, 120012.0], [96.5, 120012.0], [96.6, 120012.0], [96.7, 120013.0], [96.8, 120013.0], [96.9, 120013.0], [97.0, 120013.0], [97.1, 120013.0], [97.2, 120013.0], [97.3, 120013.0], [97.4, 120013.0], [97.5, 120013.0], [97.6, 120014.0], [97.7, 120014.0], [97.8, 120014.0], [97.9, 120014.0], [98.0, 120014.0], [98.1, 120014.0], [98.2, 120014.0], [98.3, 120015.0], [98.4, 120015.0], [98.5, 120015.0], [98.6, 120015.0], [98.7, 120016.0], [98.8, 120016.0], [98.9, 120016.0], [99.0, 120017.0], [99.1, 120017.0], [99.2, 120018.0], [99.3, 120019.0], [99.4, 120020.0], [99.5, 120021.0], [99.6, 120022.0], [99.7, 120025.0], [99.8, 120028.0], [99.9, 120035.0]], "isOverall": false, "label": "HTTP\u8BF7\u6C42", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 0.0, "maxY": 576.0, "series": [{"data": [[0.0, 1.0], [66700.0, 5.0], [73100.0, 5.0], [69900.0, 7.0], [76300.0, 4.0], [79500.0, 1.0], [82700.0, 3.0], [85900.0, 1.0], [89100.0, 2.0], [92300.0, 3.0], [95500.0, 6.0], [98700.0, 2.0], [101900.0, 2.0], [105100.0, 1.0], [108300.0, 2.0], [117900.0, 2.0], [32900.0, 6.0], [34500.0, 8.0], [36100.0, 7.0], [37700.0, 3.0], [39300.0, 6.0], [40900.0, 9.0], [42500.0, 7.0], [44100.0, 8.0], [45700.0, 1.0], [48900.0, 4.0], [47300.0, 6.0], [50500.0, 5.0], [52100.0, 4.0], [53700.0, 4.0], [55300.0, 4.0], [56900.0, 4.0], [58500.0, 5.0], [60100.0, 5.0], [63300.0, 8.0], [61700.0, 7.0], [64900.0, 6.0], [69000.0, 5.0], [65800.0, 1.0], [72200.0, 1.0], [75400.0, 3.0], [81800.0, 4.0], [78600.0, 9.0], [85000.0, 1.0], [88200.0, 4.0], [91400.0, 2.0], [97800.0, 3.0], [94600.0, 1.0], [101000.0, 5.0], [104200.0, 5.0], [107400.0, 2.0], [113800.0, 1.0], [110600.0, 3.0], [117000.0, 2.0], [500.0, 14.0], [600.0, 25.0], [800.0, 1.0], [1100.0, 3.0], [1200.0, 9.0], [1300.0, 29.0], [1400.0, 7.0], [1500.0, 10.0], [1600.0, 13.0], [1700.0, 21.0], [1800.0, 39.0], [1900.0, 60.0], [2000.0, 39.0], [2100.0, 65.0], [2200.0, 123.0], [2300.0, 33.0], [2400.0, 58.0], [2500.0, 28.0], [2600.0, 22.0], [2800.0, 59.0], [2700.0, 62.0], [2900.0, 59.0], [3000.0, 44.0], [3100.0, 47.0], [3300.0, 51.0], [3200.0, 101.0], [3400.0, 34.0], [3500.0, 80.0], [3700.0, 51.0], [3600.0, 33.0], [3800.0, 103.0], [3900.0, 91.0], [4000.0, 51.0], [4200.0, 80.0], [68100.0, 5.0], [4600.0, 84.0], [4400.0, 61.0], [71300.0, 4.0], [4800.0, 70.0], [77700.0, 2.0], [74500.0, 1.0], [80900.0, 3.0], [5000.0, 175.0], [5200.0, 178.0], [84100.0, 8.0], [5600.0, 102.0], [87300.0, 4.0], [5400.0, 128.0], [5800.0, 51.0], [93700.0, 4.0], [90500.0, 2.0], [96900.0, 2.0], [6000.0, 48.0], [6200.0, 19.0], [100100.0, 3.0], [6600.0, 14.0], [6400.0, 34.0], [103300.0, 3.0], [6800.0, 33.0], [109700.0, 5.0], [106500.0, 3.0], [7000.0, 24.0], [112900.0, 3.0], [7200.0, 23.0], [7400.0, 55.0], [116100.0, 2.0], [7600.0, 19.0], [119300.0, 3.0], [7800.0, 37.0], [8000.0, 43.0], [8400.0, 16.0], [8800.0, 19.0], [9200.0, 33.0], [9600.0, 10.0], [10000.0, 5.0], [10400.0, 26.0], [10800.0, 33.0], [11200.0, 16.0], [11600.0, 12.0], [12000.0, 18.0], [12400.0, 14.0], [13200.0, 13.0], [12800.0, 13.0], [13600.0, 8.0], [14000.0, 4.0], [14800.0, 9.0], [14400.0, 11.0], [15200.0, 12.0], [15600.0, 14.0], [16000.0, 7.0], [16800.0, 6.0], [17600.0, 6.0], [18400.0, 6.0], [19200.0, 8.0], [20000.0, 7.0], [20800.0, 12.0], [21600.0, 9.0], [22400.0, 10.0], [23200.0, 6.0], [24000.0, 11.0], [24800.0, 9.0], [26400.0, 7.0], [25600.0, 5.0], [27200.0, 3.0], [28000.0, 4.0], [29600.0, 5.0], [28800.0, 12.0], [30400.0, 4.0], [31200.0, 5.0], [32000.0, 10.0], [33600.0, 5.0], [35200.0, 7.0], [36800.0, 11.0], [38400.0, 8.0], [40000.0, 11.0], [41600.0, 6.0], [43200.0, 4.0], [44800.0, 3.0], [46400.0, 4.0], [48000.0, 2.0], [49600.0, 2.0], [51200.0, 6.0], [52800.0, 5.0], [54400.0, 4.0], [56000.0, 4.0], [57600.0, 5.0], [59200.0, 2.0], [60800.0, 4.0], [64000.0, 5.0], [67200.0, 1.0], [70400.0, 2.0], [73600.0, 4.0], [76800.0, 2.0], [80000.0, 8.0], [83200.0, 3.0], [89600.0, 2.0], [86400.0, 1.0], [92800.0, 4.0], [96000.0, 3.0], [102400.0, 5.0], [105600.0, 1.0], [108800.0, 5.0], [112000.0, 1.0], [115200.0, 1.0], [67100.0, 3.0], [73500.0, 6.0], [70300.0, 4.0], [76700.0, 6.0], [79900.0, 8.0], [83100.0, 5.0], [86300.0, 1.0], [89500.0, 3.0], [92700.0, 6.0], [95900.0, 9.0], [102300.0, 4.0], [99100.0, 8.0], [105500.0, 3.0], [108700.0, 2.0], [111900.0, 3.0], [115100.0, 2.0], [118300.0, 3.0], [33100.0, 5.0], [34700.0, 7.0], [36300.0, 5.0], [37900.0, 6.0], [39500.0, 5.0], [42700.0, 2.0], [41100.0, 7.0], [44300.0, 7.0], [45900.0, 8.0], [47500.0, 2.0], [49100.0, 1.0], [50700.0, 6.0], [52300.0, 2.0], [53900.0, 1.0], [55500.0, 4.0], [57100.0, 2.0], [58700.0, 6.0], [60300.0, 6.0], [61900.0, 8.0], [65100.0, 3.0], [63500.0, 4.0], [66200.0, 7.0], [69400.0, 9.0], [72600.0, 2.0], [75800.0, 9.0], [79000.0, 8.0], [82200.0, 5.0], [85400.0, 5.0], [88600.0, 4.0], [91800.0, 8.0], [98200.0, 2.0], [95000.0, 6.0], [101400.0, 3.0], [104600.0, 3.0], [107800.0, 2.0], [114200.0, 2.0], [111000.0, 3.0], [117400.0, 1.0], [68500.0, 3.0], [71700.0, 6.0], [74900.0, 7.0], [78100.0, 5.0], [81300.0, 5.0], [84500.0, 3.0], [87700.0, 5.0], [94100.0, 8.0], [90900.0, 5.0], [100500.0, 1.0], [103700.0, 2.0], [110100.0, 4.0], [106900.0, 2.0], [113300.0, 4.0], [116500.0, 3.0], [119700.0, 1.0], [16900.0, 5.0], [17700.0, 8.0], [19300.0, 7.0], [18500.0, 8.0], [20100.0, 8.0], [20900.0, 9.0], [21700.0, 10.0], [22500.0, 5.0], [23300.0, 10.0], [24100.0, 5.0], [24900.0, 13.0], [25700.0, 11.0], [26500.0, 11.0], [27300.0, 4.0], [28100.0, 5.0], [28900.0, 5.0], [30500.0, 11.0], [29700.0, 1.0], [31300.0, 3.0], [32100.0, 8.0], [33800.0, 5.0], [35400.0, 7.0], [38600.0, 9.0], [37000.0, 4.0], [40200.0, 6.0], [41800.0, 6.0], [45000.0, 12.0], [43400.0, 4.0], [46600.0, 3.0], [48200.0, 5.0], [49800.0, 3.0], [53000.0, 5.0], [51400.0, 6.0], [54600.0, 5.0], [56200.0, 4.0], [57800.0, 7.0], [61000.0, 6.0], [59400.0, 1.0], [62600.0, 3.0], [64200.0, 3.0], [67600.0, 5.0], [70800.0, 4.0], [77200.0, 6.0], [74000.0, 5.0], [80400.0, 2.0], [83600.0, 4.0], [90000.0, 3.0], [86800.0, 5.0], [93200.0, 5.0], [96400.0, 3.0], [99600.0, 2.0], [102800.0, 1.0], [106000.0, 1.0], [112400.0, 2.0], [118800.0, 1.0], [67500.0, 2.0], [70700.0, 2.0], [73900.0, 7.0], [77100.0, 2.0], [80300.0, 4.0], [83500.0, 4.0], [86700.0, 7.0], [89900.0, 5.0], [93100.0, 4.0], [96300.0, 3.0], [99500.0, 4.0], [102700.0, 2.0], [105900.0, 1.0], [109100.0, 2.0], [112300.0, 2.0], [115500.0, 4.0], [33300.0, 6.0], [36500.0, 10.0], [34900.0, 8.0], [38100.0, 6.0], [39700.0, 5.0], [41300.0, 7.0], [42900.0, 3.0], [44500.0, 7.0], [46100.0, 4.0], [47700.0, 7.0], [50900.0, 8.0], [49300.0, 5.0], [52500.0, 8.0], [54100.0, 2.0], [55700.0, 3.0], [57300.0, 2.0], [58900.0, 10.0], [60500.0, 4.0], [62100.0, 4.0], [63700.0, 4.0], [65300.0, 2.0], [66600.0, 2.0], [69800.0, 2.0], [73000.0, 7.0], [76200.0, 1.0], [79400.0, 3.0], [85800.0, 2.0], [82600.0, 1.0], [89000.0, 3.0], [92200.0, 7.0], [95400.0, 5.0], [98600.0, 6.0], [101800.0, 1.0], [105000.0, 2.0], [108200.0, 3.0], [65700.0, 6.0], [68900.0, 6.0], [72100.0, 8.0], [75300.0, 4.0], [78500.0, 5.0], [81700.0, 6.0], [84900.0, 1.0], [88100.0, 4.0], [91300.0, 7.0], [94500.0, 5.0], [97700.0, 3.0], [100900.0, 6.0], [104100.0, 3.0], [110500.0, 2.0], [107300.0, 1.0], [113700.0, 3.0], [116900.0, 2.0], [8500.0, 6.0], [8900.0, 20.0], [9300.0, 38.0], [9700.0, 31.0], [10100.0, 15.0], [10500.0, 9.0], [10900.0, 12.0], [11300.0, 9.0], [11700.0, 24.0], [12100.0, 13.0], [12500.0, 11.0], [13300.0, 11.0], [12900.0, 11.0], [13700.0, 8.0], [14100.0, 15.0], [14500.0, 8.0], [14900.0, 8.0], [15300.0, 8.0], [15700.0, 10.0], [16100.0, 10.0], [17000.0, 6.0], [17800.0, 10.0], [18600.0, 6.0], [19400.0, 8.0], [20200.0, 7.0], [21000.0, 13.0], [21800.0, 5.0], [22600.0, 11.0], [23400.0, 12.0], [24200.0, 9.0], [25000.0, 9.0], [25800.0, 11.0], [26600.0, 6.0], [27400.0, 8.0], [28200.0, 10.0], [29000.0, 6.0], [30600.0, 7.0], [29800.0, 11.0], [31400.0, 4.0], [32200.0, 10.0], [34000.0, 9.0], [35600.0, 6.0], [38800.0, 7.0], [37200.0, 7.0], [40400.0, 8.0], [42000.0, 4.0], [43600.0, 7.0], [46800.0, 8.0], [45200.0, 4.0], [48400.0, 3.0], [50000.0, 6.0], [51600.0, 6.0], [53200.0, 5.0], [54800.0, 7.0], [56400.0, 6.0], [58000.0, 2.0], [59600.0, 3.0], [61200.0, 4.0], [62800.0, 5.0], [64400.0, 4.0], [68000.0, 5.0], [71200.0, 4.0], [74400.0, 4.0], [80800.0, 4.0], [84000.0, 5.0], [87200.0, 4.0], [93600.0, 3.0], [90400.0, 4.0], [96800.0, 2.0], [100000.0, 3.0], [103200.0, 1.0], [106400.0, 2.0], [109600.0, 2.0], [112800.0, 2.0], [116000.0, 2.0], [67900.0, 1.0], [71100.0, 3.0], [77500.0, 6.0], [74300.0, 6.0], [80700.0, 5.0], [83900.0, 2.0], [87100.0, 7.0], [93500.0, 2.0], [96700.0, 2.0], [99900.0, 3.0], [106300.0, 2.0], [103100.0, 1.0], [109500.0, 1.0], [112700.0, 1.0], [115900.0, 3.0], [119100.0, 3.0], [33500.0, 5.0], [35100.0, 5.0], [36700.0, 14.0], [38300.0, 13.0], [39900.0, 11.0], [41500.0, 6.0], [43100.0, 5.0], [44700.0, 5.0], [46300.0, 9.0], [47900.0, 5.0], [49500.0, 5.0], [51100.0, 3.0], [52700.0, 5.0], [54300.0, 5.0], [55900.0, 9.0], [59100.0, 5.0], [57500.0, 3.0], [60700.0, 4.0], [62300.0, 5.0], [63900.0, 4.0], [65500.0, 7.0], [67000.0, 5.0], [73400.0, 4.0], [70200.0, 3.0], [76600.0, 6.0], [79800.0, 2.0], [83000.0, 7.0], [89400.0, 3.0], [86200.0, 2.0], [92600.0, 3.0], [95800.0, 3.0], [102200.0, 4.0], [105400.0, 2.0], [111800.0, 2.0], [118200.0, 3.0], [69300.0, 10.0], [66100.0, 10.0], [72500.0, 6.0], [75700.0, 6.0], [78900.0, 5.0], [82100.0, 6.0], [85300.0, 2.0], [88500.0, 3.0], [91700.0, 1.0], [94900.0, 2.0], [98100.0, 4.0], [101300.0, 6.0], [104500.0, 4.0], [107700.0, 3.0], [110900.0, 2.0], [117300.0, 1.0], [17100.0, 8.0], [17900.0, 11.0], [18700.0, 11.0], [20300.0, 5.0], [19500.0, 5.0], [21100.0, 11.0], [21900.0, 4.0], [22700.0, 5.0], [23500.0, 5.0], [24300.0, 7.0], [25100.0, 9.0], [25900.0, 4.0], [26700.0, 3.0], [27500.0, 3.0], [28300.0, 9.0], [29100.0, 4.0], [30700.0, 10.0], [29900.0, 12.0], [31500.0, 5.0], [32300.0, 3.0], [34200.0, 8.0], [35800.0, 3.0], [37400.0, 6.0], [39000.0, 11.0], [40600.0, 4.0], [42200.0, 2.0], [43800.0, 8.0], [47000.0, 7.0], [45400.0, 2.0], [48600.0, 2.0], [50200.0, 8.0], [51800.0, 5.0], [55000.0, 6.0], [53400.0, 3.0], [56600.0, 4.0], [58200.0, 3.0], [61400.0, 3.0], [59800.0, 4.0], [63000.0, 5.0], [64600.0, 4.0], [68400.0, 5.0], [71600.0, 2.0], [74800.0, 6.0], [78000.0, 3.0], [81200.0, 3.0], [84400.0, 10.0], [87600.0, 4.0], [90800.0, 6.0], [94000.0, 1.0], [97200.0, 3.0], [100400.0, 4.0], [103600.0, 1.0], [106800.0, 4.0], [110000.0, 3.0], [113200.0, 2.0], [116400.0, 6.0], [119600.0, 2.0], [68300.0, 5.0], [71500.0, 5.0], [74700.0, 6.0], [77900.0, 5.0], [81100.0, 6.0], [84300.0, 6.0], [87500.0, 4.0], [90700.0, 6.0], [93900.0, 5.0], [97100.0, 3.0], [103500.0, 3.0], [109900.0, 2.0], [106700.0, 1.0], [113100.0, 2.0], [116300.0, 5.0], [119500.0, 1.0], [33700.0, 5.0], [35300.0, 8.0], [36900.0, 7.0], [38500.0, 4.0], [40100.0, 13.0], [41700.0, 3.0], [43300.0, 8.0], [44900.0, 8.0], [46500.0, 9.0], [48100.0, 6.0], [49700.0, 4.0], [52900.0, 9.0], [51300.0, 6.0], [54500.0, 7.0], [56100.0, 5.0], [59300.0, 3.0], [57700.0, 3.0], [60900.0, 5.0], [62500.0, 7.0], [64100.0, 12.0], [67400.0, 2.0], [70600.0, 2.0], [77000.0, 6.0], [73800.0, 5.0], [80200.0, 2.0], [83400.0, 4.0], [86600.0, 8.0], [89800.0, 1.0], [93000.0, 3.0], [96200.0, 3.0], [99400.0, 2.0], [105800.0, 2.0], [102600.0, 3.0], [109000.0, 3.0], [112200.0, 2.0], [118600.0, 3.0], [115400.0, 2.0], [4300.0, 112.0], [66500.0, 4.0], [4100.0, 116.0], [4500.0, 91.0], [69700.0, 5.0], [72900.0, 3.0], [4700.0, 77.0], [76100.0, 2.0], [4900.0, 84.0], [5100.0, 136.0], [79300.0, 4.0], [82500.0, 2.0], [85700.0, 4.0], [5300.0, 126.0], [5500.0, 83.0], [88900.0, 4.0], [5700.0, 66.0], [92100.0, 6.0], [5900.0, 25.0], [6100.0, 23.0], [95300.0, 5.0], [6300.0, 34.0], [98500.0, 2.0], [101700.0, 1.0], [6500.0, 31.0], [104900.0, 4.0], [6700.0, 52.0], [6900.0, 18.0], [108100.0, 5.0], [7100.0, 22.0], [111300.0, 1.0], [114500.0, 2.0], [7300.0, 13.0], [117700.0, 3.0], [7500.0, 67.0], [7700.0, 22.0], [7900.0, 15.0], [8100.0, 12.0], [8600.0, 22.0], [8200.0, 15.0], [9000.0, 19.0], [9400.0, 96.0], [9800.0, 19.0], [10200.0, 16.0], [10600.0, 23.0], [11000.0, 8.0], [11400.0, 9.0], [12200.0, 15.0], [11800.0, 18.0], [12600.0, 16.0], [13000.0, 12.0], [13800.0, 13.0], [13400.0, 13.0], [14200.0, 8.0], [14600.0, 12.0], [15000.0, 13.0], [15800.0, 8.0], [15400.0, 7.0], [16200.0, 16.0], [17200.0, 6.0], [16400.0, 8.0], [18000.0, 8.0], [18800.0, 5.0], [19600.0, 5.0], [20400.0, 4.0], [21200.0, 8.0], [22000.0, 7.0], [22800.0, 9.0], [23600.0, 7.0], [24400.0, 5.0], [25200.0, 7.0], [26000.0, 5.0], [26800.0, 6.0], [27600.0, 7.0], [28400.0, 12.0], [29200.0, 10.0], [30000.0, 10.0], [31600.0, 2.0], [30800.0, 7.0], [32400.0, 8.0], [32800.0, 5.0], [34400.0, 4.0], [36000.0, 2.0], [37600.0, 5.0], [39200.0, 9.0], [40800.0, 5.0], [42400.0, 3.0], [44000.0, 8.0], [45600.0, 6.0], [47200.0, 8.0], [48800.0, 2.0], [50400.0, 5.0], [52000.0, 2.0], [53600.0, 8.0], [55200.0, 4.0], [56800.0, 3.0], [58400.0, 5.0], [60000.0, 4.0], [63200.0, 4.0], [61600.0, 2.0], [64800.0, 6.0], [68800.0, 7.0], [65600.0, 5.0], [72000.0, 4.0], [75200.0, 4.0], [78400.0, 6.0], [81600.0, 1.0], [84800.0, 4.0], [88000.0, 5.0], [97600.0, 1.0], [94400.0, 4.0], [100800.0, 3.0], [104000.0, 3.0], [110400.0, 4.0], [113600.0, 4.0], [116800.0, 5.0], [120000.0, 576.0], [68700.0, 2.0], [71900.0, 5.0], [75100.0, 4.0], [81500.0, 5.0], [78300.0, 5.0], [84700.0, 3.0], [87900.0, 4.0], [91100.0, 6.0], [97500.0, 3.0], [94300.0, 2.0], [100700.0, 5.0], [103900.0, 3.0], [110300.0, 1.0], [113500.0, 1.0], [116700.0, 1.0], [119900.0, 3.0], [33900.0, 7.0], [35500.0, 4.0], [38700.0, 10.0], [37100.0, 9.0], [40300.0, 7.0], [41900.0, 5.0], [43500.0, 2.0], [45100.0, 7.0], [46700.0, 6.0], [48300.0, 4.0], [49900.0, 2.0], [53100.0, 8.0], [51500.0, 6.0], [54700.0, 4.0], [56300.0, 9.0], [57900.0, 5.0], [61100.0, 6.0], [59500.0, 4.0], [62700.0, 3.0], [64300.0, 5.0], [67800.0, 4.0], [71000.0, 5.0], [74200.0, 5.0], [77400.0, 6.0], [80600.0, 7.0], [83800.0, 4.0], [87000.0, 2.0], [93400.0, 4.0], [90200.0, 6.0], [96600.0, 3.0], [99800.0, 5.0], [103000.0, 3.0], [106200.0, 1.0], [109400.0, 3.0], [112600.0, 1.0], [115800.0, 1.0], [119000.0, 3.0], [66900.0, 3.0], [73300.0, 3.0], [70100.0, 6.0], [76500.0, 8.0], [82900.0, 8.0], [86100.0, 6.0], [89300.0, 3.0], [92500.0, 1.0], [95700.0, 4.0], [102100.0, 4.0], [98900.0, 4.0], [105300.0, 3.0], [111700.0, 4.0], [118100.0, 1.0], [114900.0, 1.0], [17300.0, 9.0], [16500.0, 11.0], [18100.0, 8.0], [18900.0, 5.0], [19700.0, 6.0], [20500.0, 9.0], [21300.0, 5.0], [22100.0, 4.0], [22900.0, 4.0], [23700.0, 8.0], [24500.0, 5.0], [25300.0, 4.0], [26100.0, 7.0], [26900.0, 8.0], [28500.0, 8.0], [27700.0, 6.0], [29300.0, 6.0], [30100.0, 3.0], [31700.0, 5.0], [30900.0, 9.0], [32500.0, 5.0], [34600.0, 9.0], [33000.0, 5.0], [36200.0, 11.0], [37800.0, 9.0], [39400.0, 8.0], [41000.0, 3.0], [42600.0, 4.0], [44200.0, 5.0], [45800.0, 7.0], [49000.0, 10.0], [47400.0, 1.0], [50600.0, 1.0], [52200.0, 4.0], [53800.0, 6.0], [55400.0, 3.0], [57000.0, 4.0], [58600.0, 3.0], [60200.0, 3.0], [61800.0, 8.0], [63400.0, 3.0], [65000.0, 5.0], [69200.0, 3.0], [66000.0, 7.0], [72400.0, 2.0], [75600.0, 2.0], [78800.0, 2.0], [85200.0, 10.0], [82000.0, 6.0], [91600.0, 5.0], [94800.0, 3.0], [101200.0, 2.0], [110800.0, 4.0], [114000.0, 1.0], [117200.0, 4.0], [65900.0, 4.0], [69100.0, 2.0], [72300.0, 6.0], [75500.0, 4.0], [78700.0, 4.0], [81900.0, 2.0], [85100.0, 4.0], [88300.0, 3.0], [91500.0, 5.0], [97900.0, 3.0], [94700.0, 2.0], [101100.0, 1.0], [104300.0, 4.0], [107500.0, 3.0], [110700.0, 3.0], [117100.0, 4.0], [34100.0, 6.0], [35700.0, 3.0], [38900.0, 10.0], [37300.0, 8.0], [40500.0, 13.0], [42100.0, 9.0], [43700.0, 5.0], [45300.0, 5.0], [46900.0, 3.0], [48500.0, 5.0], [50100.0, 6.0], [51700.0, 3.0], [53300.0, 4.0], [54900.0, 5.0], [56500.0, 1.0], [58100.0, 7.0], [61300.0, 3.0], [59700.0, 7.0], [62900.0, 6.0], [64500.0, 5.0], [68200.0, 3.0], [71400.0, 11.0], [74600.0, 6.0], [77800.0, 3.0], [81000.0, 5.0], [84200.0, 3.0], [87400.0, 4.0], [93800.0, 3.0], [97000.0, 3.0], [100200.0, 5.0], [103400.0, 2.0], [106600.0, 3.0], [113000.0, 1.0], [116200.0, 1.0], [119400.0, 3.0], [67300.0, 6.0], [70500.0, 7.0], [73700.0, 8.0], [76900.0, 4.0], [80100.0, 3.0], [83300.0, 5.0], [89700.0, 1.0], [86500.0, 7.0], [92900.0, 5.0], [96100.0, 5.0], [99300.0, 3.0], [102500.0, 5.0], [105700.0, 4.0], [108900.0, 2.0], [112100.0, 3.0], [118500.0, 4.0], [115300.0, 3.0], [8300.0, 13.0], [8700.0, 30.0], [9100.0, 29.0], [9500.0, 37.0], [9900.0, 8.0], [10300.0, 16.0], [10700.0, 20.0], [11100.0, 12.0], [11500.0, 18.0], [11900.0, 6.0], [12700.0, 11.0], [12300.0, 12.0], [13100.0, 16.0], [13500.0, 10.0], [14300.0, 11.0], [13900.0, 15.0], [14700.0, 13.0], [15100.0, 8.0], [15500.0, 16.0], [15900.0, 8.0], [16300.0, 11.0], [17400.0, 9.0], [16600.0, 7.0], [18200.0, 10.0], [19000.0, 7.0], [19800.0, 10.0], [20600.0, 13.0], [21400.0, 9.0], [22200.0, 8.0], [23000.0, 9.0], [23800.0, 10.0], [24600.0, 9.0], [25400.0, 4.0], [26200.0, 6.0], [27000.0, 5.0], [28600.0, 8.0], [27800.0, 3.0], [29400.0, 4.0], [30200.0, 8.0], [31000.0, 4.0], [31800.0, 7.0], [32600.0, 6.0], [33200.0, 9.0], [34800.0, 3.0], [36400.0, 12.0], [38000.0, 8.0], [39600.0, 9.0], [41200.0, 6.0], [42800.0, 5.0], [44400.0, 7.0], [46000.0, 4.0], [47600.0, 3.0], [50800.0, 7.0], [49200.0, 6.0], [52400.0, 2.0], [54000.0, 6.0], [55600.0, 6.0], [57200.0, 8.0], [58800.0, 4.0], [60400.0, 5.0], [62000.0, 4.0], [65200.0, 4.0], [63600.0, 3.0], [66400.0, 4.0], [69600.0, 6.0], [72800.0, 11.0], [76000.0, 4.0], [79200.0, 1.0], [85600.0, 4.0], [82400.0, 1.0], [88800.0, 3.0], [92000.0, 3.0], [95200.0, 3.0], [98400.0, 1.0], [101600.0, 5.0], [104800.0, 3.0], [108000.0, 2.0], [114400.0, 2.0], [111200.0, 2.0], [117600.0, 2.0], [66300.0, 6.0], [69500.0, 5.0], [72700.0, 6.0], [75900.0, 4.0], [79100.0, 3.0], [85500.0, 4.0], [82300.0, 4.0], [88700.0, 2.0], [91900.0, 5.0], [98300.0, 5.0], [95100.0, 4.0], [101500.0, 1.0], [107900.0, 1.0], [111100.0, 2.0], [117500.0, 2.0], [34300.0, 6.0], [35900.0, 10.0], [37500.0, 6.0], [39100.0, 13.0], [40700.0, 8.0], [42300.0, 4.0], [43900.0, 8.0], [45500.0, 8.0], [47100.0, 1.0], [48700.0, 8.0], [50300.0, 4.0], [51900.0, 6.0], [55100.0, 2.0], [53500.0, 6.0], [56700.0, 6.0], [58300.0, 10.0], [59900.0, 5.0], [61500.0, 6.0], [63100.0, 3.0], [64700.0, 7.0], [68600.0, 5.0], [71800.0, 3.0], [75000.0, 4.0], [78200.0, 4.0], [81400.0, 2.0], [84600.0, 5.0], [87800.0, 4.0], [94200.0, 1.0], [91000.0, 1.0], [100600.0, 3.0], [103800.0, 1.0], [110200.0, 1.0], [107000.0, 2.0], [113400.0, 4.0], [116600.0, 3.0], [119800.0, 1.0], [67700.0, 8.0], [70900.0, 11.0], [77300.0, 9.0], [74100.0, 6.0], [80500.0, 7.0], [83700.0, 2.0], [90100.0, 3.0], [86900.0, 2.0], [93300.0, 3.0], [96500.0, 6.0], [99700.0, 2.0], [102900.0, 1.0], [109300.0, 3.0], [112500.0, 1.0], [118900.0, 1.0], [16700.0, 8.0], [17500.0, 7.0], [18300.0, 12.0], [19100.0, 8.0], [19900.0, 4.0], [20700.0, 13.0], [21500.0, 7.0], [22300.0, 8.0], [23100.0, 7.0], [23900.0, 9.0], [24700.0, 6.0], [25500.0, 5.0], [26300.0, 7.0], [27100.0, 6.0], [27900.0, 4.0], [28700.0, 3.0], [29500.0, 6.0], [30300.0, 3.0], [31100.0, 7.0], [32700.0, 3.0], [31900.0, 5.0], [33400.0, 7.0], [35000.0, 4.0], [36600.0, 10.0], [38200.0, 8.0], [39800.0, 2.0], [43000.0, 9.0], [41400.0, 4.0], [44600.0, 6.0], [46200.0, 9.0], [47800.0, 9.0], [51000.0, 6.0], [49400.0, 6.0], [52600.0, 4.0], [54200.0, 3.0], [55800.0, 1.0], [57400.0, 10.0], [59000.0, 4.0], [60600.0, 6.0], [62200.0, 11.0], [63800.0, 6.0], [65400.0, 7.0], [66800.0, 6.0], [70000.0, 4.0], [73200.0, 4.0], [76400.0, 4.0], [79600.0, 2.0], [82800.0, 5.0], [86000.0, 1.0], [89200.0, 6.0], [92400.0, 3.0], [95600.0, 2.0], [102000.0, 4.0], [98800.0, 3.0], [105200.0, 4.0], [108400.0, 1.0], [111600.0, 1.0], [114800.0, 1.0]], "isOverall": false, "label": "HTTP\u8BF7\u6C42", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 120000.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 9977.0, "series": [{"data": [[0.0, 1.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 88.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 9977.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [[3.0, 576.0]], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 3.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 34.51470588235294, "minX": 1.64084772E12, "maxY": 939.3917525773195, "series": [{"data": [[1.6408482E12, 836.6602564102568], [1.6408479E12, 341.83260869565214], [1.64084784E12, 249.77365491651204], [1.64084796E12, 454.3214285714287], [1.64084826E12, 939.3917525773195], [1.64084772E12, 100.0], [1.64084838E12, 379.0611916264092], [1.64084832E12, 929.259044862518], [1.64084802E12, 538.9758620689655], [1.64084844E12, 34.51470588235294], [1.64084814E12, 747.4751633986939], [1.64084808E12, 649.5814977973567], [1.64084778E12, 147.0903846153846]], "isOverall": false, "label": "jp@gc - Ultimate Thread Group", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.64084844E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 2097.0, "minX": 1.0, "maxY": 120055.0, "series": [{"data": [[2.0, 97551.0], [3.0, 92902.0], [4.0, 116841.0], [5.0, 91398.0], [6.0, 108883.0], [7.0, 102447.0], [8.0, 97147.0], [9.0, 120009.0], [10.0, 116283.0], [11.0, 115347.0], [12.0, 116836.0], [13.0, 109720.0], [14.0, 100196.0], [15.0, 108787.0], [16.0, 88589.0], [17.0, 90834.0], [18.0, 105256.0], [19.0, 87595.0], [20.0, 110755.0], [21.0, 120014.0], [22.0, 120014.0], [23.0, 99799.0], [24.0, 112931.0], [25.0, 119160.0], [26.0, 118658.0], [27.0, 106987.0], [28.0, 110369.0], [29.0, 90967.0], [30.0, 88922.0], [31.0, 95534.0], [33.0, 97769.0], [32.0, 91406.0], [35.0, 109518.0], [34.0, 91153.0], [37.0, 102528.0], [36.0, 93653.0], [39.0, 109720.0], [38.0, 88963.0], [41.0, 100062.0], [40.0, 108434.0], [43.0, 89814.0], [42.0, 89352.0], [45.0, 116398.0], [44.0, 107844.0], [47.0, 117159.0], [46.0, 113146.0], [49.0, 92154.0], [48.0, 84621.0], [51.0, 120018.0], [50.0, 108033.0], [53.0, 95553.0], [52.0, 105384.0], [55.0, 98174.0], [57.0, 103146.0], [56.0, 96141.0], [59.0, 83495.0], [58.0, 84338.0], [61.0, 87404.0], [60.0, 83319.0], [63.0, 113747.0], [62.0, 114542.0], [67.0, 103611.0], [66.0, 98821.0], [65.0, 94586.0], [64.0, 90050.0], [71.0, 96565.0], [70.0, 95235.0], [69.0, 95905.0], [68.0, 104368.0], [75.0, 94866.0], [74.0, 92722.0], [73.0, 112371.0], [72.0, 89180.0], [79.0, 103544.0], [78.0, 92462.0], [77.0, 111837.0], [76.0, 84224.0], [83.0, 120012.0], [82.0, 102524.0], [81.0, 107743.0], [80.0, 110833.0], [87.0, 92704.0], [86.0, 120013.0], [85.0, 91959.0], [84.0, 101364.0], [91.0, 96614.0], [90.0, 120013.0], [89.0, 120013.0], [88.0, 119428.0], [95.0, 82800.0], [94.0, 101099.0], [93.0, 111000.0], [92.0, 91439.0], [99.0, 105844.0], [98.0, 100717.0], [97.0, 105992.0], [96.0, 85250.0], [100.0, 10546.531872509957], [103.0, 93994.0], [102.0, 120016.0], [107.0, 94316.0], [106.0, 101757.0], [105.0, 89698.0], [104.0, 110678.0], [111.0, 120014.0], [110.0, 120013.0], [109.0, 120011.0], [108.0, 92783.0], [115.0, 120010.0], [114.0, 93708.0], [113.0, 120010.0], [112.0, 84644.0], [119.0, 84197.0], [118.0, 120010.0], [117.0, 84385.0], [116.0, 120011.0], [123.0, 114968.0], [122.0, 89430.0], [121.0, 120011.0], [120.0, 87845.0], [127.0, 76732.0], [126.0, 105795.0], [125.0, 120012.0], [135.0, 120013.0], [134.0, 96362.0], [133.0, 82109.0], [132.0, 110139.0], [131.0, 118161.0], [129.0, 101859.5], [143.0, 120013.0], [142.0, 105775.0], [141.0, 120011.0], [140.0, 80712.0], [139.0, 99534.0], [138.0, 120015.0], [137.0, 120011.0], [136.0, 120010.0], [151.0, 80748.0], [150.0, 120014.0], [149.0, 109374.0], [148.0, 96832.0], [147.0, 120012.0], [146.0, 85119.0], [145.0, 120010.0], [144.0, 120009.0], [159.0, 114048.0], [158.0, 78651.0], [157.0, 86603.0], [156.0, 76309.0], [155.0, 88018.0], [154.0, 96049.0], [153.0, 93988.0], [152.0, 95903.0], [167.0, 91347.0], [166.0, 106694.0], [165.0, 82898.0], [164.0, 89279.0], [163.0, 89084.0], [162.0, 87348.0], [161.0, 117384.0], [160.0, 76498.0], [175.0, 112431.0], [174.0, 86502.0], [173.0, 120010.0], [172.0, 120010.0], [171.0, 120013.0], [170.0, 89320.0], [169.0, 71931.0], [168.0, 120014.0], [183.0, 91920.0], [182.0, 84411.0], [181.0, 72878.0], [180.0, 75890.0], [179.0, 99335.0], [178.0, 118276.0], [177.0, 120010.0], [176.0, 87326.0], [187.0, 42326.5], [191.0, 120019.0], [190.0, 117131.0], [189.0, 94750.0], [188.0, 120012.0], [186.0, 120013.0], [185.0, 105030.0], [184.0, 116400.0], [199.0, 95234.0], [198.0, 91675.0], [197.0, 90845.0], [196.0, 91162.0], [195.0, 102030.0], [194.0, 90734.0], [193.0, 82061.0], [192.0, 71723.0], [200.0, 19243.887378640797], [207.0, 100859.0], [205.0, 80001.0], [204.0, 88187.0], [203.0, 115205.0], [202.0, 94302.0], [201.0, 118510.0], [215.0, 85762.0], [214.0, 120014.0], [213.0, 102138.0], [211.0, 82549.0], [210.0, 119038.0], [209.0, 116427.0], [208.0, 90225.0], [222.0, 84447.0], [221.0, 117201.0], [220.0, 80418.0], [219.0, 86666.0], [216.0, 79897.0], [228.0, 56495.0], [231.0, 108296.0], [230.0, 81790.0], [229.0, 82222.0], [227.0, 108317.0], [226.0, 111804.0], [225.0, 120013.0], [224.0, 120020.0], [239.0, 100264.0], [238.0, 86185.0], [237.0, 119445.0], [236.0, 87758.0], [235.0, 66152.0], [234.0, 120012.0], [233.0, 77501.0], [232.0, 87535.0], [247.0, 88140.0], [246.0, 97559.0], [245.0, 91312.0], [244.0, 120010.0], [243.0, 102286.0], [242.0, 87941.0], [241.0, 88068.0], [240.0, 120009.0], [255.0, 120015.0], [254.0, 120015.0], [253.0, 99314.0], [252.0, 108582.0], [250.0, 110738.0], [249.0, 83586.0], [248.0, 78376.0], [270.0, 73978.0], [271.0, 79059.0], [269.0, 94442.0], [268.0, 77349.0], [267.0, 120014.0], [266.0, 74055.0], [265.0, 63569.0], [264.0, 89972.0], [263.0, 102609.0], [257.0, 109492.0], [256.0, 75799.0], [259.0, 79926.0], [258.0, 84778.0], [261.0, 120015.0], [260.0, 120013.0], [286.0, 80197.0], [287.0, 82895.0], [285.0, 120015.0], [284.0, 113404.0], [283.0, 92666.0], [282.0, 80792.0], [281.0, 85147.0], [280.0, 89189.0], [279.0, 73714.0], [273.0, 78362.0], [272.0, 109038.0], [275.0, 120013.0], [274.0, 78418.0], [278.0, 84035.0], [277.0, 120013.0], [276.0, 94539.0], [302.0, 110474.0], [300.0, 26816.79999999999], [303.0, 102615.0], [301.0, 93525.0], [299.0, 120010.0], [298.0, 86814.0], [297.0, 64922.0], [296.0, 103218.5], [294.0, 120012.0], [291.0, 120013.0], [290.0, 120012.0], [289.0, 120014.0], [288.0, 75612.0], [293.0, 105915.0], [318.0, 107049.0], [309.0, 58577.0], [308.0, 120012.0], [311.0, 79256.0], [305.0, 90214.0], [304.0, 119813.0], [307.0, 120016.0], [306.0, 111245.0], [319.0, 114431.0], [317.0, 78131.0], [316.0, 120010.0], [315.0, 65276.0], [314.0, 77366.0], [313.0, 120015.0], [312.0, 98619.0], [333.0, 83853.0], [329.0, 40276.66666666667], [330.0, 65746.5], [335.0, 120027.0], [332.0, 101024.0], [323.0, 85186.0], [322.0, 106092.0], [321.0, 73786.0], [320.0, 93209.0], [331.0, 120024.0], [328.0, 120009.0], [327.0, 79321.0], [326.0, 55922.0], [325.0, 120012.0], [324.0, 120011.0], [350.0, 55404.5], [347.0, 73191.0], [348.0, 54152.0], [351.0, 58853.0], [349.0, 78194.0], [346.0, 120015.0], [345.0, 120013.0], [344.0, 120016.0], [343.0, 71422.0], [337.0, 120012.0], [336.0, 90167.0], [339.0, 120013.0], [338.0, 101493.0], [341.0, 99166.0], [340.0, 120010.0], [366.0, 113415.0], [367.0, 89264.0], [365.0, 53115.0], [364.0, 115572.0], [363.0, 103943.0], [362.0, 108234.0], [361.0, 90453.0], [360.0, 120016.0], [359.0, 120012.0], [352.0, 89229.0], [355.0, 107964.0], [353.0, 120012.0], [358.0, 120017.0], [356.0, 120017.0], [382.0, 120014.0], [368.0, 65399.0], [369.0, 120011.0], [371.0, 120009.0], [370.0, 120013.0], [375.0, 120012.0], [374.0, 120013.0], [373.0, 120012.0], [372.0, 120013.0], [383.0, 120011.0], [381.0, 120013.0], [380.0, 116122.0], [379.0, 120015.0], [378.0, 120010.0], [377.0, 120012.0], [376.0, 120013.0], [398.0, 120011.0], [388.0, 83651.5], [389.0, 57724.5], [399.0, 73730.5], [397.0, 120009.0], [396.0, 115571.0], [391.0, 120011.0], [387.0, 120011.0], [386.0, 120011.0], [385.0, 120012.0], [384.0, 120013.0], [390.0, 120012.0], [395.0, 120014.0], [394.0, 120016.0], [393.0, 101705.0], [414.0, 61418.0], [400.0, 40719.34615384617], [401.0, 115396.0], [403.0, 63777.0], [402.0, 63015.0], [407.0, 77040.0], [406.0, 120013.0], [405.0, 71445.0], [404.0, 57756.0], [415.0, 72518.0], [413.0, 120013.0], [412.0, 119748.0], [411.0, 93272.0], [410.0, 62287.0], [409.0, 63809.0], [408.0, 120012.0], [430.0, 120016.0], [420.0, 60181.0], [421.0, 85831.0], [423.0, 74967.0], [417.0, 54739.0], [416.0, 86974.0], [419.0, 118319.0], [418.0, 57249.0], [422.0, 89201.0], [431.0, 120019.0], [429.0, 118511.0], [428.0, 82401.0], [427.0, 101326.0], [426.0, 53539.0], [425.0, 120013.0], [424.0, 62045.0], [446.0, 115323.0], [447.0, 93472.0], [445.0, 60991.0], [444.0, 65717.0], [443.0, 59054.0], [442.0, 120017.0], [441.0, 120014.0], [440.0, 62259.0], [439.0, 116712.0], [433.0, 117668.0], [432.0, 82956.0], [435.0, 112382.0], [434.0, 101327.0], [438.0, 120011.0], [437.0, 104221.0], [436.0, 92769.0], [462.0, 93406.0], [463.0, 120015.0], [461.0, 54632.0], [460.0, 70791.5], [458.0, 62562.0], [457.0, 69159.0], [456.0, 113007.0], [455.0, 120015.0], [448.0, 79474.0], [451.0, 58688.0], [450.0, 115654.5], [454.0, 120012.0], [453.0, 92286.0], [452.0, 65643.0], [478.0, 56505.0], [479.0, 120012.0], [477.0, 109306.0], [476.0, 111903.0], [475.0, 94189.0], [474.0, 96195.0], [473.0, 115904.0], [472.0, 112963.0], [470.0, 100401.0], [465.0, 119413.0], [464.0, 114816.0], [467.0, 62775.0], [466.0, 120030.0], [469.0, 120013.0], [468.0, 120013.0], [494.0, 117550.0], [495.0, 118590.0], [493.0, 120013.0], [492.0, 110810.0], [491.0, 120011.0], [490.0, 120011.0], [489.0, 120013.0], [488.0, 82294.0], [487.0, 117488.0], [481.0, 112109.0], [480.0, 114270.0], [483.0, 120013.0], [482.0, 111972.0], [486.0, 108200.0], [485.0, 65462.0], [484.0, 77592.0], [510.0, 64161.0], [500.0, 41793.30699088141], [501.0, 120021.0], [503.0, 120017.0], [496.0, 69989.0], [498.0, 76612.0], [497.0, 110904.0], [502.0, 120022.0], [511.0, 120011.0], [509.0, 120014.0], [508.0, 120012.0], [507.0, 79512.0], [506.0, 67005.0], [505.0, 98611.0], [504.0, 120013.0], [539.0, 120010.0], [519.0, 63758.5], [527.0, 105509.0], [512.0, 87813.0], [514.0, 118245.0], [513.0, 67591.0], [516.0, 120013.0], [515.0, 120013.0], [518.0, 64806.0], [517.0, 120014.0], [526.0, 95307.0], [525.0, 120012.0], [524.0, 120012.0], [523.0, 120017.0], [522.0, 120032.0], [521.0, 64116.0], [520.0, 59795.0], [542.0, 112090.0], [529.0, 79071.0], [528.0, 120011.0], [531.0, 60172.0], [530.0, 87882.0], [533.0, 110464.0], [532.0, 120013.0], [541.0, 111000.0], [540.0, 60808.0], [538.0, 95077.0], [537.0, 120010.0], [536.0, 86199.0], [535.0, 100004.0], [534.0, 120055.0], [572.0, 99694.0], [557.0, 63194.33333333333], [556.0, 120014.0], [555.0, 81395.0], [554.0, 109103.0], [553.0, 56783.0], [552.0, 120014.0], [559.0, 64900.0], [544.0, 92120.0], [547.0, 106153.5], [545.0, 70807.0], [549.0, 105200.0], [548.0, 56000.0], [551.0, 85221.0], [550.0, 91800.0], [558.0, 111708.0], [574.0, 120014.0], [575.0, 120010.0], [561.0, 104107.0], [560.0, 88007.0], [563.0, 116405.0], [562.0, 113304.0], [565.0, 98921.0], [564.0, 68368.0], [567.0, 103809.0], [566.0, 120010.0], [573.0, 120015.0], [571.0, 120015.0], [570.0, 120014.0], [569.0, 103912.0], [568.0, 120024.0], [605.0, 120012.0], [599.0, 60287.5], [600.0, 52108.21380846322], [591.0, 96283.0], [577.0, 98310.0], [576.0, 96208.0], [579.0, 92093.0], [578.0, 120010.0], [581.0, 101906.0], [580.0, 86100.0], [583.0, 99341.0], [582.0, 99112.0], [590.0, 85210.0], [589.0, 87590.0], [588.0, 85282.0], [587.0, 96297.0], [586.0, 120013.0], [585.0, 120013.0], [584.0, 120013.0], [607.0, 39806.0], [606.0, 39738.0], [604.0, 39331.5], [602.0, 39402.0], [601.0, 38342.0], [598.0, 98187.0], [597.0, 84699.0], [596.0, 69403.0], [595.0, 98353.0], [594.0, 62196.0], [593.0, 84004.0], [592.0, 73143.0], [634.0, 96598.0], [615.0, 120013.0], [613.0, 119853.0], [612.0, 119388.0], [611.0, 39994.5], [609.0, 104618.5], [614.0, 39688.0], [623.0, 64315.0], [622.0, 120013.0], [621.0, 120012.0], [620.0, 69601.0], [619.0, 120014.0], [618.0, 71261.0], [617.0, 54310.0], [616.0, 74526.5], [632.0, 103089.5], [633.0, 96391.0], [636.0, 102588.0], [639.0, 120032.0], [625.0, 60673.0], [624.0, 58915.0], [627.0, 100912.0], [626.0, 61095.0], [629.0, 108706.0], [628.0, 96515.0], [631.0, 117194.0], [630.0, 112903.0], [638.0, 119944.0], [637.0, 84110.0], [635.0, 70993.0], [667.0, 39291.0], [642.0, 97921.5], [655.0, 70100.0], [641.0, 79779.0], [654.0, 39134.0], [653.0, 39104.0], [652.0, 39144.0], [651.0, 120011.0], [650.0, 56484.0], [649.0, 108000.0], [648.0, 112495.0], [670.0, 95190.0], [657.0, 100913.0], [656.0, 100220.0], [659.0, 60784.0], [658.0, 62903.0], [669.0, 120010.0], [668.0, 92962.0], [666.0, 39199.0], [665.0, 39198.0], [664.0, 51379.0], [646.0, 120010.0], [645.0, 99675.0], [644.0, 58100.0], [643.0, 95605.0], [661.0, 61705.0], [660.0, 39297.0], [679.0, 61902.0], [700.0, 22008.319622012248], [697.0, 97818.0], [684.0, 93351.5], [683.0, 120010.0], [682.0, 72700.0], [681.0, 86271.0], [680.0, 86710.0], [686.0, 120014.0], [685.0, 120014.0], [695.0, 106158.0], [694.0, 107719.0], [693.0, 104806.0], [692.0, 105001.0], [690.0, 100701.0], [689.0, 85329.0], [699.0, 103132.0], [703.0, 38071.5], [701.0, 37892.0], [698.0, 99708.0], [696.0, 100211.0], [678.0, 58307.0], [677.0, 100162.0], [676.0, 120021.0], [675.0, 100801.0], [674.0, 39045.0], [673.0, 38889.0], [672.0, 53492.5], [687.0, 94137.0], [731.0, 107427.5], [709.0, 113805.0], [711.0, 32903.25], [710.0, 108103.0], [712.0, 13873.333333333334], [713.0, 120015.0], [715.0, 55847.0], [714.0, 38306.0], [716.0, 20097.5], [717.0, 41205.0], [718.0, 69738.66666666667], [719.0, 87192.0], [704.0, 68927.0], [706.0, 120013.0], [705.0, 38422.0], [708.0, 88320.0], [707.0, 120011.0], [720.0, 99915.75], [726.0, 105849.5], [725.0, 97111.0], [724.0, 86575.0], [723.0, 96998.0], [722.0, 102949.0], [721.0, 90995.0], [727.0, 92792.0], [728.0, 111009.33333333333], [729.0, 100950.0], [730.0, 86502.0], [735.0, 120011.0], [734.0, 38685.0], [733.0, 38600.0], [732.0, 38703.0], [762.0, 66000.0], [766.0, 69411.0], [736.0, 108002.5], [739.0, 102817.5], [738.0, 101095.0], [737.0, 38699.0], [741.0, 100799.0], [740.0, 120017.0], [743.0, 107398.0], [742.0, 80791.0], [761.0, 65996.0], [760.0, 111790.0], [763.0, 100451.0], [765.0, 82997.0], [764.0, 120009.0], [745.0, 109603.0], [744.0, 38293.0], [746.0, 38396.0], [747.0, 79160.5], [749.0, 79160.0], [748.0, 74206.0], [751.0, 90794.0], [750.0, 92297.0], [754.0, 119814.0], [759.0, 99319.0], [758.0, 61129.0], [757.0, 110810.0], [756.0, 81396.0], [755.0, 120014.0], [767.0, 71068.0], [753.0, 83615.0], [752.0, 104692.0], [774.0, 24200.0], [769.0, 38857.8], [768.0, 120017.0], [781.0, 94286.0], [782.0, 71890.0], [783.0, 81191.0], [779.0, 120016.0], [780.0, 68605.8], [770.0, 45970.77777777778], [771.0, 25672.4], [772.0, 2103.0], [773.0, 83101.5], [775.0, 99997.5], [792.0, 101827.5], [799.0, 80719.0], [798.0, 36595.0], [797.0, 36540.0], [796.0, 61942.75], [784.0, 118618.0], [785.0, 115008.0], [786.0, 120009.0], [788.0, 95059.0], [787.0, 115984.0], [789.0, 65061.5], [791.0, 60507.5], [790.0, 36625.5], [777.0, 2097.0], [776.0, 81731.0], [778.0, 75304.0], [803.0, 37691.75], [800.0, 17104.571008094183], [814.0, 25862.0], [815.0, 39183.833333333336], [812.0, 23959.5], [813.0, 46085.5], [810.0, 9527.333333333334], [811.0, 23317.875], [801.0, 10302.0], [802.0, 50746.25], [804.0, 37544.5], [805.0, 16303.0], [806.0, 18490.0], [807.0, 43845.75], [816.0, 30670.2], [824.0, 23618.821428571428], [825.0, 42873.0], [827.0, 40558.0], [826.0, 55960.0], [828.0, 77976.0], [829.0, 91843.0], [831.0, 99960.0], [830.0, 90856.0], [817.0, 64103.0], [819.0, 120014.0], [818.0, 79258.0], [821.0, 92899.0], [820.0, 78378.0], [823.0, 120013.0], [822.0, 86157.0], [808.0, 16213.0], [809.0, 18455.666666666664], [859.0, 37274.0], [834.0, 120011.0], [843.0, 90558.5], [842.0, 36691.0], [841.0, 36697.0], [840.0, 36735.0], [844.0, 74893.0], [845.0, 105453.0], [846.0, 78339.5], [847.0, 36665.0], [833.0, 105223.0], [832.0, 77977.0], [850.0, 120015.0], [849.0, 87856.0], [848.0, 36859.0], [851.0, 64577.0], [852.0, 78479.5], [853.0, 113611.0], [855.0, 36425.0], [854.0, 101601.0], [856.0, 107763.0], [839.0, 68241.0], [837.0, 36792.0], [836.0, 36786.0], [835.0, 105193.0], [858.0, 37900.0], [857.0, 36806.0], [860.0, 37213.0], [862.0, 37384.0], [861.0, 37270.0], [863.0, 107899.0], [891.0, 24126.153846153848], [876.0, 50375.0], [873.0, 29482.6], [872.0, 74942.0], [874.0, 29771.333333333332], [875.0, 33157.66666666667], [877.0, 17057.333333333336], [878.0, 31156.25], [879.0, 25796.0], [865.0, 51460.5], [867.0, 37511.0], [866.0, 37581.0], [869.0, 120014.0], [868.0, 37701.0], [871.0, 63696.0], [870.0, 120012.0], [889.0, 72883.0], [888.0, 77585.0], [892.0, 51566.0], [893.0, 24705.0], [894.0, 42164.666666666664], [895.0, 27839.8], [880.0, 120011.0], [882.0, 82239.5], [881.0, 105507.0], [883.0, 30724.0], [884.0, 51709.75], [885.0, 62986.75], [886.0, 24384.75], [887.0, 46743.5], [921.0, 50027.0], [899.0, 15932.0], [896.0, 38505.0], [898.0, 120015.0], [897.0, 103094.0], [911.0, 120017.0], [900.0, 39238.11915269201], [902.0, 112104.0], [901.0, 120012.0], [920.0, 120012.0], [903.0, 120012.0], [908.0, 65653.0], [907.0, 60899.0], [906.0, 80012.0], [905.0, 106401.0], [904.0, 120014.0], [910.0, 120017.75], [927.0, 60172.0], [913.0, 120016.0], [912.0, 120025.0], [916.0, 120018.0], [915.0, 120021.5], [919.0, 120015.0], [917.0, 120019.0], [926.0, 101924.0], [925.0, 120017.0], [924.0, 120021.5], [922.0, 120021.5], [953.0, 81501.0], [958.0, 64907.25], [928.0, 96616.0], [943.0, 69481.0], [942.0, 97025.0], [941.0, 65642.0], [940.0, 115890.0], [939.0, 73770.0], [938.0, 69971.0], [937.0, 78308.0], [929.0, 52111.0], [950.0, 59481.5], [951.0, 89567.0], [956.0, 99213.5], [959.0, 95498.0], [944.0, 77791.0], [947.0, 114635.0], [945.0, 119007.0], [949.0, 72108.0], [948.0, 86703.0], [955.0, 75001.0], [954.0, 78398.0], [952.0, 70541.5], [935.0, 81763.0], [934.0, 69900.0], [933.0, 120015.0], [932.0, 120018.0], [931.0, 120021.0], [930.0, 120016.5], [989.0, 81997.0], [968.0, 74486.33333333333], [970.0, 40597.0], [969.0, 40596.0], [972.0, 40673.0], [971.0, 40789.5], [973.0, 95851.33333333333], [981.0, 103089.2], [980.0, 120011.0], [979.0, 66325.0], [978.0, 120013.0], [977.0, 99054.5], [976.0, 120019.0], [983.0, 69008.0], [982.0, 101287.0], [991.0, 81487.0], [990.0, 61415.0], [988.0, 82650.5], [987.0, 83546.66666666667], [986.0, 92088.0], [985.0, 115401.0], [984.0, 67276.0], [967.0, 40584.0], [966.0, 100162.5], [965.0, 64175.2], [964.0, 40394.0], [963.0, 40339.5], [962.0, 40390.0], [961.0, 40191.0], [960.0, 83984.0], [975.0, 120014.0], [974.0, 120013.0], [996.0, 47799.333333333336], [1000.0, 73651.50082644624], [999.0, 82586.0], [998.0, 62830.0], [997.0, 73803.0], [995.0, 113401.0], [994.0, 52972.8], [993.0, 81523.33333333333], [992.0, 39348.0], [1.0, 111170.0]], "isOverall": false, "label": "HTTP\u8BF7\u6C42", "isController": false}, {"data": [[646.9782935538421, 35609.09678631839]], "isOverall": false, "label": "HTTP\u8BF7\u6C42-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 1000.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 270.8666666666667, "minX": 1.64084772E12, "maxY": 213969.93333333332, "series": [{"data": [[1.6408482E12, 172863.45], [1.6408479E12, 167599.28333333333], [1.64084784E12, 189827.8], [1.64084796E12, 201512.66666666666], [1.64084826E12, 213969.93333333332], [1.64084772E12, 81797.41666666667], [1.64084838E12, 150587.73333333334], [1.64084832E12, 177399.06666666668], [1.64084802E12, 203593.65], [1.64084844E12, 24074.816666666666], [1.64084814E12, 169149.38333333333], [1.64084808E12, 154084.56666666668], [1.64084778E12, 186775.91666666666]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.6408482E12, 8699.6], [1.6408479E12, 1831.4833333333333], [1.64084784E12, 2139.5833333333335], [1.64084796E12, 2230.6666666666665], [1.64084826E12, 2704.6833333333334], [1.64084772E12, 896.4666666666667], [1.64084838E12, 2473.65], [1.64084832E12, 2752.483333333333], [1.64084802E12, 2310.3333333333335], [1.64084844E12, 270.8666666666667], [1.64084814E12, 12189.0], [1.64084808E12, 1808.4333333333334], [1.64084778E12, 2062.6666666666665]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.64084844E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 10597.544247787611, "minX": 1.64084772E12, "maxY": 102330.86764705884, "series": [{"data": [[1.6408482E12, 21013.304029304036], [1.6408479E12, 32899.83478260871], [1.64084784E12, 22860.779220779208], [1.64084796E12, 44030.191071428555], [1.64084826E12, 66414.68188512514], [1.64084772E12, 10597.544247787611], [1.64084838E12, 97102.9066022545], [1.64084832E12, 79460.18668596237], [1.64084802E12, 42478.14827586207], [1.64084844E12, 102330.86764705884], [1.64084814E12, 16542.47483660129], [1.64084808E12, 64958.08590308369], [1.64084778E12, 12578.623076923066]], "isOverall": false, "label": "HTTP\u8BF7\u6C42", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.64084844E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 10591.460176991146, "minX": 1.64084772E12, "maxY": 102325.07352941176, "series": [{"data": [[1.6408482E12, 21011.8438644689], [1.6408479E12, 32893.910869565225], [1.64084784E12, 22854.6400742115], [1.64084796E12, 44024.2178571428], [1.64084826E12, 66408.92783505148], [1.64084772E12, 10591.460176991146], [1.64084838E12, 97098.52979066035], [1.64084832E12, 79455.96671490592], [1.64084802E12, 42472.05344827589], [1.64084844E12, 102325.07352941176], [1.64084814E12, 16541.506535947712], [1.64084808E12, 64952.61233480174], [1.64084778E12, 12572.853846153852]], "isOverall": false, "label": "HTTP\u8BF7\u6C42", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.64084844E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 6.900000000000002, "minX": 1.64084772E12, "maxY": 35.59740259740259, "series": [{"data": [[1.6408482E12, 9.673534798534794], [1.6408479E12, 6.9282608695652215], [1.64084784E12, 35.59740259740259], [1.64084796E12, 7.0267857142857135], [1.64084826E12, 9.848306332842412], [1.64084772E12, 8.929203539823016], [1.64084838E12, 7.198067632850237], [1.64084832E12, 7.654124457308247], [1.64084802E12, 6.900000000000002], [1.64084844E12, 8.044117647058822], [1.64084814E12, 7.538562091503267], [1.64084808E12, 6.936123348017627], [1.64084778E12, 7.251923076923077]], "isOverall": false, "label": "HTTP\u8BF7\u6C42", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.64084844E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 45.0, "minX": 1.64084772E12, "maxY": 119974.0, "series": [{"data": [[1.6408482E12, 119974.0], [1.6408479E12, 103408.0], [1.64084784E12, 80024.0], [1.64084796E12, 119915.0], [1.64084826E12, 119515.0], [1.64084772E12, 17496.0], [1.64084838E12, 119944.0], [1.64084832E12, 119612.0], [1.64084802E12, 117074.0], [1.64084844E12, 119160.0], [1.64084814E12, 119348.0], [1.64084808E12, 119687.0], [1.64084778E12, 30740.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.6408482E12, 2974.0], [1.6408479E12, 4546.0], [1.64084784E12, 45.0], [1.64084796E12, 6815.0], [1.64084826E12, 20630.0], [1.64084772E12, 2040.0], [1.64084838E12, 38342.0], [1.64084832E12, 36148.0], [1.64084802E12, 8086.0], [1.64084844E12, 83319.0], [1.64084814E12, 544.0], [1.64084808E12, 8691.0], [1.64084778E12, 3054.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.6408482E12, 55085.200000000004], [1.6408479E12, 54771.20000000001], [1.64084784E12, 38046.0], [1.64084796E12, 74433.20000000001], [1.64084826E12, 94465.8], [1.64084772E12, 14202.000000000002], [1.64084838E12, 113650.2], [1.64084832E12, 103041.2], [1.64084802E12, 73333.90000000001], [1.64084844E12, 116340.5], [1.64084814E12, 46852.0], [1.64084808E12, 95988.5], [1.64084778E12, 19679.000000000007]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.6408482E12, 109602.53999999983], [1.6408479E12, 91395.27999999996], [1.64084784E12, 64303.000000000015], [1.64084796E12, 111381.45999999988], [1.64084826E12, 116442.51], [1.64084772E12, 17179.609999999997], [1.64084838E12, 119437.86], [1.64084832E12, 117211.93999999999], [1.64084802E12, 110129.81999999998], [1.64084844E12, 119160.0], [1.64084814E12, 106791.5], [1.64084808E12, 117020.85000000002], [1.64084778E12, 28392.399999999994]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.6408482E12, 80025.64999999998], [1.6408479E12, 63553.799999999996], [1.64084784E12, 45576.0], [1.64084796E12, 87626.64999999997], [1.64084826E12, 103684.1], [1.64084772E12, 15028.0], [1.64084838E12, 117200.3], [1.64084832E12, 109038.29999999992], [1.64084802E12, 87252.34999999996], [1.64084844E12, 117079.5], [1.64084814E12, 78350.5], [1.64084808E12, 103623.0], [1.64084778E12, 23642.75]], "isOverall": false, "label": "95th percentile", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.64084844E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 2159.0, "minX": 1.0, "maxY": 120030.0, "series": [{"data": [[2.0, 38936.0], [3.0, 43754.0], [4.0, 35031.0], [5.0, 36016.0], [6.0, 33835.5], [7.0, 48535.0], [8.0, 51509.0], [9.0, 33772.0], [10.0, 38936.0], [11.0, 40460.0], [12.0, 52281.5], [13.0, 47913.0], [14.0, 47522.5], [15.0, 36687.0], [16.0, 38642.5], [17.0, 39204.0], [18.0, 35165.0], [19.0, 40294.0], [20.0, 37270.0], [21.0, 17572.5], [22.0, 26095.0], [23.0, 47126.5], [24.0, 59094.0], [25.0, 10297.0], [26.0, 63098.5], [27.0, 9310.5], [28.0, 4005.0], [29.0, 5685.5], [30.0, 4723.5], [31.0, 9405.5], [32.0, 3364.5], [33.0, 4431.5], [35.0, 4875.0], [34.0, 2263.0], [36.0, 8475.0], [37.0, 7458.5], [39.0, 4205.0], [38.0, 4582.0], [41.0, 15517.0], [40.0, 3931.0], [43.0, 5116.5], [42.0, 7537.0], [44.0, 7829.5], [46.0, 5343.0], [49.0, 2515.0], [48.0, 5645.5], [51.0, 3551.5], [50.0, 3201.5], [52.0, 5304.0], [57.0, 9337.0], [59.0, 4585.0], [61.0, 4673.0], [60.0, 6729.0], [70.0, 4972.5], [73.0, 3800.0], [74.0, 4988.0], [79.0, 5622.0], [80.0, 2413.5], [81.0, 3294.0], [83.0, 5034.0], [87.0, 4142.0], [86.0, 5186.0], [89.0, 3426.0], [88.0, 5241.0], [103.0, 5548.0], [102.0, 4330.0], [119.0, 2159.0], [120.0, 4364.5], [124.0, 9548.5], [140.0, 2636.0], [150.0, 5891.0], [173.0, 2872.5], [181.0, 5291.0], [208.0, 8676.0], [1.0, 36417.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[2.0, 120030.0], [3.0, 120014.0], [4.0, 120012.0], [5.0, 120017.0], [6.0, 120012.5], [7.0, 120013.0], [8.0, 120014.0], [9.0, 120012.0], [10.0, 120013.0], [11.0, 120012.0], [12.0, 120013.0], [13.0, 120013.5], [14.0, 120014.0], [15.0, 120014.0], [16.0, 120012.0], [17.0, 120013.0], [18.0, 120017.0], [19.0, 120011.5], [20.0, 120021.0], [21.0, 120014.0], [22.0, 120011.0], [23.0, 120017.0], [24.0, 120014.0], [26.0, 120012.0], [27.0, 120010.0], [28.0, 120013.0], [29.0, 120012.0], [30.0, 120012.0], [31.0, 120016.0], [32.0, 120012.0], [33.0, 120014.0], [35.0, 120014.0], [34.0, 120011.0], [37.0, 120010.0], [39.0, 120012.0], [38.0, 120011.0], [43.0, 120012.0], [42.0, 120012.5], [44.0, 120013.0], [46.0, 120012.0], [49.0, 120013.0], [51.0, 120015.0], [50.0, 120011.5], [52.0, 120016.0], [57.0, 120012.0], [59.0, 120013.0], [61.0, 120013.0], [60.0, 120017.0], [70.0, 120010.5], [73.0, 120012.5], [74.0, 120023.0], [79.0, 120014.0], [81.0, 120012.5], [83.0, 120025.5], [86.0, 120013.0], [89.0, 120010.5], [88.0, 120012.0], [103.0, 120014.0], [102.0, 120013.5], [119.0, 120013.0], [120.0, 120009.5], [124.0, 120015.0], [140.0, 120010.0], [150.0, 120013.0], [173.0, 120014.0], [181.0, 120014.0], [208.0, 120014.0], [1.0, 120012.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 208.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 2159.0, "minX": 1.0, "maxY": 120030.0, "series": [{"data": [[2.0, 38930.0], [3.0, 43747.0], [4.0, 35019.0], [5.0, 36010.0], [6.0, 33829.5], [7.0, 48528.5], [8.0, 51501.0], [9.0, 33764.0], [10.0, 38936.0], [11.0, 40455.0], [12.0, 52274.5], [13.0, 47887.0], [14.0, 47520.0], [15.0, 36687.0], [16.0, 38642.5], [17.0, 39198.0], [18.0, 35156.0], [19.0, 40294.0], [20.0, 37270.0], [21.0, 17567.5], [22.0, 26089.5], [23.0, 47123.5], [24.0, 59094.0], [25.0, 10291.0], [26.0, 63092.0], [27.0, 9310.5], [28.0, 4005.0], [29.0, 5685.5], [30.0, 4723.5], [31.0, 9405.5], [32.0, 3364.5], [33.0, 4431.5], [35.0, 4875.0], [34.0, 2263.0], [36.0, 8475.0], [37.0, 7458.5], [39.0, 4205.0], [38.0, 4582.0], [41.0, 15517.0], [40.0, 3931.0], [43.0, 5116.5], [42.0, 7537.0], [44.0, 7829.0], [46.0, 5343.0], [49.0, 2515.0], [48.0, 5645.5], [51.0, 3551.5], [50.0, 3201.5], [52.0, 5304.0], [57.0, 9337.0], [59.0, 4585.0], [61.0, 4673.0], [60.0, 6729.0], [70.0, 4972.5], [73.0, 3800.0], [74.0, 4988.0], [79.0, 5622.0], [80.0, 2413.5], [81.0, 3294.0], [83.0, 5034.0], [87.0, 4142.0], [86.0, 5186.0], [89.0, 3426.0], [88.0, 5241.0], [103.0, 5548.0], [102.0, 4330.0], [119.0, 2159.0], [120.0, 4364.5], [124.0, 9548.5], [140.0, 2636.0], [150.0, 5891.0], [173.0, 2872.5], [181.0, 5291.0], [208.0, 8676.0], [1.0, 36411.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[2.0, 120030.0], [3.0, 120014.0], [4.0, 120012.0], [5.0, 120017.0], [6.0, 120012.5], [7.0, 120013.0], [8.0, 120014.0], [9.0, 120012.0], [10.0, 120013.0], [11.0, 120012.0], [12.0, 120013.0], [13.0, 120013.5], [14.0, 120014.0], [15.0, 120014.0], [16.0, 120012.0], [17.0, 120013.0], [18.0, 120017.0], [19.0, 120011.5], [20.0, 120021.0], [21.0, 120014.0], [22.0, 120011.0], [23.0, 120017.0], [24.0, 120014.0], [26.0, 120012.0], [27.0, 120010.0], [28.0, 120013.0], [29.0, 120012.0], [30.0, 120012.0], [31.0, 120016.0], [32.0, 120012.0], [33.0, 120014.0], [35.0, 120014.0], [34.0, 120011.0], [37.0, 120010.0], [39.0, 120012.0], [38.0, 120011.0], [43.0, 120012.0], [42.0, 120012.5], [44.0, 120013.0], [46.0, 120012.0], [49.0, 120013.0], [51.0, 120015.0], [50.0, 120011.5], [52.0, 120016.0], [57.0, 120012.0], [59.0, 120013.0], [61.0, 120013.0], [60.0, 120017.0], [70.0, 120010.5], [73.0, 120012.5], [74.0, 120023.0], [79.0, 120014.0], [81.0, 120012.5], [83.0, 120025.5], [86.0, 120013.0], [89.0, 120010.5], [88.0, 120012.0], [103.0, 120014.0], [102.0, 120013.5], [119.0, 120012.0], [120.0, 120009.5], [124.0, 120015.0], [140.0, 120010.0], [150.0, 120013.0], [173.0, 120014.0], [181.0, 120014.0], [208.0, 120014.0], [1.0, 120012.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 208.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 5.433333333333334, "minX": 1.64084772E12, "maxY": 52.666666666666664, "series": [{"data": [[1.64084772E12, 5.433333333333334], [1.6408482E12, 38.06666666666667], [1.6408479E12, 9.333333333333334], [1.64084784E12, 10.65], [1.64084832E12, 6.333333333333333], [1.64084802E12, 11.333333333333334], [1.64084796E12, 11.0], [1.64084814E12, 52.666666666666664], [1.64084808E12, 9.233333333333333], [1.64084778E12, 10.333333333333334], [1.64084826E12, 12.983333333333333]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.64084832E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 0.03333333333333333, "minX": 1.64084772E12, "maxY": 49.15, "series": [{"data": [[1.6408482E12, 35.0], [1.6408479E12, 7.666666666666667], [1.64084784E12, 8.983333333333333], [1.64084796E12, 9.3], [1.64084826E12, 10.366666666666667], [1.64084772E12, 3.7666666666666666], [1.64084838E12, 7.35], [1.64084832E12, 10.083333333333334], [1.64084802E12, 9.466666666666667], [1.64084844E12, 1.0666666666666667], [1.64084814E12, 49.15], [1.64084808E12, 6.9], [1.64084778E12, 8.666666666666666]], "isOverall": false, "label": "200", "isController": false}, {"data": [[1.6408482E12, 1.4], [1.64084838E12, 3.0], [1.64084832E12, 1.4333333333333333], [1.64084802E12, 0.2], [1.64084844E12, 0.06666666666666667], [1.64084796E12, 0.03333333333333333], [1.64084814E12, 1.85], [1.64084808E12, 0.6666666666666666], [1.64084826E12, 0.95]], "isOverall": false, "label": "404", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.64084844E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.03333333333333333, "minX": 1.64084772E12, "maxY": 49.15, "series": [{"data": [[1.6408482E12, 1.4], [1.64084838E12, 3.0], [1.64084832E12, 1.4333333333333333], [1.64084802E12, 0.2], [1.64084844E12, 0.06666666666666667], [1.64084796E12, 0.03333333333333333], [1.64084814E12, 1.85], [1.64084808E12, 0.6666666666666666], [1.64084826E12, 0.95]], "isOverall": false, "label": "HTTP\u8BF7\u6C42-failure", "isController": false}, {"data": [[1.6408482E12, 35.0], [1.6408479E12, 7.666666666666667], [1.64084784E12, 8.983333333333333], [1.64084796E12, 9.3], [1.64084826E12, 10.366666666666667], [1.64084772E12, 3.7666666666666666], [1.64084838E12, 7.35], [1.64084832E12, 10.083333333333334], [1.64084802E12, 9.466666666666667], [1.64084844E12, 1.0666666666666667], [1.64084814E12, 49.15], [1.64084808E12, 6.9], [1.64084778E12, 8.666666666666666]], "isOverall": false, "label": "HTTP\u8BF7\u6C42-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.64084844E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 0.03333333333333333, "minX": 1.64084772E12, "maxY": 49.15, "series": [{"data": [[1.6408482E12, 35.0], [1.6408479E12, 7.666666666666667], [1.64084784E12, 8.983333333333333], [1.64084796E12, 9.3], [1.64084826E12, 10.366666666666667], [1.64084772E12, 3.7666666666666666], [1.64084838E12, 7.35], [1.64084832E12, 10.083333333333334], [1.64084802E12, 9.466666666666667], [1.64084844E12, 1.0666666666666667], [1.64084814E12, 49.15], [1.64084808E12, 6.9], [1.64084778E12, 8.666666666666666]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [[1.6408482E12, 1.4], [1.64084838E12, 3.0], [1.64084832E12, 1.4333333333333333], [1.64084802E12, 0.2], [1.64084844E12, 0.06666666666666667], [1.64084796E12, 0.03333333333333333], [1.64084814E12, 1.85], [1.64084808E12, 0.6666666666666666], [1.64084826E12, 0.95]], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.64084844E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

